<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>考研408大纲</title>
    <url>/posts/66e64d45/</url>
    <content><![CDATA[<h2 id="2025-年计算机学科专业基础考试大纲"><a href="#2025-年计算机学科专业基础考试大纲" class="headerlink" title="2025 年计算机学科专业基础考试大纲"></a>2025 年计算机学科专业基础考试大纲</h2><p><img src="https://bu.dusays.com/2025/03/03/67c54751e434a.png" alt></p>
<h3 id="一、-数据结构"><a href="#一、-数据结构" class="headerlink" title="一、 数据结构"></a>一、 数据结构</h3><h4 id="【考查目标】"><a href="#【考查目标】" class="headerlink" title="【考查目标】"></a>【考查目标】</h4><p>1 掌握数据结构的基本概念 基本原理和基本方法。</p>
<p>2 掌握数据的逻辑结构 存储结构及基本操作的实现 能够对算法进行基本的时间复杂度与空间复杂度的分析。</p>
<p>3． 能够运用数据结构基本原理和方法进行问题的分析与求解，具备采用 C 或 C＋＋ 语言设计</p>
<p>与实现算法的能力。</p>
<h3 id="一、基本概念量（2025-新增）"><a href="#一、基本概念量（2025-新增）" class="headerlink" title="一、基本概念量（2025 新增）"></a>一、基本概念量（2025 新增）</h3><p>（一）数据结构的基本概念</p>
<p>（二）算法的基本概念</p>
<h3 id="二、线性表"><a href="#二、线性表" class="headerlink" title="二、线性表"></a>二、线性表</h3><p>（一）线性表的基本概念</p>
<p>（二）线性表的实现</p>
<ul>
<li><p>顺序存储</p>
</li>
<li><p>链式存储</p>
</li>
</ul>
<p>（三）线性表的应用</p>
<h3 id="三、栈、队列和数组"><a href="#三、栈、队列和数组" class="headerlink" title="三、栈、队列和数组"></a>三、栈、队列和数组</h3><ul>
<li><p>（一）栈和队列的基本概念</p>
</li>
<li><p>（二）栈和队列的顺序存储结构</p>
</li>
<li><p>（三）栈和队列的链式存储结构</p>
</li>
<li><p>（四）多维数组的存储</p>
</li>
<li><p>（五）特殊矩阵的压缩存储</p>
</li>
<li><p>（六）栈、队列和数组的应用</p>
</li>
</ul>
<h3 id="四、树与二叉树"><a href="#四、树与二叉树" class="headerlink" title="四、树与二叉树"></a>四、树与二叉树</h3><p>（一）树的基本概念</p>
<p>（二）二叉树</p>
<ul>
<li><p>1． 二叉树的定义及其主要特征</p>
</li>
<li><p>2． 二叉树的顺序存储结构和链式存储结构</p>
</li>
<li><p>3． 二叉树的遍历</p>
</li>
<li><p>4． 线索二叉树的基本概念和构造</p>
</li>
</ul>
<p>（三）树、森林</p>
<ul>
<li><p>1 树的存储结构</p>
</li>
<li><p>2 森林与二叉树的转换</p>
</li>
<li><p>3 树和森林的遍历</p>
</li>
</ul>
<p>（四）树与二叉树的应用</p>
<ul>
<li><p>1． 哈夫曼（Huffman）树和哈夫曼编码</p>
</li>
<li><p>2． 并查集及其应用</p>
</li>
<li><p>3． 堆及其应用（25 新增）</p>
</li>
</ul>
<h3 id="四、图"><a href="#四、图" class="headerlink" title="四、图"></a>四、图</h3><p>（一）图的基本概念</p>
<p>（二）图的存储及基本操作</p>
<ul>
<li><p>1 邻 接矩阵</p>
</li>
<li><p>2 邻 接表</p>
</li>
<li><p>3． 邻接多重表 十字链表</p>
</li>
</ul>
<p>（三）图的遍历</p>
<ul>
<li><p>1． 深度优先搜索</p>
</li>
<li><p>2． 广度优先搜索</p>
</li>
</ul>
<p>（四）图的基本应用</p>
<ul>
<li><p>1 最小（代价）生成树</p>
</li>
<li><p>2 最短路径</p>
</li>
<li><p>3 拓 扑排序</p>
</li>
<li><p>4． 关键路径</p>
</li>
</ul>
<h3 id="五、查找"><a href="#五、查找" class="headerlink" title="五、查找"></a>五、查找</h3><p>（一）查找的基本概念</p>
<p>（二）顺序查找法</p>
<p>（三）分块查找法</p>
<p>（四）折半查找法</p>
<p>（五）树型查找</p>
<ul>
<li><p>1． 二叉树搜索树</p>
</li>
<li><p>2． 平衡二叉树</p>
</li>
<li><p>3． 红黑树</p>
</li>
</ul>
<p>（六）B 树及其基本操作、B＋ 树的基本概念</p>
<p>（七）散列（Hash）表</p>
<p>（八）字符串模式匹配</p>
<p>（九）查找算法的分析及应用</p>
<h3 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h3><p>（一）排序的基本概念</p>
<p>（二）直接插入排序</p>
<p>（三）折半插入排序</p>
<p>（四）起泡排序（bu b b le sort）</p>
<p>（五）简单选择排序</p>
<p>（六）希尔排序（sh e ll sort）</p>
<p>（七）快速排序</p>
<p>（八）堆排序</p>
<p>（九）二路归并排序 ｛m er g e sort）</p>
<p>（十）基数排序</p>
<p>（十一）外部排序</p>
<p>（十二）排序算法的分析和应用</p>
<h3 id="二、计算机组成原理"><a href="#二、计算机组成原理" class="headerlink" title="二、计算机组成原理"></a>二、计算机组成原理</h3><h4 id="【考查目标】-1"><a href="#【考查目标】-1" class="headerlink" title="【考查目标】"></a>【考查目标】</h4><p>1． 理解单处理器计算机系统中主要部件的工作原理、组成结构以及相互连接方式。</p>
<p>2 掌握指令集休系结构的基本知识和基本实现方法，对计算机硬件相关问题进行分析，并能够对相关部件进行设计。</p>
<p>3． 理解计算机系统的整机概念，能够综合运用计算机组成的基本原理和基本方法，对高级编程语言（C 语言）程序中的相关问题进行分析，具备软硬件协同分析和设计能力。</p>
<h3 id="一、计算机系统概述"><a href="#一、计算机系统概述" class="headerlink" title="一、计算机系统概述"></a>一、计算机系统概述</h3><p>（一）计算机系统层次结构</p>
<ul>
<li><p>1． 计算机系统的基本组成</p>
</li>
<li><p>2． 计算机硬件的基本组成</p>
</li>
<li><p>3． 计算机软件和硬件的关系</p>
</li>
<li><p>4． 计算机系统的工作原理</p>
</li>
<li><p>​         “存储程序”工作方式，</p>
</li>
<li>​           高级语言程序与机器语言程序之间的转换，</li>
<li>​           程序和指令的执行过程。</li>
</ul>
<p>（二）计算机性能指标</p>
<ul>
<li>吞吐最、响应时间；</li>
<li>CPU 时钟周期、主频、CPI , CPU 执行时间</li>
<li>MIPS， MFLOPS, GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS。；</li>
</ul>
<h3 id="二、数据的表示和运算"><a href="#二、数据的表示和运算" class="headerlink" title="二、数据的表示和运算"></a>二、数据的表示和运算</h3><p>（一）数制与编码</p>
<ul>
<li><p>进位计数制及其数据之间的相互转换</p>
</li>
<li><p>2． 定点数的编码表示</p>
</li>
</ul>
<p>（二）运算方法和运算电路</p>
<ul>
<li>1 基本运算部件: 加法器，算术逻辑部件（ALU）</li>
<li><p>加 ／ 减运算: 补码加 ／ 减运算器，标志位的生成。</p>
</li>
<li><p>3 乘 ／ 除运算: 乘 ／ 除法运算的基本原理，乘法电路和除法电路的基本结构。</p>
</li>
</ul>
<p>（三）整数的表示和运算</p>
<ul>
<li><p>1 无符号整数的表示和运算</p>
</li>
<li><p>2． 带符号整数的表示和运算</p>
</li>
</ul>
<p>（四）浮点数的表示和运算</p>
<ul>
<li>1． 浮点数的表示: IEEE 754 标准</li>
<li>2． 浮点数的加 ／ 减运算</li>
</ul>
<h3 id="三、存储器层次结构"><a href="#三、存储器层次结构" class="headerlink" title="三、存储器层次结构"></a>三、存储器层次结构</h3><p>（一）存储器的分类</p>
<p>（二）层次化存储器的基本结构</p>
<p>（三）半导体随机存取存储器</p>
<ul>
<li><p>.SRA M 存储器</p>
</li>
<li><p>DRAM 存储器</p>
</li>
<li><p>Flash 存储器</p>
</li>
</ul>
<p>（四）主存储器</p>
<ul>
<li><p>1．DRAM 芯片和内存条</p>
</li>
<li><p>2 多模块存储器</p>
</li>
<li><p>3． 主存和 CPU 之间的连接</p>
</li>
</ul>
<p>（五）外部存储器</p>
<ul>
<li><p>1． 磁盘存储器</p>
</li>
<li><p>2． 固态硬盘（SSD）</p>
</li>
</ul>
<p>（六）高速缓冲存储器（Cache）</p>
<ul>
<li>1．Cache…的基本原理</li>
<li>2．Cach 和主存之间的映射方式</li>
<li><p>Cache 中主存块的替换算法</p>
</li>
<li><p>Cache 写策略</p>
</li>
</ul>
<p>（七）虚拟存储器</p>
<ul>
<li><p>1 虚拟存储器的基本概念</p>
</li>
<li><p>2． 页式虚拟存储器: 拈本原理，页表，地址转换，TLB（块表）</p>
</li>
<li><p>3． 段式虚拟存储器的基本原理</p>
</li>
<li><p>4． 段页式虚拟存储器的基本原理</p>
</li>
</ul>
<h3 id="四、指令系统"><a href="#四、指令系统" class="headerlink" title="四、指令系统"></a>四、指令系统</h3><p>（一）指令系统的基本概念</p>
<p>（二）指令格式</p>
<p>（三）寻址方式</p>
<p>（四）数据的对齐和大 ／ 小端存放方式</p>
<p>（五）CISC 和 RISC 的基本概念</p>
<p>（六）高级语言程序与机器级代码之间的对应</p>
<ul>
<li>1.编译器，汇编器和链路器的基本概念</li>
<li><p>2． 选择结构语旬的机器级表示</p>
</li>
<li><p>3． 循环结构语旬的机器级表示</p>
</li>
<li>4． 过程（函数）调用对应的机器级表示</li>
</ul>
<h3 id="五、中央处理器（CPU）"><a href="#五、中央处理器（CPU）" class="headerlink" title="五、中央处理器（CPU）"></a>五、中央处理器（CPU）</h3><p>（一）CPU 的功能和基本结构</p>
<p>（二）指令执行过程</p>
<p>（三）数据通路的功能和基本结构</p>
<p>（四）控制器的功能和工作原理</p>
<p>（五）异常和中断机制</p>
<ul>
<li><p>1 异常和中断的基本概念</p>
</li>
<li><p>2 异常和中断的分类</p>
</li>
<li><p>3 异常和中断的检测与响应</p>
</li>
</ul>
<p>（六）指令流水线</p>
<ul>
<li><p>1 指令流水线的基本概念</p>
</li>
<li><p>2.指令流水线的基本实现</p>
</li>
<li><p>3． 结构冒险、数据冒险和控制冒险的处理</p>
</li>
<li><p>4 超 标量和动态流水线的基本概念</p>
</li>
</ul>
<p>（七）多处理器基本概念</p>
<ul>
<li><p>1．SISDLSIMD、 MIMD、向量处理器的基本概念</p>
</li>
<li><p>2.硬件多线程的基本概念 </p>
</li>
<li>3.多核处理器（multi-core）的基本概念</li>
<li>4． 共享内存多处理器（SMP）的基本</li>
</ul>
<h3 id="六、总线和输入-／-输出系统"><a href="#六、总线和输入-／-输出系统" class="headerlink" title="六、总线和输入 ／ 输出系统"></a>六、总线和输入 ／ 输出系统</h3><h4 id="（一）总线"><a href="#（一）总线" class="headerlink" title="（一）总线"></a>（一）总线</h4><p>1． 总线的晶本概念</p>
<p>2． 总线的组成及性能指标</p>
<p>3． 总线事务和定时</p>
<p>（二）1／0 接口（I／O 控制器）</p>
<ul>
<li><ol>
<li>I／O 接口的功能和基本结构</li>
</ol>
</li>
<li><ol>
<li>I／O 端口及其编址</li>
</ol>
</li>
</ul>
<p>（三）1／0 方式</p>
<ul>
<li><p>1 程序查询方式</p>
</li>
<li><p>2 程 序中断方式</p>
<p>中断的基本概念；</p>
</li>
</ul>
<p>​       中断响应过程；</p>
<p>​       中断处理过程；</p>
<p>​       多重中断和中断屏蔽的概念。</p>
<ul>
<li>3．DMA 方式</li>
</ul>
<p>DMA 控制器的组成，</p>
<p>DMA 传送过程</p>
<h3 id="三、-操作系统"><a href="#三、-操作系统" class="headerlink" title="三、 操作系统"></a>三、 操作系统</h3><h4 id="【考查目标】-2"><a href="#【考查目标】-2" class="headerlink" title="【考查目标】"></a>【考查目标】</h4><ol>
<li>掌握操作系统的基本概念方法和原理了解操作系统的结构、功能和服务，理解操作系统所采用的的策略、算法和机制。</li>
</ol>
<p>2． 能够从计算机系统的角度理解并描述应用程序、操作系统内核和计算机硬件协作完成任务</p>
<p>的过程</p>
<p>3． 能够运用操作系统原理分析并解决计算机系统中与操作系统相关的问题。</p>
<h3 id="一、操作系统概述"><a href="#一、操作系统概述" class="headerlink" title="一、操作系统概述"></a>一、操作系统概述</h3><p>（一）操作系统的基本概念</p>
<p>（二）操作系统的发展历程</p>
<p>（三）程序运行环境</p>
<p>1．CPU 运行模式（内核模式、用户模式）</p>
<p>2． 中断和异常的处理</p>
<p>3 系统调用</p>
<p>4 程序的链接与装入</p>
<p>5 程 序运行时内存映像与地址空间</p>
<p>（四）操作系统结构（分层，模块化，宏内核，微内核，外核）</p>
<p>（五）操作系统引导</p>
<p>（六）虚拟机</p>
<h3 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h3><p>（一）进程与线程</p>
<p>1． 进程与线程的基本概念</p>
<p>2． 进程 ／ 线程的状态与转换</p>
<p>3． 线程的实现（内核支持的线程，线程库支持的线程）</p>
<p>4． 进程与线程的组织与控制</p>
<p>5． 进程间通信（共享内存，消息传递，管道，信号）</p>
<p>（2025 新增）</p>
<p>（二）CPU 调度与上下文切换</p>
<p>1． 调度的基本概念</p>
<p>2． 调度的目标</p>
<p>3． 调度的实现</p>
<p>调度器 ／ 调度程序（scheduler），调度的时机与调度方式（抢占式 ／ 非抢占式），闲逛进程，内核级线程与用户级线程调度</p>
<p>4．CPU 调度算法（2025 新增）</p>
<p>5． 多处理机调度（2025 新增）</p>
<p>6． 上下文及其切换机制</p>
<p>（三）同步与互斥</p>
<p>1． 同步于互斥的基本概念</p>
<p>2 基本的实现方法 （软件方法；硬件方法）。</p>
<p>3 锁</p>
<p>4． 信号量</p>
<p>5 条件变量</p>
<p>6． 经典同步问题（生产者-消费者问题；读者-写者问题；哲学家进餐问题。）</p>
<p>（四）死锁</p>
<p>1． 死锁的基本概念</p>
<p>2． 死锁预防</p>
<p>3． 死锁避免</p>
<p>4 死锁检测和解除</p>
<h3 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h3><p>（一）内存管理基础</p>
<p>内存管理的基本概念</p>
<p>逻辑地址空间与物理地址空间，地址变换，内存共享，内存保护，内存分配与回收</p>
<p>2 连续分配管理方式</p>
<p>3． 页式管理</p>
<p>4． 段式管理</p>
<p>5． 段页式管理</p>
<h4 id="（二）虚拟内存管理"><a href="#（二）虚拟内存管理" class="headerlink" title="（二）虚拟内存管理"></a>（二）虚拟内存管理</h4><p>1 虚拟内存基本概念</p>
<p>2． 请求页式管理</p>
<p>3． 页框分配与回收（2025 新增）</p>
<p>4． 页置换算法</p>
<p>5． 内存映射文件（Memory-Mapped Files）</p>
<p>6． 虚拟存储器性能的影响因素及改进方式</p>
<h3 id="四、文件管理"><a href="#四、文件管理" class="headerlink" title="四、文件管理"></a>四、文件管理</h3><p>（一）文件</p>
<p>1． 文件的基本概念</p>
<p>2． 文件元数据和索引节点（inode）</p>
<p>3． 文件的操作（建立，删除，打开，关闭，读写）</p>
<p>4． 文件的保护</p>
<p>5． 文件的逻捐结构</p>
<p>6． 文件的物理结构</p>
<p>（二）目录</p>
<p>1． 目录的基本概念</p>
<p>2． 树形目录</p>
<p>3． 目录的操作</p>
<p>4 硬 链接和软链接</p>
<p>（三）文件系</p>
<p>1． 文件系统的全局结构（layout）</p>
<p>文件系统在外存中的结构，文件系统在内存中的结构</p>
<p>2． 外存空闲空间管理办法</p>
<p>3 虚拟文件系统</p>
<p>4． 文件系统挂载（mounting）</p>
<h3 id="五、输入输出（1／0）管理"><a href="#五、输入输出（1／0）管理" class="headerlink" title="五、输入输出（1／0）管理"></a>五、输入输出（1／0）管理</h3><p>（一）1／0 管理基础</p>
<p>1． 设备</p>
<p>设备的基本概念，设备的分类，1／0 接口，1／0 端口</p>
<p>2.1／0 控制方式</p>
<p>轮询方式，中断方式，OMA 方式</p>
<p>3.1／0 软件层次结构</p>
<p>中断处理程序，驱动程序，设备独立软件，用户层 1／0 软件</p>
<p>4． 输入 ／ 输出应用程序接口</p>
<p>字符设备接口，块设备接口，网络设备接口，阻塞 ／ 非阻塞 1／0</p>
<p>（二）设备独立软件</p>
<p>1． 缓冲区管理</p>
<p>2． 设备分配与回收</p>
<p>3． 假脱机技术（SPOOLing）</p>
<p>4． 设备驱动程序接口</p>
<p>（三）外存管理</p>
<p>1． 磁盘</p>
<p>磁盘结构，格式化，分区，磁盘调度方法</p>
<p>2． 固态硬盘</p>
<p>读写性能特性，磨损均衡</p>
<h3 id="四计算机网络"><a href="#四计算机网络" class="headerlink" title="四计算机网络"></a>四计算机网络</h3><h3 id="【考查目标】-3"><a href="#【考查目标】-3" class="headerlink" title="【考查目标】"></a>【考查目标】</h3><p>1 掌握计算机网络的基本概念、基本原理和基本方法。</p>
<p>2 掌握典型计算机网络的结构 协议、应用以及典型网络设备的工作原理</p>
<p>3． 能够运用计算机网络的基本概念、基本原理和基本方法进行网络系统的分析、设计和应用。一、计算机网络概述</p>
<p>（一）计算机网络基本概念</p>
<p>1． 计算机网络的定义、组成勹功能</p>
<p>2． 计算机网络的分类</p>
<p>3． 计算机网络主要性能指标</p>
<p>（二）计算机网络体系结构</p>
<p>1． 计算机网络分层结构</p>
<p>2． 计算机网络协议、接口、服务等概念</p>
<p>3.IS0 ／OSI 参考模型和 TCP／IP 模型</p>
<h3 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h3><p>（一）通信基础</p>
<p>1． 信道信号、带宽、码元、波特、速率、信源与信宿等基本概念</p>
<p>2． 奈奎斯特定理与香农定理</p>
<p>3． 编码与调制 ． 电路交换报文交换与分组交换</p>
<p>5 数据报与虚电路</p>
<p>（二）传输介质</p>
<p>1． 双绞线同轴电缆光纤与无线传输介质</p>
<p>2． 物理层接口的特性</p>
<p>（三）物理层设备</p>
<p>1． 中继器</p>
<p>2 集线器</p>
<h3 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h3><p>（一）数据链路层的功能</p>
<p>（二）组帧</p>
<p>（三）差错控制</p>
<ul>
<li><p>1 捡错编码</p>
</li>
<li><p>2． 纠错编码</p>
</li>
</ul>
<p>（四）流量控制与可靠传输机制</p>
<ul>
<li><p>1． 流晕控制可靠传输与滑动窗口机制</p>
</li>
<li><p>2． 停止-等待协议</p>
</li>
<li><p>3． 后退 N 帧协议（GBN）</p>
</li>
<li><p>4． 选择重传协议（SR）</p>
</li>
</ul>
<p>（五）介质访问控制</p>
<ul>
<li><p>1． 信道划分</p>
<p>频分多路复用、时分多路复用、波分多路复用、码分多路复用的概念和拈本原理。</p>
</li>
<li><p>2． 随即访问</p>
<p>ALOHA 协议； CSMA 协议；C SM NCD 协议；C SM N CA 协议。</p>
</li>
<li><p>3． 轮询访问</p>
<p>令牌传递协议</p>
</li>
</ul>
<p>（六）局域网</p>
<ul>
<li>1． 局域网的基本概念与体系结构</li>
<li><p>2． 以太网与 IEEE 802.3</p>
</li>
<li><p>IEEE802.11 尤线局域网</p>
</li>
<li><p>VLAN 拈本概念与基本原理</p>
</li>
</ul>
<p>（七）广域网</p>
<ul>
<li><p>广域网的基本概念</p>
</li>
<li><p>PPP 协议</p>
</li>
</ul>
<p>（八）数据链路层设备</p>
<ul>
<li>以太网交换机及其工作原理</li>
</ul>
<h3 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h3><p>（一）网络层的功能</p>
<p>1 异构网络互联</p>
<p>2 路由与转发</p>
<p>3.SDN 基本概念</p>
<p>4 拥塞控制</p>
<p>（二）路由算法</p>
<p>1． 静态路由与动态路由</p>
<p>2． 距离-向量路由算法</p>
<p>3.链路状态路由算法</p>
<p>4． 层次路山</p>
<p>（三）1Pv4</p>
<ol>
<li><p>1Pv4 分组</p>
</li>
<li><p>1Pv4 地址与 NAT</p>
</li>
<li><p>子网划分、路由聚集、子网掩码与 CIDR</p>
</li>
<li><p>ARP 协议 DHCP 协议与 ICMP 协议</p>
</li>
</ol>
<p>（四）1Pv6</p>
<p>1.1Pv6 的主要特点</p>
<p>2.1Pv6 地址</p>
<p>（五）路由协议</p>
<p>1． 自治系统</p>
<p>2． 域内路由与域间路由</p>
<p>3．RIP 路由协议</p>
<p>4.OSPF 路由协议</p>
<p>5．BGP 路由协议</p>
<p>（六）IP 组播</p>
<p>1． 组播的概念</p>
<p>2．IP 组播地址</p>
<p>（七）移动 IP</p>
<p>1 移动 IP 的概念</p>
<p>2 移动 IP 通信过程</p>
<p>（八）网络层设备</p>
<p>1.路由器的组成和功能</p>
<p>2.路由表与分组转发</p>
<h3 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h3><p>（一）传输层提供的服务</p>
<p>1． 传输层的功能</p>
<p>2． 传输层寻址与端口</p>
<p> 3 无 连接服务与面向连接服务</p>
<p>（二）UDP 协议</p>
<p>UDP 数据报</p>
<p>UDP 校验</p>
<p>（三）TCP 协议</p>
<ol>
<li><p>TCP 段</p>
</li>
<li><p>TCP 连接管理</p>
</li>
<li><p>TCP 可靠传输</p>
</li>
<li><p>TCP 流量控制</p>
</li>
<li><p>TCP 拥塞控制</p>
</li>
</ol>
<h3 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h3><p>（一）网络应用模型</p>
<p>1． 客户 ／ 服务器（C／S）模型</p>
<p>2． 对等（P2P）模型</p>
<p>（二）DNS 系统</p>
<p>1． 层次域名空间</p>
<p>2． 域名服务器</p>
<p>3． 域名解析过程</p>
<p>（三）FTP</p>
<p>1．FTP 协议的工作原理</p>
<p>2 控制连接与数据连接</p>
<p>（四）电子邮件</p>
<p>1． 电子邮件系统的组成结构</p>
<p>2． 电子邮件格式与 MIM E</p>
<p> 3．SMTP 协议与 POP3 协议</p>
<p>（五）WWW</p>
<p>.WWW 的概念与组成结构</p>
<p>HTTP 协议</p>
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>408</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础</title>
    <url>/posts/9ec06885/</url>
    <content><![CDATA[<h1 id="c语言基础">C语言基础</h1>
<blockquote>
<p><strong>高山仰止，景行行止。</strong></p>
<p>​ ——佚名《车舝》</p>
</blockquote>
<blockquote>
<p>视频笔记主要参考小甲鱼(不推荐)和郝斌老师(推荐)</p>
<p>后面主要是刷题（谭浩强的小绿本），整本书大概全写完了一遍（后面准备二刷），感悟很深，还是比较推荐视频看个大概，然后对着答案刷题，感觉还是很有收获的</p>
</blockquote>
<p>c语言是<strong>结构化</strong>的程序设计––顺序结构，选择结构，循环结构</p>
<h2 id="一c语言入门">一、C语言入门</h2>
<h3 id="一hello-world">一、hello world</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol type="1">
<li><p>程序从main函数开始执行，且只有一个</p></li>
<li><p>return 返回0,int是整型，然后返回一个整型0</p></li>
<li><p>print f 打印函数 \n换行</p></li>
<li><p>include 包含一个名字叫stdio.h的文件</p></li>
</ol>
<h3 id="二数据类型">二、数据类型</h3>
<p>char 字符 ’ ’ 打印字符 %c打印字符格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>int 整型 %d</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age = <span class="number">20</span>;<span class="comment">//%d</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,age);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>%f–浮点型 %lf–double型 %p—以地址打印 %x—打印16进制</p>
<p>%c在C语言中代表字符型格式符</p>
<p>%s在C语言中代表字符串型格式符</p>
<h4 id="字符占用长度"><strong>字符占用长度</strong></h4>
<table>
<thead>
<tr>
<th style="text-align: left;">字符</th>
<th style="text-align: left;">字节（8个比特位）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">char</td>
<td style="text-align: left;">1</td>
</tr>
<tr>
<td style="text-align: left;">short</td>
<td style="text-align: left;">2</td>
</tr>
<tr>
<td style="text-align: left;">int</td>
<td style="text-align: left;">4</td>
</tr>
<tr>
<td style="text-align: left;">long</td>
<td style="text-align: left;">4</td>
</tr>
<tr>
<td style="text-align: left;">long long</td>
<td style="text-align: left;">8</td>
</tr>
<tr>
<td style="text-align: left;">float</td>
<td style="text-align: left;">4</td>
</tr>
<tr>
<td style="text-align: left;">double</td>
<td style="text-align: left;">8</td>
</tr>
</tbody>
</table>
<h3 id="三键盘输入函数scanf">三、键盘输入函数—–scanf()</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从键盘输入求和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入两个数\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num,&amp;num1 );</span><br><span class="line">	sum = num + num1;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四变量的作用域和生命周期">四、变量的作用域和生命周期</h3>
<p><strong>作用域（scope）</strong>，程序设计概念，通常来说一段代码中所用到的名字并不是总是有效的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>
<p><strong>生命周期</strong>，变量的生命周期是指变量的创建到变量销毁的一个时间段</p>
<h3 id="五常量">五、常量</h3>
<h4 id="1字面常量">1.字面常量</h4>
<ul>
<li>const修饰的常变量</li>
</ul>
<p>​ 将变量转换为不可变的固定常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> num=<span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<p>​ 相当于java的fianily</p>
<ul>
<li><p>define定义的标识符常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, MAX);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2枚举常量">2.枚举常量</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	MALE,</span><br><span class="line">	FEMALA,</span><br><span class="line">	SECRET</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//enum Sex s=MALE;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, MALE);<span class="comment">//0</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, FEMALA);<span class="comment">//1</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, SECRET);<span class="comment">//2</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3字符串的打印">3.字符串的打印</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>** \0 表示字符串的结束符</p>
<p>1.strlen()–字符串统计函数 string length–计算字符串长度</p>
<p><img src="图/images/image-20230402145454188.png"></p>
<p>eg:arr2的abc后面放着一个随机值–直到0为止</p>
<h2 id="二循环语句">二、循环语句</h2>
<h3 id="1ifelse">1、if–else</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;你要好好学习吗(1/0)&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;要好好学习&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不要&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2while循环">2.while循环</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (line &lt;= <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;敲了一行代码%d\n&quot;</span>,line);</span><br><span class="line">		line++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;你已经是大牛啦&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="三方法">三、方法</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x , <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> z = x + y;</span><br><span class="line">	<span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="type">int</span> num1= <span class="number">10</span>;</span><br><span class="line">		<span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">		<span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">		sum = Add(num1, num2);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, sum);</span><br><span class="line">		sum = Add(a, b);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;sun = %d\n&quot;</span>, sum);</span><br><span class="line">       <span class="comment">//用户输入</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;c,%d)</span><br><span class="line">        <span class="type">int</span> sum=Add(c,d)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sun)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>add()自定义函数</p>
<h2 id="四数组">四、数组</h2>
<p>int arr[10]={1,2,3,4,5}</p>
<p>打印数组所有元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%D&quot;</span>,arr[i]);</span><br><span class="line">    i=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五异或非">五、异或非</h2>
<p><strong>^</strong> 异或：对应的二进制相同则为0，相异则为1</p>
<p><strong>给你们句口诀与：全一则一 或：有一则一
异或：有一则一全一则零</strong></p>
<h2 id="六常见关键字">六、常见关键字</h2>
<p><img src="https://bu.dusays.com/2025/01/15/67879fa98ccf7.png"></p>
<h3 id="typedef关键字">typedef关键字</h3>
<p>typedef:类型定义，这里理解为类型重命名</p>
<p>例:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> unit;</span><br><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num =<span class="number">0</span>;</span><br><span class="line">uint num1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="static关键字">static关键字</h3>
<p>用来修饰变量和函数的</p>
<p>1.修饰局部变量-称为静态局部变量</p>
<p>2.修饰全局变量-称为静态全局变量</p>
<p>3.修饰函数-称为静态函数</p>
<p>①</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879fa888d6e.png"></p>
<p>修饰局部变量时改变了变量存储位置，修饰全局变量时这个属性变成内部链接属性，其他源文件不能使用</p>
<h3 id="register关键字寄存器">register关键字–寄存器</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> num=<span class="number">3</span><span class="comment">//register建议3存放在寄存器中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="define定义常量和宏">define–定义常量和宏</h3>
<p><strong>宏</strong>是有参数的–宏是完成替换的</p>
<p>define ADD(x,y) （x+y）【无类型的】</p>
<p>​ 宏名 宏参数 宏体</p>
<h2 id="7指针">7.指针</h2>
<p><img src="https://bu.dusays.com/2025/01/15/6787a034aac2b.png" alt="image-20240313205843838.png"></p>
<h3 id="1内存">1.内存</h3>
<p>内存是电脑上特别重要的存储器，计算机中程序的运行都是在内存中进行的。
所以为了有效的使用内存，就把内存划分成一个个小的内存单元，每个内存单元的大小是1个字节。为了能够有效的访问到内存的每个单元，就给内存单元进行了编号，这些编号被称为该内存单元的地址。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a0907ca47.png" alt="image-20240309184905328.png"></p>
<p>指针就是地址––使用指针就是使用地址</p>
<p>指针的大小是相同的</p>
<p>指针需要多大空间，取决于地址的存储需要多大空间</p>
<h3 id="2指针是什么">2.指针是什么？</h3>
<p>在计算机科学中，指针( Pointer
)是编程语言中的一个对象，利用地址，它的值直接指向( points to
)存在电脑存储器中另一个地方的值。由于通过地址能找到所需的变量单元，可以说，地址指向该变量单元。因此，将地址形象化的称为“指针“。意思是通过它能找到以它为地址的内存单元。</p>
<p>&amp;a取到的地址是a四个字节的第一个字节</p>
<p>存放地址的变量叫指针变量</p>
<p>指针在32位平台为4个字节，64位为8个字节</p>
<p>%p—打印地址</p>
<h3 id="3指针和指针类型">3.指针和指针类型</h3>
<ol type="1">
<li><p>指针类型决定了：指针解引用的权限有多大</p></li>
<li><p>指针类型决定了，指针走一步能走多远（步长）</p></li>
<li><p>int+4,char+1,double+8字节</p></li>
</ol>
<h3 id="4野指针">4.野指针</h3>
<p>野指针是指指向位置是不可知的（随机的，不正确的，没有明确限制的）</p>
<h4 id="1指针未初始化">1.指针未初始化</h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a0b598e08.png"></p>
<h4 id="2越界访问">2.越界访问</h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a0b712be6.png"></p>
<h4 id="3指针指向的空间释放">3.指针指向的空间释放</h4>
<h3 id="5如何规避野指针">5.如何规避野指针</h3>
<ol type="1">
<li>指针初始化</li>
<li>小心指针越界</li>
<li>指针指向空间释放即使置NULL</li>
<li>指针使用之前检查有效性</li>
</ol>
<h3 id="6指针的运算">6.指针的运算</h3>
<h4 id="1指针-整数">1.指针+-整数</h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1b8c6929.png"></p>
<h4 id="2指针-指针">2.指针-指针</h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1c209281.png"></p>
<h4 id="3指针-指针得到的是指针之间元素的个数">3.<strong>指针-指针得到的是指针之间元素的个数</strong></h4>
<p>​ <img src="https://bu.dusays.com/2025/01/15/6787a1bb76af2.png"></p>
<h4 id="4指针的关系运算">4.指针的关系运算</h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a0efbf48b.png"></p>
<h3 id="7指针与数组">7.指针与数组</h3>
<p>数组名是数组首元素的地址</p>
<h3 id="8二级指针">8.二级指针**</h3>
<h3 id="9指针数组">9.指针数组</h3>
<p>存放指针的数组—int* p[5];//整型指针的数组</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a0ccc092e.png"></p>
<p>结论:指针数组是一个数组,每个数组元素存放一个指针变量</p>
<h3 id="10数组指针">10.数组指针</h3>
<p>int (*p)[5];</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e291cea.png"></p>
<p>结论:数组指针是一个指针,它指向的是一个数组</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1df8a4af.png"></p>
<h3 id="11解引用">11.解引用</h3>
<p>在一个地址前面加上取值运算符“*”，即把一个地址取出来，这种操作就叫解引用</p>
<h3 id="12二维指针数组">12.二维指针数组</h3>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1dc6a98f.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e3a611c.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//二维数组解引用</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">4</span>][<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            arr[i][j]=k++;<span class="comment">//将数组自动赋值</span></span><br><span class="line">        <span class="comment">//    printf(&quot;%d\n&quot;,arr[i][j]);//打印</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(arr+1):%p\n&quot;</span>,*(arr+<span class="number">1</span>));<span class="comment">//打印二维数组第二行首个地址值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1]:%p\n&quot;</span>,arr[<span class="number">1</span>]);<span class="comment">//打印二维数组首个地址值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[1][0]:%p\n&quot;</span>,&amp;arr[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//取出第二行第0个地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(arr+1):%d\n&quot;</span>,**(arr+<span class="number">1</span>));<span class="comment">//取出第二行第一个数组值--打开第二行第一个数组盒子</span></span><br><span class="line">    <span class="comment">//&amp;是取地址，*取值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(*(arr+1)+3):%d\n&quot;</span>,**(arr+<span class="number">1</span>)+<span class="number">3</span>);<span class="comment">//将打印二维数组第二行首个地址值+3--然后打开这个盒子</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1][3]:%d\n&quot;</span>,arr[<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13数组指针和二维数组">13.数组指针和二维数组</h3>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e09418c.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">3</span>]=arr;<span class="comment">//*P的位置是一个空，相当于[][3],将arr赋给他时*p就变成2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(p+1):%d\n&quot;</span>,**(p+<span class="number">1</span>));<span class="comment">//p+1相当于跳到第二行，*p+1相当于第二行的地址，**p+1相当于取第一位的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(arr+1):%d\n&quot;</span>,**(arr+<span class="number">1</span>));<span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1][0]:%d\n&quot;</span>,arr[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//打印第二行第一个</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(p+1):%d\n&quot;</span>,*(*(p+<span class="number">1</span>)+<span class="number">2</span>));<span class="comment">//右移动2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(arr+1):%d\n&quot;</span>,**(arr+<span class="number">1</span>)+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1][0]:%d\n&quot;</span>,arr[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-void指针无类型指针">14. void指针–无类型指针</h3>
<p>void指针我们把它称之为通用指针,就是可以指向任意类型的数据。也就是说，任何类型的指针都可以赋值给void指针。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1ddbdf9b.png"></p>
<h3 id="15-null指针如果一个指针不指向任何一个数据就是空指针">15.
null指针–如果一个指针不指向任何一个数据就是空指针</h3>
<p>当你还不清楚要将指针初始化为什么地址时，请将它初始化NULL;在对指针进行解引用时，先检查该指针是否为NULL。这种策略可以为你今后编写大型程序节省大量的调试时间。</p>
<h3 id="16-指向指针的指针二级指针">16. 指向指针的指针（二级指针)–**</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="type">int</span> **pp=&amp;p;</span><br><span class="line">pr(a)</span><br><span class="line">pr(*P)</span><br><span class="line">pr(**P)</span><br></pre></td></tr></table></figure>

<h3 id="17-指向指针的指针和指针数组">17. 指向指针的指针和指针数组</h3>
<ul>
<li><p>避免重复分配内存</p></li>
<li><p>只需要进行一次修改</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e36f3d7.png"></p></li>
</ul>
<h3 id="18数组指针和二维数组">18.数组指针和二维数组</h3>
<p>将array的首地址交给p，p+1就跳到了第二列</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e6b1c4a.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e51899a.png"></p>
<h3 id="19常量与指针">19.常量与指针</h3>
<p>const关键字可将变量变成只读</p>
<ul>
<li>指针可以修改为指向不同的常量</li>
<li>指针可以修改为指向不同的变量</li>
<li>可以通过解引用来读取指针指向的数据</li>
<li>不可以通过解引用修改指针指向的数据</li>
</ul>
<h4 id="1常量指针">1.<strong>常量指针</strong></h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;num;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>指向非常量的常量指针</p>
<p>——指针自身不可以被修改-</p>
<p>——指针指向的值可以被修改</p></li>
<li><p>指向常量的常量指针</p>
<p>一指针自身不可以被修改</p>
<p>一指针指向的值也不可以被修鸡</p></li>
</ul>
<p>const接近哪个哪个就不可以改变</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e740756.png"></p>
<p><strong>指针指代的是常量</strong></p>
<h4 id="2指向常量的常量指针"><strong>2.指向常量的常量指针</strong></h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e740756.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1ea8d01a.png"></p>
<h3 id="20malloc函数用法">20、malloc函数用法—</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 动态数组---malloc函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fo</span><span class="params">(<span class="type">int</span> *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    *q=<span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    int * p=(int *) malloc(4);</span></span><br><span class="line"><span class="comment">//    /*</span></span><br><span class="line"><span class="comment">//     * #include &lt;malloc.h&gt;必须加</span></span><br><span class="line"><span class="comment">//     * 4表示请求系统为本程序分配4个字节</span></span><br><span class="line"><span class="comment">//     * Malloc函数只有一个形参，并且为整型</span></span><br><span class="line"><span class="comment">//     * malloc函数只能返回第一个字节的地址</span></span><br><span class="line"><span class="comment">//     *这里分配了8个字节，地址占4个，整型占4个</span></span><br><span class="line"><span class="comment">//     * p是静态分配了4个字节，malloc是动态请求了4个字节</span></span><br><span class="line"><span class="comment">//     * fee(p)代表将p指向的内存给释放掉，但是p没有释放，只能等程序结束由其系统释放</span></span><br><span class="line"><span class="comment">//     *</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    *p=4;//*p代表的是一个int变量</span></span><br><span class="line"><span class="comment">//    free(p);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p =(<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>));</span><br><span class="line">     *p=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"></span><br><span class="line">    fo(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八函数">八、函数</h2>
<p>类型名 函数名(参数列表)</p>
<p>{</p>
<p>​ 函数体</p>
<p>}</p>
<h3 id="作用"><strong>作用</strong>：</h3>
<ol type="1">
<li>​ 避免了重复性操作</li>
<li>​ 有利于程序的模块化</li>
</ol>
<h4 id="1函数声明">1、函数声明</h4>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1e8a3568.png"></p>
<h4 id="2函数小案例1控制台输入求123n-1n的和">2.函数小案例1––控制台输入求1+2+3+…(n-1)+n的和</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数之初体验---控制台输入求1+2+3+...(n-1)+n的和</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sun</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=a;i++)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">int</span> a,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">     sum= sun(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3函数小案例2">3.函数小案例2——</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        temp=a;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        temp =b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    temp= max(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大值是：%d&quot;</span>,temp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2参数和返回值">2、参数和返回值</h3>
<p><strong>形参</strong>：形式参数–函数定义时写的参数</p>
<p><strong>实参</strong>：实际参数–函数调用时传的实际值</p>
<p><strong>传值</strong>：</p>
<p><strong>传址</strong>：</p>
<p><strong>可变参数</strong>––include &lt;stdarg.h&gt;</p>
<h3 id="3指针函数">3、指针函数</h3>
<p>用指针变量作为函数的返回值，就是指针函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 指针函数--用户输入给东西</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">fluth</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:<span class="keyword">return</span> <span class="string">&quot;鼠标&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:<span class="keyword">return</span> <span class="string">&quot;鼠标1&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:<span class="keyword">return</span> <span class="string">&quot;鼠标2&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="string">&quot;狗屁&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> input;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个字母：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, fluth(input));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4函数指针指向函数的指针">4、函数指针–指向函数的指针</h3>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1ebae39e.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1fbf1764.png"></p>
<p>等价</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1f8a799a.png"></p>
<h3 id="5函数指针作为参数">5、函数指针作为参数</h3>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1f722e4c.png"></p>
<h2 id="九结构体">九、结构体</h2>
<h3 id="struct关键字"><strong>struct关键字</strong></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 结构体---struct</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> socre;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st</span>=</span>&#123;<span class="number">21</span>,<span class="number">59.9</span>,<span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2 f %c\n&quot;</span>,st.age,st.socre,st.sex );</span><br><span class="line"><span class="comment">//赋值读取</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st2</span>;</span></span><br><span class="line">    st2.age=<span class="number">20</span>;</span><br><span class="line">    st2.socre=<span class="number">60</span>;</span><br><span class="line">    st2.sex=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2f %c\n&quot;</span>,st2.sex,st2.socre,st2.sex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过指针读取</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">Student</span> *<span class="title">pst</span>=</span>&amp;st;</span><br><span class="line">    pst -&gt;age=<span class="number">88</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pst-&gt;age);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//pst-&gt;age 在计算机内部会被转化成(*pst).age</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指针变量名-&gt;成员名﹐在计算机内部会被转化成(*指针变量名).成员名的方式来执行</p>
<p>pst -&gt; age 含义： pst所指向的那个结构体变量中的age成员</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 结构体---struct</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> socre;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st</span>=</span>&#123;<span class="number">21</span>,<span class="number">59.9</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&quot;小李&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2lf %c %s\n&quot;</span>,st.age,st.socre,st.sex ,st.name);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st2</span>;</span></span><br><span class="line">    st2.age=<span class="number">20</span>;</span><br><span class="line">    st2.socre=<span class="number">60</span>;</span><br><span class="line">    st2.sex=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(st2.name,<span class="string">&quot;小米&quot;</span>);<span class="comment">//字符串修改</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2lf %c %s\n&quot;</span>,st2.sex,st2.socre,st2.sex,st2.name);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">Student</span> *<span class="title">pst</span>=</span>&amp;st;</span><br><span class="line">    pst -&gt;age=<span class="number">88</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s\n&quot;</span>,pst-&gt;age,pst-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小案例1冒泡排序">小案例1–冒泡排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">               t=a[j];</span><br><span class="line">               a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">               a[j+<span class="number">1</span>]=t;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    sort(a,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小案例二用户输入成绩并排序">小案例二–用户输入成绩并排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 动态构造存放学生信息的结构体数组</span></span><br><span class="line"><span class="comment">//   存放学生信息，然后按分数排序输出</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">parr</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生人数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;len);</span><br><span class="line">    parr=(<span class="keyword">struct</span> Student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Student)*len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个学生信息:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age=:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;parr[i].age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;score=:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;parr[i].score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name=:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,parr[i].name);<span class="comment">//name本身就是数组类型的，已经有了首地址值，所以不用加&amp;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">t</span>;</span></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parr[j].score &gt; parr[j+<span class="number">1</span>].score)&#123;</span><br><span class="line">                t=parr[j];</span><br><span class="line">                parr[j]=parr[j+<span class="number">1</span>];</span><br><span class="line">                parr[j+<span class="number">1</span>]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请第%d个学生信息:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age=:%d\n&quot;</span>,parr[i].age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;score=:%d\n&quot;</span>,parr[i].score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name=:%s\n&quot;</span>,parr[i].name);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十枚举enum">十、枚举–enum</h2>
<p>把一个事物的说有可能的取值都一一陈列出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">weekDay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="keyword">enum</span> weekDay i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Monday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Tuesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wednesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Thursday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Friday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Saturday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Sunday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    f(Friday);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码更安全，</p>
<h2 id="十一进制">十一、进制</h2>
<p><strong>注意余数要倒序排序</strong></p>
<p>八进制前面要加0，最大是7</p>
<p>十六进制前面要加0 X，最大0-9，a-f</p>
<p>在汇编中:在数字后加字母B表示二进制数，加字母О表示八进制数，加字母D表示十进制数，加字母H表示十六进制数。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1f271325.png"></p>
<p>进制转换––以15为例子</p>
<p><strong>2进制</strong> 1111</p>
<p>15%2商7余1 1*2的3次方+1 *2的2次方+1 *1的1次方+1 *1的0次方=15</p>
<p>7%2商3余1</p>
<p>3%2商1余1</p>
<p>还余1</p>
<p>因此为1111</p>
<p><strong>8进制</strong> 17</p>
<p>15%8商1余7</p>
<p>因此为17 1*8+7</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1f00fbbc.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a20e6ee61.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a208b378b.png"></p>
<p>%#X–打印16</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1ff5f304.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1fd348e3.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1f666ee4.png"></p>
<h2 id="十二补码">十二、补码</h2>
<h3 id="原码">原码</h3>
<ul>
<li>​ 也叫符号-绝对值码</li>
<li>​ 最高位0表示正1表示负，其余二进制位是该数字的绝对值的二进制位</li>
</ul>
<p>​ <strong>例如</strong>：5</p>
<p>​ 的二进制是101–1表示负数 因此源码是1101</p>
<ul>
<li>原码简单易懂加减运算复杂</li>
<li>存在加减乘除四种运算，</li>
<li>增加了CPU的复杂度</li>
<li>零的表示不唯一</li>
</ul>
<h3 id="反码">反码</h3>
<p>不用</p>
<h3 id="移码">移码</h3>
<ul>
<li>表示数值平移n位，n称为移码量</li>
<li>移码主要用于浮点数的阶码的存储</li>
</ul>
<h3 id="补码">补码</h3>
<ul>
<li><p><strong>十进制转二进制</strong></p>
<p>​ <em>正整数转二进制</em></p>
<p>​ 除2取余，直到商位0，余数倒叙排序</p>
<p>​ <em>负整数转二进制</em></p>
<p>​
先求与该负数相对应的正整数二进制的,然后将所有位取反，末尾加1，不够位数时，左边补1</p>
<p>​ 例如：-3</p>
<p>​ 3的二进制011，取反变成100，然后末尾加1变成 101—》11111101</p></li>
<li><p><strong>零转二进制</strong></p>
<p>​ 全是0</p></li>
<li><p><strong>二进制转十进制</strong></p>
<p>​ 如果首位是0，则表明是正整数，按普通方法</p>
<p>​ 如果首位是1，则表明是复数</p>
<p>​ 将所有位取反，末尾加1，所得的数字就是该复数的绝对值
前面全补1</p></li>
</ul>
<h2 id="十三位运算符">十三、位运算符</h2>
<h3 id="按位与">&amp;–按位与</h3>
<p>​ &amp;&amp; 逻辑与 也叫并且（左边有右边是否相等-真1或假0）</p>
<p>​ &amp;将两个二进制进行一个相与</p>
<ul>
<li><p>​ 1&amp;1=1</p></li>
<li><p>​ 1&amp;0=0</p></li>
<li><p>0&amp;1=0</p></li>
<li><p>0&amp;0=0</p></li>
<li><p>eg: 5&amp;7=5 21&amp;7=5</p></li>
</ul>
<h3 id="按位或">|—按位或</h3>
<p>​ ||逻辑与</p>
<p>​ |按位或</p>
<ul>
<li>​ 1&amp;1=1</li>
<li>​ 1&amp;0=1</li>
<li>0&amp;1=1</li>
<li>0&amp;0=0</li>
</ul>
<h3 id="-按位取反">~ 按位取反</h3>
<p>就是把变量按二进制取反</p>
<h3 id="-按位异或">^ 按位异或</h3>
<p>相同为0，不同为1</p>
<ul>
<li>​ 1^0=1</li>
<li>​ 0^1=1</li>
<li>1^1=0</li>
<li>0^0=0</li>
</ul>
<h3 id="-按位左移">&lt;&lt; 按位左移</h3>
<p>​ i&lt;&lt;1 表示把i的所有二进制左移一位</p>
<p>​ 左移n位相当于乘以2的n次方</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787a1f218567.png"></p>
<p>​ 答案下面的快，</p>
<h3 id="-按位右移">&gt;&gt; 按位右移</h3>
<p>​ i&gt;&gt;3 表示把i的所有二进制左移3位,左边一般都为0</p>
<p>​ 右移n位相当于除以2的n次方</p>
<p>通过位运算符我们可以对数据精确到每一位</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣</title>
    <url>/posts/6ead9846/</url>
    <content><![CDATA[<h2 id="力扣之初体验"><a href="#力扣之初体验" class="headerlink" title="力扣之初体验"></a>力扣之初体验</h2><span id="more"></span>
<h5 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h5><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1] </span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p>
<h6 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> {</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; numsSize; j++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) {</span><br><span class="line">                <span class="type">int</span> *arr = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">                arr[<span class="number">0</span>] = i;</span><br><span class="line">                arr[<span class="number">1</span>] = j;</span><br><span class="line">                *returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 考虑不存在的情况，但本题中不会出现</span></span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>这里为暴力循环，第一层先遍历i，然后遍历j当找到相同时创建一个新数组</p>
<h5 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h5><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<h6 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * };</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span> {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newNode</span> =</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span> =</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,carry=<span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">while</span>(l1 || l2)</span><br><span class="line">    {</span><br><span class="line">      <span class="type">int</span> a= l1 ? l1-&gt;val:<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> b= l2 ? l2-&gt;val:<span class="number">0</span>;</span><br><span class="line">      sum =a+b+carry;</span><br><span class="line">      <span class="keyword">if</span>(!head)</span><br><span class="line">      {</span><br><span class="line">        head =newNode =(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        newNode -&gt;val=sum%<span class="number">10</span>;</span><br><span class="line">        newNode -&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">      }<span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        newNode -&gt;next=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        newNode-&gt;next-&gt;val=sum%<span class="number">10</span>;</span><br><span class="line">        newNode=newNode-&gt;next;</span><br><span class="line">        newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">      }</span><br><span class="line">      carry=sum/<span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span>(l1)</span><br><span class="line">      {</span><br><span class="line">        l1=l1-&gt;next;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span>(l2)</span><br><span class="line">      {</span><br><span class="line">        l2=l2-&gt;next;</span><br><span class="line">      }</span><br><span class="line">     }</span><br><span class="line">    <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)</span><br><span class="line">     {</span><br><span class="line">      newNode-&gt;next =(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">      newNode-&gt;next-&gt;val=carry;</span><br><span class="line">      newNode= newNode-&gt;next;</span><br><span class="line">      newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h5><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong>的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<h6 id="题解-滑动窗口解决"><a href="#题解-滑动窗口解决" class="headerlink" title="题解-滑动窗口解决"></a>题解-滑动窗口解决</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(<span class="type">char</span>* s)</span> {</span><br><span class="line">    <span class="type">int</span> i,len=<span class="number">0</span>,max=<span class="number">0</span>,start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index[<span class="number">255</span>]={<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;s[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">    {</span><br><span class="line">       <span class="keyword">if</span>(index[s[i]]&gt;start)<span class="comment">//如果不是第一次出现</span></span><br><span class="line">       {</span><br><span class="line">        len=i-start;</span><br><span class="line">        start=index[s[i]];</span><br><span class="line">        <span class="keyword">if</span>(len&gt;max)</span><br><span class="line">        {</span><br><span class="line">            max=len;</span><br><span class="line">        }</span><br><span class="line">       }</span><br><span class="line">       index[s[i]]=i+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(len-start&gt;max){</span><br><span class="line">        <span class="keyword">return</span> len-start;</span><br><span class="line">    }<span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>个人理解：</p>
<ol>
<li>首先定义了一个空数组，255个字节代表255的char类型</li>
<li>进入for循环，这里我们以pwwkew为例</li>
<li>首先index[s[i]]代表index的第多少元素位置，例如p的阿史克马的位置</li>
<li>p第一次出现，p的位置为0，不大于0，不会进入循环，然后将index[s[0]]的位置改为p的实际位置 1</li>
<li>同理，w位置为2，此时i为1</li>
<li>w，进入循环，Len =2-0=2；start=2(因为此时未执行到index[s[i]]=i+1;所以start还是上一次的值），max=2;</li>
<li>……</li>
<li>w时，Len=5-3=3；start=2,max=3</li>
</ol>
]]></content>
      <categories>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>力扣刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb尚硅谷版</title>
    <url>/posts/12826/</url>
    <content><![CDATA[<h1 id="javaweb尚硅谷版">javaweb尚硅谷版</h1>
<h2 id="一-前端">一、 前端</h2>
<h3 id="1ajax">1.Ajax</h3>
<h4 id="11-whay-ajax">1.1 whay ajax?</h4>
<ul>
<li>AJAX = Asynchronous JavaScript and XML(异步的
JavaScript和XML)。</li>
<li>AJAX不是新的编程语言，而是一种使用现有标准的新方法。</li>
<li>AJAX最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</li>
<li>AJAX不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</li>
<li>XMLHttpRequest只是实现Ajax的一种方式。</li>
</ul>
<p><strong>工作原理</strong>：</p>
<p><img src="https://bu.dusays.com/2025/01/19/678cb6b768203.png" alt="image-20250119162422695"></p>
<ul>
<li>·简单来说,我们之前发的请求通过类似form表单标签,a标签这种方式,现在通过运行js代码动态决定什么时候发送什么样的请求。</li>
<li>通过运行Js代码发送的请求浏览器可以不用跳转页面,我们可以在JS代码中决定是否要跳转页面</li>
<li>·通过运行JS代码发送的请求,接收到返回结果后,我们可以将结果通过dom编程渲染到页面的某些元素上,实现局部更新</li>
</ul>
<h4 id="12-使用说明">1.2 使用说明</h4>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 实例化一个xmlHttpRequest</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置xmlHttpRequest的回调函数</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//alert(&quot;后端响应了: &quot; + xmlhttp.responseText); // 在控制台输出响应</span></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//xmlhttp.responseText 后端响应回来的数据</span></span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//将信息放到指定位置</span></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> inputEle= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;message&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">         inputEle.<span class="property">value</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置发送请求的路径和参数</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/hello?username=zhangsan&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getMessage()&quot;</span>&gt;</span>在吗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置字符编码，以处理中文乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回响应</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/01/19/678cc714c6f31.png" alt="image-20250119173412134"></p>
<h3 id="2前端工程化">2.前端工程化</h3>
<blockquote>
<p>前端工程化是使用软件工程的方法来单独解决前端的开发流程中<code>模块化、组件化、规范化、自动化</code>的问题,其主要目的为了提高效率和降低或本。</p>
</blockquote>
<p><img src="https://bu.dusays.com/2025/02/16/67b192026ad4e.png" alt="image-20250216152137864"></p>
<h3 id="3es6">3.es6</h3>
<h4 id="31-es6的变量和模板字符串">3.1 es6的变量和模板字符串</h4>
<ul>
<li>let和var的差别</li>
</ul>
<ol type="1">
<li>let不能重复声明</li>
<li>let有块级作用域，非函数的花括号遇见let会有块级作用域，也就是只能在花括号里面访问。</li>
<li>let不会预解析进行变量提升</li>
<li>let定义的全局变量不会作为window的属性</li>
<li>let在es6中推荐优先使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. let不能重复声明</span></span><br><span class="line">        <span class="keyword">var</span> i=<span class="number">10</span></span><br><span class="line">       <span class="comment">// var i=100</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> j=<span class="number">10</span></span><br><span class="line">        <span class="keyword">let</span> j=<span class="number">100</span></span><br><span class="line">        <span class="comment">// 2. let有块级作用域，非函数的花括号遇见let会有块级作用域，也就是只能在花括号里面访问。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> i=<span class="number">10</span></span><br><span class="line">            <span class="keyword">let</span> j=<span class="number">10</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)<span class="comment">//正确</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">          <span class="comment">// console.log(j)会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. let不会预解析进行变量提升</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        <span class="keyword">var</span> i=<span class="number">10</span><span class="comment">//打印undefind</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        <span class="keyword">var</span> j=<span class="number">10</span><span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. let定义的全局变量不会作为window的属性</span></span><br><span class="line">        <span class="keyword">var</span> a =<span class="number">10</span> <span class="comment">//a会变成window对象的属性</span></span><br><span class="line">        <span class="keyword">let</span> b =<span class="number">10</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>)</span><br><span class="line">        <span class="comment">// 5. let在es6中推荐优先使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.const就是不可修改的变量，相当于final</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">let</span> c=<span class="number">10</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 模板字符串 字符串换行和字符串拼接问题  */</span></span><br><span class="line">        <span class="comment">// &quot;&quot; &#x27;&#x27; 处理字符串不支持多行</span></span><br><span class="line">        <span class="comment">//使用 ``拼接</span></span><br><span class="line">        <span class="keyword">let</span> city =<span class="string">&#x27;背景&#x27;</span></span><br><span class="line">       <span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">           &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">           &lt;li&gt;<span class="subst">$&#123;city&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">           &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">           &lt;/ul&gt;`</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="32-es6的解构表达式">3.2 es6的解构表达式</h4>
<blockquote>
<p>ES6的解构赋值是一种方便的语法，可以快速将数组或对象中的值拆分并赋值给变量。解构赋值的语法使用花括号<code>&#123;&#125;</code>表示对象，方括号<code>[]</code>表示数组。通过解构赋值，函数更方便进行参数接受等!</p>
</blockquote>
<blockquote>
<p>数组解构赋值</p>
</blockquote>
<ul>
<li>可以通过数组解构将数组中的值赋值给变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span>[a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure>

<ul>
<li>该语句将数组[1,2,3]中的第一个值赋值给a变量，第二个值赋值给b变量，第三个值赋值给c变量。可以使用默认值为变量提供备选值，在数组中缺失对应位置的值时使用该默认值。例如:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e=<span class="number">10</span>]=arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象解构赋值</p>
</blockquote>
<ul>
<li>使用解构表达式获取对象属性值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;age,name&#125;=person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age,name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>解构表达式应用在方法的参数列表</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">showArr</span>(<span class="params">[a,b,c]</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line"><span class="title function_">showArr</span>(arr)</span><br></pre></td></tr></table></figure>

<h4 id="33-es6的箭头函数">3.3 es6的箭头函数</h4>
<blockquote>
<p>基本功能</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun1 =<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//普通函数声明</span></span><br><span class="line">   <span class="keyword">let</span> <span class="title function_">fun2</span>=(<span class="params"></span>) =&gt;&#123;&#125;<span class="comment">//箭头函数声明</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> <span class="title function_">fun3</span> =(<span class="params">x</span>)=&gt;&#123;<span class="keyword">return</span> x+<span class="number">1</span>&#125;<span class="comment">//普通</span></span><br><span class="line">   <span class="keyword">let</span> <span class="title function_">fun4</span> =x=&gt;&#123;<span class="keyword">return</span> x+<span class="number">1</span>&#125;<span class="comment">//参数列表只有一个参数，()可以省略</span></span><br><span class="line">   <span class="keyword">let</span> <span class="title function_">fun5</span> =(<span class="params">x</span>)=&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(x)<span class="comment">//如果方法体中只有一行代码 &#123;&#125;可以省略</span></span><br><span class="line">   <span class="keyword">let</span> <span class="title function_">fun6</span> =(<span class="params">x</span>)=&gt; x+<span class="number">1</span><span class="comment">//方法体中，有且只有一样代码，这行代码是return返回结果的代码，那么&#123;&#125;和return都可以省略</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>this</p>
</blockquote>
<p>箭头函数没有自己的this</p>
<p>箭头函数中的this是外层上下文环境中的this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">showName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">viewName</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    person.<span class="title function_">showName</span>()</span><br><span class="line">    person.<span class="title function_">viewName</span>()</span><br></pre></td></tr></table></figure>

<p><strong>案例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#xdd</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;xdd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">/* //不带箭头</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        var xdd=document.getElementById(&quot;xdd&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        xdd.onclick=function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            let _this=this</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            window.setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                _this.style.backgroundColor=&quot;yellow&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;,2000)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xdd=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;xdd&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        xdd.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;yellow&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="34-rest和spread">3.4 rest和spread</h4>
<blockquote>
<p>rest参数，在形参上使用和JAVA中的可变参数几乎一样</p>
</blockquote>
<blockquote>
<p>spread参数，在实参上使用rest</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="comment">//rest 解决剩余参数接收问题</span></span><br><span class="line">     <span class="keyword">let</span> <span class="title function_">fun1</span>=(<span class="params">a,b,c,...arr</span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="title function_">fun1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment">//spread 是rest在实参上的使用</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">     <span class="keyword">let</span> <span class="title function_">fun2</span> =(<span class="params">a,b,c</span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fun1</span>(...arr)</span><br><span class="line">   <span class="comment">//快速合并数组</span></span><br><span class="line">     <span class="keyword">let</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">     <span class="keyword">let</span> b =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">     <span class="keyword">let</span> c =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">     <span class="keyword">let</span> d=[...a,...b,...c]</span><br><span class="line"></span><br><span class="line">     <span class="comment">//快速合并对象</span></span><br><span class="line">     <span class="keyword">let</span> person1=&#123;<span class="attr">name</span>:<span class="string">&quot;李阳&quot;</span>&#125;</span><br><span class="line">     <span class="keyword">let</span> person2=&#123;<span class="attr">age</span>:<span class="string">&quot;10&quot;</span>&#125;</span><br><span class="line">     <span class="keyword">let</span> person3=&#123;<span class="attr">gender</span>:<span class="string">&quot;boy&quot;</span>&#125;</span><br><span class="line">     <span class="keyword">let</span> person4=&#123;...person1,...person2,...person3&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="35-es6的对象创建和拷贝">3.5 es6的对象创建和拷贝</h4>
<h5 id="对象创建">对象创建</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            #n;<span class="comment">//私有属性</span></span></span><br><span class="line"><span class="language-javascript">            age;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.#n;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.#n = n;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//实例方法</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">eat</span>(<span class="params">food</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁的<span class="subst">$&#123;<span class="variable language_">this</span>.#n&#125;</span>正在吃<span class="subst">$&#123;food&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//静态方法</span></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> a+b  </span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//构造器</span></span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.#n=name;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span>=age;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     let person = new Person(&quot;小米&quot;,8);  // Use &quot;Person&quot; with uppercase P</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    // person.name = &quot;李阳&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    // person.age=23</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(person.name);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     person.eat(&quot;火锅&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(Person.sum(10,20))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//访问私有属性</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* let person = new Person(&quot;小米&quot;,8);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    console.log(person.name) */</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="36-es6模块化处理">3.6 es6模块化处理</h4>
<blockquote>
<p>模块化是一种组织和管理前端代码的方式，将代码拆分成小的模块单元，使得代码更易于维护、扩展和复用。它包括了定义、导出、导入以及管理模块的方法和规范。前端模块化的主要优势如下:</p>
</blockquote>
<ol type="1">
<li>提高代码可维护性:通过将代码拆分为小的模块单元，使得代码结构更为清晰，可读性更高，便于开发者阅读和维护。</li>
<li>提高代码可复用性:通过将重复使用的代码变成可复用的模块，减少代码重复率，降低开发成本。</li>
<li>提高代码可扩展性:通过模块化来实现代码的松耦合，便于更改和替换模块，从而方便地扩展功能。</li>
</ol>
<ul>
<li>ES6模块化的几种暴露和导入方式
<ol type="1">
<li>分别导出</li>
<li>统一导出</li>
<li>默认导出</li>
</ol></li>
<li><code>ES6中无论以何种方式导出,导出的都是一个对象，导出的内容都可以理解为是向这个对象中添和属性或者方法</code></li>
</ul>
<h5 id="分别导出">分别导出</h5>
<p>需要添加export关键字</p>
<p><code>model.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> =<span class="number">3.14</span><span class="comment">//export暴露</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PI2</span>=<span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello,my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> ,I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入module.js文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  *代表model.js的所有成员</span></span><br><span class="line"><span class="comment">  无论何种方式导入，导入的内容都会被当成一个对象处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">PI</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">PI2</span>)</span><br></pre></td></tr></table></figure>

<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用app.js --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4vue">4.VUE</h3>
<h4 id="41-vite创建前端工程化页面">4.1 vite创建前端工程化页面</h4>
<ul>
<li>vs的控制台中输入 npm create vite即可</li>
<li>cd 到我们创建的目录</li>
<li>运行npm i</li>
<li>运行npm run dev</li>
</ul>
<hr>
<p><img src="https://bu.dusays.com/2025/02/17/67b30f47ac1db.png" alt="image-20250217182815143"></p>
<ul>
<li>public目录:用于存放一些公共资源，如HTML文件、图像、字体等，这些资源会被直接复制到构建出的目标目录中。</li>
<li>src/目录:存放项目的源代码，包括JavaScript、CSs、Vue组件、图像和字体等资源。在开发过程中，这些文件会被Vite
实时编译和处理，并在浏览器中进行实时预览和调试。以下是src内部划分建议:
<ol type="1">
<li><code>assets/</code>目录:用于存放一些项目中用到的静态资源，如图片、字体、样式文件等。</li>
<li><code>components/</code>目录:用于存放组件相关的文件。组件是代码复用的一种方式，用于抽象出一个可复用的U部件，方便在不同的场景中
进行重复使用。</li>
<li><code>layouts/</code>目录:用于存放布局组件的文件。布局组件通常负责整个应用程序的整体布局，如头部、底部、导航菜单等。</li>
<li><code>pages/</code>目录:用于存放页面级别的组件文件，通常是路由对应的组件文件。在这个目录下，可以创建对应的文件夹，用于存储不同的
页面组件。</li>
<li><code>plugins/</code>目录:用于存放vte
插件相关的文件，可以按需加载不同的插件来实现不同的功能，如自动化测试、代码压缩等。</li>
<li><code>routerl</code>目录:用于存放Wwejis的路由配置文件，负责管理视图和URL之间的映射关系，方便实现页面之间的跳转和数据传递。</li>
<li><code>store/</code>目录:用于存放Vuex状态管理相关的文件，负责管理应用程序中的数据和状态，方便统一管理和共享数据，提高开发效率。</li>
<li><code>utils/</code>目录:用于存放一些通用的工具函数，如日期处理函数、字符串操作函数等。</li>
</ol></li>
<li>vite.config js文件:
Vite的配置文件，可以通过该文件配置项目的参数、插件、打包优化等。该文件可以使用CommonS或ES6模块的语法进行配置。</li>
<li>package.json文件:标准的
Node.is项目配置文件，包含了项目的基本信息和依赖关系。其中可以通过scripts字段定义几个命令，如dev.build、serve等，用于启动开发、构建和启动本地服务器等操作。</li>
<li>Vie项点的入口为src/main,js文件，这是’Vue,js
应用程序的启动文件，也是整个前端应用程序的入口文件。在该文件中，通常会引入Mue.js及其相关插件和组件，同时会创建Vue实例，挂载到HTML页面上指定的DOM元素中。</li>
</ul>
<h4 id="42关于css样式引用的导入方式">4.2关于css样式引用的导入方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">/*css样式引用的方式</span><br><span class="line">1.在.vue文件中的style标签中</span><br><span class="line">2.将css样式保存在独立的css文件中，哪个vue文件需要，就在那里导入</span><br><span class="line">   在script中导入</span><br><span class="line">    import&#x27;./style/test.css&#x27;</span><br><span class="line">   在style中导入</span><br><span class="line">   @import&#x27;./style/test.css&#x27;</span><br><span class="line">3.如果某个样式要在所有vue中显示</span><br><span class="line">   可以在main中导入</span><br><span class="line">    import &#x27;./style/test.css&#x27;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import&#x27;./style/test.css&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;span class=&quot;s1&quot;&gt;你好&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">@import&#x27;./style/test.css&#x27;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="43-vitevue3响应式入门和setup函数">4.3
vite+vue3响应式入门和setup函数</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">    //定义一些要展示到页面上的数据  变量/对象 </span><br><span class="line">    let counter =ref(2)</span><br><span class="line">    //自增的方法</span><br><span class="line">    function counterIncr()&#123;</span><br><span class="line">     counter.value++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //自减的方法</span><br><span class="line">    function counterDecr()&#123;</span><br><span class="line">    counter.value--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">  响应式数据：在数据变化时，vue会将变量最新的值更新到dom树中，页面上的数据就是最新的</span><br><span class="line">  非响应式数据：在数据变化时，vue不会更新</span><br><span class="line">  vue3中要经过ref/reactive函数处理才变成最新的</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;counterIncr()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;span v-text=&quot;counter&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;button @click=&quot;counterDecr()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5vue的视图渲染技术">5.vue的视图渲染技术</h3>
<h4 id="51插值表达式">5.1插值表达式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">插值表达式</span><br><span class="line">&#123;&#123;数据名字/函数&#125;&#125;</span><br><span class="line">*/</span><br><span class="line">//定义常见类型的数据</span><br><span class="line">let msg =&quot;hello liyang&quot;</span><br><span class="line">let getMsg=()=&gt;&#123;</span><br><span class="line">  return &quot;hello vue3&quot;</span><br><span class="line">&#125;</span><br><span class="line">let age=11</span><br><span class="line">let bee=&quot;蜜 蜂&quot;</span><br><span class="line">let carts=[&#123;name:&quot;可乐&quot;,price:3,number:5&#125;,&#123;name:&quot;雪碧&quot;,price:4,number:5&#125;,&#123;name:&quot;辣条&quot;,price:0.5,number:5&#125;]</span><br><span class="line">//定义一个获取购物车总金额的方法</span><br><span class="line">function computer()&#123;</span><br><span class="line">  let count=0</span><br><span class="line">  for(let index in carts)&#123;</span><br><span class="line">    count+=carts[index].price* carts[index].number</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return count</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">&lt;!-- 将数据绑定到下面的元素 --&gt;</span><br><span class="line"> &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"> msg的值为&#123;&#123; msg &#125;&#125;</span><br><span class="line"> msg的方法值为&#123;&#123; getMsg() &#125;&#125;&lt;br&gt;</span><br><span class="line"> &lt;!-- 插值表达式支持一些常见的运算符 --&gt;</span><br><span class="line">  年龄：&#123;&#123; age &#125;&#125;,是否成年&#123;&#123; age&gt;18?&#x27;是&#x27;:&#x27;否&#x27; &#125;&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 插值表达式中支持对象调用api --&gt;</span><br><span class="line">   &#123;&#123; bee.split(&#x27; &#x27;).reverse().join(&#x27;&#x27;) &#125;&#125; &lt;br&gt;</span><br><span class="line">   &#123;&#123; computer() &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="52-v-text与v-html">5.2 v-text与v-html</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v-text 不识别带有html的代码</span></span><br><span class="line"><span class="comment">v-html 可以识别</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;&#123;&#125;&#125;插值表达式</span></span><br><span class="line"><span class="comment">v-*** vue的指令</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">命令必须依赖标签，在开始标签中使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">let msg=<span class="string">&quot;helloworld&quot;</span></span><br><span class="line">let msg2=<span class="string">&quot;liyang&quot;</span></span><br><span class="line">let msg3=`$&#123;msg&#125; $&#123;msg2&#125;`</span><br><span class="line"><span class="comment">// 支持常见的运算符</span></span><br><span class="line"><span class="type">let</span> <span class="variable">age</span> <span class="operator">=</span><span class="number">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持API的调用</span></span><br><span class="line"><span class="comment">//支持函数调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let fontMsg=<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;你好&lt;/font&gt;&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;&lt;br&gt;</span><br><span class="line">  &lt;h1 v-text=<span class="string">&quot;msg3&quot;</span>&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;h1 v-text=<span class="string">&quot;`你好 $&#123;msg2&#125;`&quot;</span>&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;h1 v-text=<span class="string">&quot;age&gt;18?&#x27;成年&#x27;:&#x27;未成年&#x27;&quot;</span>&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1 v-html=<span class="string">&quot;fontMsg&quot;</span>&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="53-atteibute属性渲染-v-band">5.3 Atteibute属性渲染 v-band</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">/*</span><br><span class="line">属性渲染命令</span><br><span class="line">v-bind 将数据绑定在元素属性上</span><br><span class="line">*/</span><br><span class="line">//let imgURL=&quot;https://img.lwxpz.me/file/1739857121688_屏幕截图 2024-12-17 112612.png&quot;</span><br><span class="line">const data=&#123;</span><br><span class="line">    logo:&quot;https://img.lwxpz.me/file/1739857121688_屏幕截图 2024-12-17 112612.png&quot;,</span><br><span class="line">    name:&quot;liyang&quot;,</span><br><span class="line">    url:&quot;http://ly.baskly.us.kg&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">&lt;!-- &lt;img v-bind:src=&quot;imgURL&quot;&gt; --&gt;</span><br><span class="line"> &lt;a v-bind:href=&quot;data.url&quot;&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;data.logo&quot; v-bind:title=&quot;data.name&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="54-v-on-事件绑定">5.4 v-on 事件绑定</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">v-on:事件名称=&quot;函数名()&quot;</span><br><span class="line">可以简写为@事件名称</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function fun1() &#123;</span><br><span class="line">    alert(&quot;hi&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let counter = ref(1);</span><br><span class="line"></span><br><span class="line">function fun3(event) &#123;</span><br><span class="line">    if (confirm(&quot;确定要访问目标链接吗&quot;)) &#123;</span><br><span class="line">        // 通过返回值控制是否阻止默认行为</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fun4() &#123;</span><br><span class="line">    alert(&quot;被点击&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">    &lt;!-- 事件的绑定函数 --&gt;</span><br><span class="line">    &lt;button @click=&quot;fun1()&quot;&gt;hello&lt;/button&gt;</span><br><span class="line">    &lt;!-- 内联事件处理器 --&gt;</span><br><span class="line">    &lt;button @click=&quot;counter++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;!-- 事件的修饰符 .once 事件只绑定一次 prevent修饰符阻止组件默认行为--&gt;</span><br><span class="line">    &lt;button @click.once=&quot;counter++&quot;&gt;Click Once&lt;/button&gt;</span><br><span class="line">    &lt;a href=&quot;http://ly.baskly.us.kg&quot; @click=&quot;fun3($event)&quot;&gt;yang&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;http://ly.baskly.us.kg&quot; @click.prevent=&quot;fun4()&quot;&gt;yu&lt;/a&gt;</span><br><span class="line">    &#123;&#123; counter &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="55-响应式数据处理的方式">5.5 响应式数据处理的方式</h4>
<p>让一个普通数据转换为响应式数据的两种方式 1 ref函数 更适合单个变量
在script标签中操作ref响应式数据需要.value 在template标签中不需要.values
2 reactive函数 更适合对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">让一个普通数据转换为响应式数据的两种方式</span><br><span class="line">1 ref函数 更适合单个变量</span><br><span class="line">  在script标签中操作ref响应式数据需要.value</span><br><span class="line">   在template标签中不需要.values</span><br><span class="line">2 reactive函数 更适合对象</span><br><span class="line">  </span><br><span class="line">*/</span><br><span class="line">let counter =ref(10)</span><br><span class="line"></span><br><span class="line">let person=reactive(&#123;</span><br><span class="line">  name:&quot;李阳&quot;,</span><br><span class="line">  age:8</span><br><span class="line">&#125;)</span><br><span class="line">function incr()&#123;</span><br><span class="line">    counter.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function incrAge()&#123;</span><br><span class="line">  person.age++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;incr()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;counter++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&#123;&#123; counter &#125;&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;button @click=&quot;incrAge()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&#123;&#123; person.age &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="56-条件和列表渲染-v-ifv-show和v-for">5.6 条件和列表渲染
v-if/v-show和v-for</h4>
<h5 id="v-ifv-show">v-if/v-show</h5>
<ul>
<li>.
v-if是“真实的“按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</li>
<li>. v-if
也是惰性的:如果在初次渲染时条件值为false，则不会做任何事。条件区块只有当条件首次变为true时才被渲染。·相比之下，v-show
简单许多，元素无论初始条件如何，始终会被渲染，只有CSS
display属性会被切换。</li>
<li>·总的来说，
v-if有更高的切换开销，而”v-show有更高的初始渲染开销。因此，如果需要频繁切换，则使用v-show较好;如果在运行时绑定条件很少改变，则v-if
会更合适。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import&#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">v-if=&quot;表达式/数据&quot; 数据为true 则当前元素会渲染进入dom树</span><br><span class="line">v-else 自动和前一个v-if取反</span><br><span class="line">v-show =&quot;&quot; 数据为true则展示到页面上 否则不展示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v-if 如果数据为false则元素不再dom树中了</span><br><span class="line">v-show </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">let flag=ref(true)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &lt;h1 v-if=&quot;flag&quot;&gt;vue is awesome!&lt;/h1&gt;</span><br><span class="line">   &lt;h1 id=&quot;bb&quot; v-else&gt;ononon&lt;/h1&gt;</span><br><span class="line">   &lt;h1 v-show=&quot;flag&quot;&gt;hhh&lt;/h1&gt;</span><br><span class="line">   &lt;button @click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="v-for">v-for</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">let pro =ref(&quot;产品&quot;)</span><br><span class="line"></span><br><span class="line">let items = reactive([</span><br><span class="line">    &#123; id: &quot;item1&quot;, message: &quot;薯片&quot; &#125;,</span><br><span class="line">    &#123; id: &quot;item2&quot;, message: &quot;面包&quot; &#125;,</span><br><span class="line">    &#123; id: &quot;item3&quot;, message: &quot;烤鸡&quot; &#125;</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">       &#123;&#123; pro &#125;&#125; &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="小德莫demo">小德莫demo</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">let pro = ref(&quot;产品&quot;);</span><br><span class="line"></span><br><span class="line">let items = reactive([</span><br><span class="line">    &#123; id: &quot;item1&quot;, message: &quot;薯片&quot; &#125;,</span><br><span class="line">    &#123; id: &quot;item2&quot;, message: &quot;面包&quot; &#125;,</span><br><span class="line">    &#123; id: &quot;item3&quot;, message: &quot;烤鸡&quot; &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">let carts = reactive([</span><br><span class="line">    &#123; name: &quot;可乐&quot;, price: 3, number: 10 &#125;,</span><br><span class="line">    &#123; name: &quot;雪碧&quot;, price: 3, number: 1 &#125;,</span><br><span class="line">    &#123; name: &quot;薯片&quot;, price: 5, number: 20 &#125;,</span><br><span class="line">    &#123; name: &quot;辣条&quot;, price: 2, number: 5 &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">function removeItem(index) &#123;</span><br><span class="line">  const confirmDelete = confirm(&quot;确定要删除该商品吗？&quot;);</span><br><span class="line">  if (confirmDelete) &#123;</span><br><span class="line">    carts.splice(index, 1);  // 删除指定索引的商品</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//计算总金额的函数</span><br><span class="line">function compute()&#123;</span><br><span class="line">    let total=0</span><br><span class="line">    for(let index in carts)&#123;</span><br><span class="line">       total+= carts[index].price*carts[index].number</span><br><span class="line">    &#125;</span><br><span class="line">   return total</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;您的购物车如下&lt;/h1&gt;</span><br><span class="line">    &lt;table border=&quot;1px&quot; class=&quot;cart-table&quot;&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;小计&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(cart, index) in carts&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; cart.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; cart.price.toFixed(2) &#125;&#125;&lt;/td&gt; &lt;!-- 格式化价格 --&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; cart.number &#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; (cart.price * cart.number).toFixed(2) &#125;&#125;&lt;/td&gt; &lt;!-- 格式化小计 --&gt;</span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;button @click=&quot;removeItem(index)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"> 购物车总金额:&#123;&#123; compute() &#125;&#125;元</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123; pro &#125;&#125; &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.cart-table &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cart-table th, .cart-table td &#123;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">  color: white;</span><br><span class="line">  border: none;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button:hover &#123;</span><br><span class="line">  background-color: darkred;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line">  margin: 20px 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="57-双向绑定">5.7 双向绑定</h4>
<h5 id="单项绑定">单项绑定</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">单项绑定 响应式数据发生变化时，更新dom树 用户的操作如果造成页面内容的改变不会影响响应式数据</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">let message =ref(&quot;zhangsan&quot;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-bind:value=&quot;message&quot;&gt;&lt;br&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125; </span><br><span class="line"></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="双向绑定">双向绑定</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">单项绑定 v-bind 响应式数据发生变化时，更新dom树 用户的操作如果造成页面内容的改变不会影响响应式数据</span><br><span class="line">双向绑定 v-model 页面数据由于用户的操作造成改变，也会同步修改响应式数据</span><br><span class="line">         双向绑定一边都用于表单标签</span><br><span class="line">         v-model:value=&quot;数据&quot;</span><br><span class="line">*/</span><br><span class="line">let user = reactive(&#123;</span><br><span class="line">    username: &quot;&quot;,</span><br><span class="line">    userPwd: &quot;&quot;,</span><br><span class="line">    intro:&quot;&quot;,</span><br><span class="line">    pro:&quot;&quot;</span><br><span class="line">&#125;)</span><br><span class="line">let hbs=ref([])</span><br><span class="line"></span><br><span class="line">function cleanForm()&#123;</span><br><span class="line">    user.username=&quot;&quot;</span><br><span class="line">    user.userPwd=&quot;&quot;</span><br><span class="line">    user.intro=&quot;&quot;</span><br><span class="line">    user.pro=&quot;&quot;</span><br><span class="line">    hbs.value.splice(0,hbs.value.length)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;user.username&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; v-model=&quot;user.userPwd&quot;&gt;&lt;br&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    唱&lt;input type=&quot;checkbox&quot; v-model=&quot;hbs&quot; value=&quot;sing&quot;&gt;</span><br><span class="line">    跳&lt;input type=&quot;checkbox&quot; v-model=&quot;hbs&quot; value=&quot;dance&quot;&gt;</span><br><span class="line">    rap&lt;input type=&quot;checkbox&quot; v-model=&quot;hbs&quot; value=&quot;rap&quot;&gt;</span><br><span class="line">    篮球&lt;input type=&quot;checkbox&quot; v-model=&quot;hbs&quot; value=&quot;basketball&quot;&gt;</span><br><span class="line">    简介:&lt;textarea v-model=&quot;user.intro&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">   &lt;br&gt;</span><br><span class="line">   籍贯:</span><br><span class="line">   &lt;select v-model=&quot;user.pro&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;1&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;2&quot;&gt;河南&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;3&quot;&gt;湖北&lt;/option&gt;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">   &lt;button @click=&quot;cleanForm&quot;&gt;清空&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; user &#125;&#125;&lt;/p&gt; </span><br><span class="line">    &#123;&#123; hbs &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="58-属性计算">5.8 属性计算</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive,computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">/*</span><br><span class="line">计算属性:其能不间断的执行这个箭头函数 让其数据保持最新，而原身的做不到</span><br><span class="line">*/</span><br><span class="line">const author=reactive(&#123;</span><br><span class="line">    name:&quot;李阳&quot;,</span><br><span class="line">    books:[&quot;java从入门到精通&quot;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过方法返回数据 每使用一次，执行一次</span><br><span class="line">function hasBook()&#123;</span><br><span class="line">    return author.books.length&gt;0?&quot;是&quot;:&quot;否&quot;</span><br><span class="line">&#125;</span><br><span class="line">//通过计算属性获取数据 每次使用如果和上次使用的数据未发生变化，则使用上次数据</span><br><span class="line">let bookMessage = computed(()=&gt;&#123;</span><br><span class="line">    return author.books.length&gt;0?&quot;是&quot;:&quot;否&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &lt;p&gt;作者:&#123;&#123; author.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">   是否出版过图书:&#123;&#123; hasBook() &#125;&#125;&lt;br&gt;</span><br><span class="line">   是否出版过图书:&#123;&#123; bookMessage &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="59-数据监听">5.9 数据监听</h4>
<p>双向绑定版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let funame = ref(&#x27;&#x27;)</span><br><span class="line">let finame = ref(&#x27;&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    姓氏: &lt;input type=&quot;text&quot; v-model=&quot;funame&quot;&gt;&lt;br&gt;</span><br><span class="line">    名字: &lt;input type=&quot;text&quot; v-model=&quot;finame&quot;&gt;&lt;br&gt;</span><br><span class="line">    全名: &#123;&#123; funame &#125;&#125; &#123;&#123; finame &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>监听版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive, watch,watchEffect &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let funame = ref(&#x27;&#x27;)</span><br><span class="line">let finame = ref(&#x27;&#x27;)</span><br><span class="line">let lastname = reactive(&#123;</span><br><span class="line">  name: &quot;&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//任何的响应式数据 ，如果是想监听，直接监听即可，无需将要监听的响应式数据作为参数</span><br><span class="line">//</span><br><span class="line">watchEffect(()=&gt;&#123;</span><br><span class="line">  funame.value=finame.value+lastname.value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// watch 函数监听 一个ref响应式数据</span><br><span class="line">// 当 finame 发生变化时执行后面的函数</span><br><span class="line">watch(finame, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(`$&#123;oldValue&#125; 变为 $&#123;newValue&#125;`)</span><br><span class="line">  // 更新 funame 为姓氏 + 名字</span><br><span class="line">  funame.value = newValue + lastname.name</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// watch 函数监听一个reactive响应式数据 专门监听reactive响应式数据中的一个属性</span><br><span class="line">watch(() =&gt; lastname.name, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(`$&#123;oldValue&#125; 变为 $&#123;newValue&#125;`)</span><br><span class="line">  funame.value=finame.value+newValue</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//watch 函数监听一个reactive响应式数据 专门监听reactive响应式数据中的所有属性</span><br><span class="line">watch(() =&gt; lastname, (newValue, oldValue) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  //此时new和old都一样，都是last</span><br><span class="line">  funame.value=finame.value+lastname.name</span><br><span class="line">&#125;,&#123;deep:true,immediate:true&#125;)//是否要深度监听(监听所有属性),是否要先监听一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    姓氏: &lt;input type=&quot;text&quot; v-model=&quot;funame&quot;&gt;&lt;br&gt;</span><br><span class="line">    名字: &lt;input type=&quot;text&quot; v-model=&quot;finame&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastname.name&quot; placeholder=&quot;请输入姓氏&quot;&gt;&lt;br&gt;</span><br><span class="line">    全名: &#123;&#123; funame &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="510-组件化">5.10 组件化</h4>
<p><strong>白雪警告</strong></p>
<p>Header.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h5&gt;欢迎：xxx的光临&lt;a href=&quot;#&quot;&gt;退出登录&lt;/a&gt; &lt;/h5&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Navigator.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//向父组件发送参数</span><br><span class="line">import &#123;defineEmits&#125; from &#x27;vue&#x27;</span><br><span class="line">//定义一个向父组件提交数据的事件 事件名称自定义</span><br><span class="line"></span><br><span class="line">const emits= defineEmits([&quot;sendMenu&quot;])</span><br><span class="line"></span><br><span class="line">//提交数据的方法</span><br><span class="line">function send(data) &#123;</span><br><span class="line">  emits(&quot;sendMenu&quot;,data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li @click=&quot;send(&#x27;学员管理&#x27;)&quot;&gt;学员管理&lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;send(&#x27;图书管理&#x27;)&quot;&gt;图书管理&lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;send(&#x27;请假管理&#x27;)&quot;&gt;请假管理&lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;send(&#x27;班级管理&#x27;)&quot;&gt;班级管理&lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;send(&#x27;教师管理&#x27;)&quot;&gt;教师管理&lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;send(&#x27;考试管理&#x27;)&quot;&gt;考试管理&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Content.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//接收父组件的参数 </span><br><span class="line">import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  message:String</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    这里是展示区</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"> //引用3个组件</span><br><span class="line"> import Header from &#x27;./components/Header.vue&#x27;</span><br><span class="line"> import Navigator from &#x27;./components/Navigator.vue&#x27;;</span><br><span class="line">import Content from &#x27;./components/Content.vue&#x27;;</span><br><span class="line">let menu =ref(&quot;&quot;)</span><br><span class="line">function receiver(data)&#123;</span><br><span class="line">  menu.value=data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;Header class=&quot;header&quot;&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;Navigator @sendMenu=&quot;receiver&quot; class=&quot;navigator&quot;&gt;&lt;/Navigator&gt;</span><br><span class="line">    &lt;Content class=&quot;content&quot; :message=&quot;menu&quot;&gt;&lt;/Content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.header&#123;</span><br><span class="line">  height: 80px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.navigator&#123;</span><br><span class="line">  width:20% ;</span><br><span class="line">  height: 500px;</span><br><span class="line">  border: 1px solid green;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content&#123;</span><br><span class="line">  width:  79%;</span><br><span class="line">  height: 500px;</span><br><span class="line">  border: 1px solid blue;</span><br><span class="line">  float:right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6vue3的路由机制router">6.Vue3的路由机制router</h3>
<h4 id="61简介">6.1简介</h4>
<blockquote>
<p>什么是路由</p>
</blockquote>
<ul>
<li>定义:路由就是根据不同的URL地址展示不同的内容或页面。</li>
<li>通俗理解:路由就像是一个地图，我们要去不同的地方，需要通过不同的路线进行导航。</li>
</ul>
<blockquote>
<p>路由的作用</p>
</blockquote>
<ul>
<li>单页应用程序(SPA）中，路由可以实现不同视图之间的无刷新切换，提升用户体验;</li>
<li>路由还可以实现页面的认证和权限控制，保护用户的隐私和安全;</li>
<li>路由还可以利用浏览器的前进与后退，帮助用户更好地回到之前访问过的页面。</li>
</ul>
<h4 id="62-路由的使用">6.2 路由的使用</h4>
<blockquote>
<p>npm install vue-router</p>
</blockquote>
<h4 id="63-路由案例">6.3 路由案例</h4>
<p>src/components/Add.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;add &lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>src/components/Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;home&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>src/components/List.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;list &lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>src/components/Update.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;Update &lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>src/routers/router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入创建对象需要的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入.vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于定义多个不同的路径</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/List&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/Update&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Update</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Add</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    hello 李阳</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;router-link to=&quot;/home&quot;&gt;home&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">  &lt;router-link to=&quot;/list&quot;&gt;list&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">  &lt;router-link to=&quot;/add&quot;&gt;add&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">  &lt;router-link to=&quot;/update&quot;&gt;update&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 该标签会被替换成具体的.vue --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  goodby 李阳</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在整个app.vue中可以使用路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="64-路由重定向">6.4 路由重定向</h4>
<p>在router.js中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">           <span class="attr">path</span>:<span class="string">&quot;/showAll&quot;</span>,</span><br><span class="line">           <span class="attr">redirect</span>:<span class="string">&quot;/list&quot;</span></span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>

<p>表示我们请求showAll还会重定向到list</p>
<h4 id="65-编程式路由">6.5 编程式路由</h4>
<blockquote>
<p>普通路由</p>
</blockquote>
<ul>
<li><code>&lt;router-link to="/home"&gt;home&lt;/router-link&gt;&lt;br&gt;</code>这种路由,to中的内容目前是固定的,点击后只能切换/list对象</li>
</ul>
<blockquote>
<p>编程式路由</p>
</blockquote>
<ul>
<li>通过useRouter,动态决定向那个组件切换的路由</li>
<li>在Vue 3和vue Router
4中，你可以使用useRouter来实现动态路由(编程式路由)</li>
<li>这里的useRouter方法返回的是一个router对象，你可以用它来做如导航到新页面、返回上一页面等操作。</li>
</ul>
<blockquote>
<p>案例</p>
</blockquote>
<ul>
<li>App.vue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import&#123;useRouter&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import&#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">const router =useRouter()</span><br><span class="line">let mypath=ref(&quot;&quot;)</span><br><span class="line">function showList()&#123;</span><br><span class="line">  //编程式路由实现页面跳转</span><br><span class="line">  router.push(&quot;/list&quot;)</span><br><span class="line"></span><br><span class="line">  //传对象</span><br><span class="line">  router.push(&#123;path:&quot;list&quot;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function goMyPage()&#123;</span><br><span class="line">  router.push(mypath.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    hello 李阳</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;!-- 声明式路由 --&gt;</span><br><span class="line">  &lt;router-link to=&quot;/home&quot;&gt;home&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">  &lt;router-link to=&quot;/list&quot;&gt;list&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">  &lt;router-link to=&quot;/add&quot;&gt;add&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">  &lt;router-link to=&quot;/update&quot;&gt;update&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 编程式路由 --&gt;</span><br><span class="line">   &lt;button @click=&quot;goMyPage()&quot;&gt;go&lt;/button&gt;&lt;input type=&quot;text&quot; v-model=&quot;mypath&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 该标签会被替换成具体的.vue --&gt;</span><br><span class="line">     &lt;hr&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  goodby 李阳</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>routers/router.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入创建对象需要的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入.vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于定义多个不同的路径</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/List&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/Update&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Update</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Add</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showAll&quot;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&quot;/list&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="66-路由传参">6.6 路由传参</h4>
<blockquote>
<p>路径参数–params</p>
</blockquote>
<ul>
<li>在路径中使用一个动态字段来实现，我们称之为路径参数
<ul>
<li>例如:查看数据详情/showDetail/1
,1就是要查看详情的id,可以动态添值!</li>
</ul></li>
</ul>
<blockquote>
<p>键值对参数-query</p>
</blockquote>
<ul>
<li>类似与get请求通过url传参,数据是键值对形式的
<ul>
<li>例如:查看数据详情/showDetail?hid=1 ,
hid=1就是要传递的键值对参数</li>
<li>在Vue 3和Vue Router
4中，你可以使用useRoute这个函数从vue的组合式API中获取路由对象。</li>
<li>useRoute方法返回的是当前的route对象，你可以用它来获取关于当前路由的信息，如当前的路径、查询参数等。</li>
</ul></li>
</ul>
<blockquote>
<p>案例需求：切换到ShowDetail.vue组件时,向该组件通过路由传递参数</p>
</blockquote>
<h5 id="661-路径传参数">6.6.1 路径传参数</h5>
<p>/components/ShowDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 接收传递过来的路径参数</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; ref ,onUpdated&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let languageId =ref(0)</span><br><span class="line">let languageName=ref(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">let route=useRoute()</span><br><span class="line">languageId.value=route.params.id  </span><br><span class="line">languageName.value=route.params.language</span><br><span class="line"></span><br><span class="line">onUpdated(()=&gt;&#123;</span><br><span class="line">  languageId.value=route.params.id  </span><br><span class="line">languageName.value=route.params.language</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;ShowDetail接收路径参数 &lt;/h1&gt;</span><br><span class="line">   &lt;h3&gt;&#123;&#123; languageId &#125;&#125;&#123;&#123; languageName &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>routers/router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入创建对象需要的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入.vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于定义多个不同的路径</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showDetail/:id/:language&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">ShowDetail</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/List&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/Update&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Update</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Add</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showAll&quot;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&quot;/list&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import&#123;useRouter&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import&#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">import ShowDetail from &#x27;./components/ShowDetail.vue&#x27;;</span><br><span class="line">const router=useRouter()</span><br><span class="line"></span><br><span class="line">function showDetail(id,language)&#123;</span><br><span class="line"> //方式一</span><br><span class="line"> // router.push(`/showDetail/$&#123;id&#125;/$&#123;language&#125;`)</span><br><span class="line"></span><br><span class="line"> //方式二</span><br><span class="line"> router.push(&#123;path:`/showDetail/$&#123;id&#125;/$&#123;language&#125;`&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;router-link to=&quot;/showDetail/1/java&quot;&gt;声明式路由路径传参数&lt;/router-link&gt;</span><br><span class="line">   &lt;button @click=&quot;showDetail(2,&#x27;PHP&#x27;)&quot;&gt;  编程式路由路径传参&lt;/button&gt; </span><br><span class="line">   </span><br><span class="line">   &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="662-键值对传参">6.6.2 键值对传参</h5>
<p>草拟嘛了个逼 前端这么多东西怎么学啊 我草泥马</p>
<p>components/ShowDwtail2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 接收传递过来的路径参数</span><br><span class="line">//query 键值对cans</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; ref ,onUpdated&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let languageId =ref(0)</span><br><span class="line">let languageName=ref(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">let route=useRoute()</span><br><span class="line">languageId.value=route.query.id  </span><br><span class="line">languageName.value=route.query.language</span><br><span class="line"></span><br><span class="line">onUpdated(()=&gt;&#123;</span><br><span class="line">  languageId.value=route.query.id  </span><br><span class="line">languageName.value=route.query.language</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;ShowDetail键值对参数 &lt;/h1&gt;</span><br><span class="line">   &lt;h3&gt;&#123;&#123; languageId &#125;&#125;&#123;&#123; languageName &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于定义多个不同的路径</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showDetail2&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">ShowDetail2</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">//向外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import&#123;useRouter&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import&#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">import ShowDetail from &#x27;./components/ShowDetail.vue&#x27;;</span><br><span class="line">const router=useRouter()</span><br><span class="line"></span><br><span class="line">function showDetail(id,language)&#123;</span><br><span class="line"> //方式一</span><br><span class="line"> // router.push(`/showDetail/$&#123;id&#125;/$&#123;language&#125;`)</span><br><span class="line"></span><br><span class="line"> //方式二</span><br><span class="line"> router.push(&#123;path:`/showDetail/$&#123;id&#125;/$&#123;language&#125;`&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showDetail2(id,language)&#123;</span><br><span class="line">  //方式一</span><br><span class="line">  router.push(`/showDetail2/?id=$&#123;id&#125;&amp;language=$&#123;language&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/showDetail/1/java&quot;&gt;声明式路由路径传参数&lt;/router-link&gt;</span><br><span class="line">    &lt;button @click=&quot;showDetail(2,&#x27;PHP&#x27;)&quot;&gt;  编程式路由路径传参&lt;/button&gt; </span><br><span class="line">   </span><br><span class="line">   &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">   &lt;router-link to=&quot;/showDetail2/?id=1&amp;language=java&quot;&gt;声明式路由键值对&lt;/router-link&gt;</span><br><span class="line">   &lt;button @click=&quot;showDetail2(3,&#x27;C&#x27;)&quot;&gt;  编程式路由键值对传参&lt;/button&gt; </span><br><span class="line">   </span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="67-路由守卫">6.7 路由守卫</h4>
<blockquote>
<p>在Vue
3中，路由守卫是用于在路由切换期间进行一些特定任务的回调函数。路由守卫可以用于许多任务，例如验证用户是否已登录、在路由切换前提供确认提示、请求数据等。ue
3为路由守卫提供了全面的支持，并提供了以下几种类型的路由守卫</p>
</blockquote>
<ol type="1">
<li>全局前置守卫：在路由切换前被调用，可以用于验证用户是否已登录、中断导航、请求数据等。</li>
<li>全局后置守卫:在路由切换之后被调用，可以用于处理数据、操作
DOM、记录日志等。</li>
<li>守卫代码放在router.js里面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置全局前置守卫</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次路由切换页面前，都会执行这个beforeEach中的回调函数</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(</span><br><span class="line">    <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           from 上一个页面从哪里来</span></span><br><span class="line"><span class="comment">           to下一个页面到哪里去</span></span><br><span class="line"><span class="comment">           next放行的方法只有执行了该方法才会放行路由</span></span><br><span class="line"><span class="comment">           next() 放行</span></span><br><span class="line"><span class="comment">           next(&quot;/路径&quot;) 路由的重定向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全局后置守卫</span></span><br><span class="line"><span class="comment">//每次页面切换路由后都会执行afterEach中的函数</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(</span><br><span class="line">    <span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="68-路由练习">6.8 路由练习</h4>
<blockquote>
<p>登录案例 登录以后才可以进入home ，否则必须进入login</p>
</blockquote>
<p><code>components/Home.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import&#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">let username=window.sessionStorage.getItem(&#x27;username&#x27;)</span><br><span class="line">const router=useRouter()</span><br><span class="line">function logout()&#123;</span><br><span class="line">//清除用户登录的信息</span><br><span class="line">window.sessionStorage.removeItem(&quot;username&quot;)</span><br><span class="line">//跳转到login</span><br><span class="line">router.push(&quot;/login&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;home页面&lt;/h1&gt;</span><br><span class="line">   &lt;h3&gt; 欢迎&#123;&#123; username &#125;&#125;登录&lt;/h3&gt;</span><br><span class="line">   &lt;button @click=&quot;logout()&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>components/Login.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125;from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">let username =ref(&#x27;&#x27;)</span><br><span class="line">let password=ref(&#x27;&#x27;)</span><br><span class="line">let router=useRouter()</span><br><span class="line"></span><br><span class="line">function login()&#123;</span><br><span class="line">   //获取用户名密码</span><br><span class="line">   //root 123456</span><br><span class="line">   //登陆成功自动跳转到/home，失败不跳转，给出提示</span><br><span class="line"></span><br><span class="line">   if(username.value==&#x27;root&#x27; &amp;&amp; password.value==&#x27;123456&#x27;)&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //将用户名保存在浏览器中 </span><br><span class="line">    window.sessionStorage.setItem(&quot;username&quot;,username.value)</span><br><span class="line"></span><br><span class="line">    //路由跳转 /home</span><br><span class="line">    router.push(&quot;/home&quot;)</span><br><span class="line"></span><br><span class="line">   &#125;else&#123;</span><br><span class="line">    alert(&quot;用户名密码有误&quot;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   账号：&lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">   密码: &lt;input type=&quot;password&quot; v-model=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">   &lt;button @click=&quot;login()&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>routers/router,js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router =<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过路由的前置守卫校验登录</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span>==<span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//判断如果是去登录页面，直接放行即可</span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果是其他任何资源，都要在登录之后才会放行，如果没有登录，则重定向到登录页面</span></span><br><span class="line">        <span class="keyword">const</span> username=<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>!=username)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>App.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app= <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7axios">7.axios</h3>
<h4 id="71-promise">7.1 promise</h4>
<h5 id="710-普通函数和回调函数">7.1.0 普通函数和回调函数</h5>
<blockquote>
<p>普通函数:正常调用的函数,一般函数执行完毕后才会继续执行下一行代码</p>
</blockquote>
<blockquote>
<p>回调函数:一些特殊的函数,表示未来才会执行的一些功能,后续代码不会等待该函数执行完毕就开始执行了</p>
</blockquote>
<p>回调函数是一种基于事件的,自动调用函数
回调函数其他的代码不会等待回调函数执行完毕</p>
<h5 id="简介">简介</h5>
<blockquote>
<p>前端中的异步编程技术，类似Java中的多线程+线程结果回调!</p>
</blockquote>
<ul>
<li>Promise是异步编程的一种解决方案，比传统的解决方案–回调函数和事件–更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</li>
<li>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。</li>
</ul>
<blockquote>
<p>promise 特点</p>
</blockquote>
<p>(1〉Promise对象代表一个异步操作，有三种状态，‘Pending`(进行中)、‘Resolved(已完成，又称Fulfilled)和Rejected’(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是“Promise’这个名字的由来，它的英语意思就是“承诺“，表示其他手段无法改变。</p>
<p>(2〉一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能。从’Pending
’变为“Resolved’和从’Pending
‘变为‘Rejected’。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。</p>
<blockquote>
<p>基本语法</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   resolve函数在回调函数中如果调用resolve方法, promise会由pending转换为resolved</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// reject函数在回调函数中如果调用reject方法, promise会由pending转换为reject</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;founction&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">resolve</span>()</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//reject()</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ws1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//promise 转变为resolved 状态时才会执行的函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;succeed&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//promise转变为reject时才会执行的函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ws2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>async 和await的基本使用</p>
</blockquote>
<h5 id="async">async</h5>
<p>async帮助我们使用简洁的语法获得一个promise对象</p>
<ul>
<li>async用户标识函数的async函数返回的结果就是一个promise</li>
<li>方法如果正常return结果,promise状态就是resolved
return后的结果就是成功状态的返回值</li>
<li>方法中出现了异常,则返回的promise就是一个失败状态</li>
<li>async函数返回的结果如果是一个promise,则状态由内部的promise决定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> promise=<span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">       ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">       )</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="await">await</h5>
<p>await帮助我们获取promise成功状态的返回值的关键字</p>
<ul>
<li>await右边如果是一个普通值,则直接返回该值如果右边是promise,返回promise成功状态的结果</li>
</ul>
<p>​ let res = await“张三“</p>
<p>​ let res = await Promise.resolve(“张三”) ​ res =“张三”</p>
<ul>
<li>await右边如果是一个失败状态的promise那么await会直接抛异常</li>
<li>await关键字必须在async修饰的函数中使用，async函数中可以没有await</li>
<li>awat后边的代码会等待await执行完毕继续运行</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  let promise =Promise.reject(&quot;haha&quot;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  return promise</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> res =<span class="keyword">await</span> <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>听的我直恶心，跳了跳了</p>
<h4 id="72-axios">7.2 Axios</h4>
<p>小案例</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">async function getLoveMessage() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await axios(&#123;</span><br><span class="line">      method: &#x27;get&#x27;,</span><br><span class="line">      url: &#x27;/api/api/rand.qinghua?format=json&#x27;,</span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(response.data);</span><br><span class="line">    if (response.data.code === 1) &#123;</span><br><span class="line">      message.value = response.data.content;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;请求出错:&#x27;, error.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;getLoveMessage()&quot;&gt;换一个~&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;    </span><br></pre></td></tr></table></figure>

<p>vite.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.uomg.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Axios get 和post方法</p>
</blockquote>
<h2 id="二后端">二、后端</h2>
<h3 id="21-http">2.1 HTTP</h3>
<p><strong>HTTP超文本传输协议</strong>(HTTP-Hyper Text transfer
protocol)，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过十几年的使用与发展，得到不断地完善和扩展。它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。客户端与服务端通信时传输的内容我们称之为报文。HTTP协议就是规定报文的格式。HTTP就是一个通信规则，这个规则规定了客户端发送给服务器的报文格式，也规定了服务器发送给客户端的报文格式。实际我们要学习的就是这两种报文。客户端发送给服务器的称为“请求报文“，服务器发送给客户端的称为“响应报文““。</p>
<hr>
<p>咦 这东西好耳熟，计网学过了</p>
<p>有点无聊，我们去学Servlet去吧</p>
<h3 id="22-servlet">2.2 Servlet</h3>
<p>记得我们大专的时候，这块老师讲的很详细，好像很重要的样子，李阳，这一块好好看好好学</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e4cd9740.png" alt="image-20241228131707368.png"></p>
<p>李师傅要开始瞎编了：</p>
<p>首先当在浏览器我们要点击操作的时候，浏览器会发出请求，这里包含请求的信息，然后传给tomcat</p>
<p>tomcat会创建两个方法，获取我们在java中所写的要的操作，然后根据操作做出相应回来</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e4ba551e.png" alt="image-20241228132147260.png"></p>
<h4 id="demo-xml方式">demo-xml方式</h4>
<p>前端验证用户名，当用户名已注册返回NO，未注册返回YES</p>
<p>哈哈哈哈哈哈哈 终于到实操了，理论太无聊了</p>
<h5 id="代码部分">代码部分</h5>
<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/28/13:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * servlet开发流程：</span></span><br><span class="line"><span class="comment"> * 1.创建javaweb项目，同时添加依赖</span></span><br><span class="line"><span class="comment"> * 2.重写Servlet方法</span></span><br><span class="line"><span class="comment"> * 3.在servlet方法中定义业务处理代码</span></span><br><span class="line"><span class="comment"> * 4.在xml中配置Servlet对应的请求路径（后面会用注解）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.从request对象中获取请求的信息</span></span><br><span class="line"><span class="comment">         * 2.处理业务代码</span></span><br><span class="line"><span class="comment">         * 3.将相应的输入放到response里面去</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.根据参数名获取参数值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//当我们的admin和username的值相等，返回NO</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span><span class="string">&quot;YES&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username)) &#123;</span><br><span class="line">            info=<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//该方法返回的是一个向响应体打印字符串的打印流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.println(info);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;userServlet&quot;</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;校验&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    </span></span><br><span class="line"><span class="comment">1.配置servlet类，并起别名</span></span><br><span class="line"><span class="comment">   servlet-class告诉tomcat对应要实例化的类</span></span><br><span class="line"><span class="comment">   servlet-name 用于关联请求的映射路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>userServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sgg.servlet.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>userServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/userServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="效果">效果</h5>
<p><img src="https://bu.dusays.com/2025/01/15/67877e4b8dfbb.png" alt="image-20241228141726691.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e4b87e5e.png" alt="image-20241228141739406.png"></p>
<h5 id="重点讲解">重点讲解：</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>userServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/userServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>的/userServlet与</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;userServlet&quot;</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;校验&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>的action要保持一致</p>
<h4 id="url-pattern">url-pattern</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sgg.servlet.Servlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/s1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/xx1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里简要说明一下流程，毕竟后面使用注解会方便很多</p>
<p>浏览器访问/xx1然后他会去找<code>&lt;servlet-name&gt;servlet1&lt;/servlet-name&gt;</code>然后在找到对应的路径包<code>&lt;servlet-class&gt;com.sgg.servlet.Servlet1&lt;/servlet-class&gt; &lt;/servlet&gt;</code></p>
<p><code>/xx1</code>的路径唯一，其他的都不能使用</p>
<h5 id="路径的精确批准与模糊匹配">路径的精确批准与模糊匹配</h5>
<p>精确匹配 <code>/xx1</code></p>
<p>模糊匹配<code>/*</code></p>
<ul>
<li><code>/</code>匹配全部，但是不包含jsp文件</li>
<li><code>/*</code>匹配全部，包含jsp文件</li>
<li><code>/a/*</code>匹配前缀，/a/后面随便写都OK</li>
<li><img src="https://bu.dusays.com/2025/01/15/67877e4beb787.png" alt="image-20241228154559471.png"></li>
<li><code>*.action</code>前缀模糊，匹配后缀也即是要以<code>.action</code>结尾</li>
<li><img src="https://bu.dusays.com/2025/01/15/67877e4b72ebd.png" alt="image-20241228154747215.png"></li>
</ul>
<h4 id="注解">注解</h4>
<p>嘿嘿嘿嘿嘿嘿 最喜欢的一集</p>
<p>注解可以帮我们省掉xml的配置信息，方便大家</p>
<p>folding green, 查看代码xml测试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sgg.servlet.Servlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/s1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>endfolding</p>
<p>folding yellow, 使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/s1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;李阳你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>endfolding</p>
<p>只需要在方法面前加@WebServlet，好耶好用</p>
<h4 id="servletconfig和servletcontext">servletConfig和servletContext</h4>
<h5 id="servletconfig">servletConfig</h5>
<p>这东西好像是用来获取初始化信息的，感觉用的不多，知道就好了</p>
<p>xml-获取 <code>&lt;init-param&gt;</code>里面的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sgg.servlet.servlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置servlet的初始参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>keya<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>valueA<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>keyb<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>valueB<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/09:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">//获取初始配置信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据参数名获取参数值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">keya</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;keya&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;keya: &quot;</span> + keya);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有初始化参数名称</span></span><br><span class="line">        <span class="comment">//hasMoreElements判断有没有下一个参数，有就返回true</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> initParameterNames.nextElement();<span class="comment">//取出下一元素，并移动指针</span></span><br><span class="line">            System.out.println(s + <span class="string">&quot;: &quot;</span> + servletConfig.getInitParameter(s));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s21.ax1x.com/2025/01/15/pEFEubn.png" alt="image-20241229102420602"></p>
<hr>
<p>使用注解方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">        urlPatterns = &quot;/servlet1&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name = &quot;keya&quot;,value = &quot;valuea&quot;),@WebInitParam(name = &quot;keyb&quot;,value = &quot;keyB&quot;)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">        urlPatterns = &quot;/servlet1&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name = &quot;keya&quot;,value = &quot;valuea&quot;),@WebInitParam(name = &quot;keyb&quot;,value = &quot;keyB&quot;)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">//获取初始配置信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据参数名获取参数值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">keya</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;keya&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;keya: &quot;</span> + keya);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有初始化参数名称</span></span><br><span class="line">        <span class="comment">//hasMoreElements判断有没有下一个参数，有就返回true</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> initParameterNames.nextElement();<span class="comment">//取出下一元素，并移动指针</span></span><br><span class="line">            System.out.println(s + <span class="string">&quot;: &quot;</span> + servletConfig.getInitParameter(s));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="servletcontext">servletContext</h5>
<ul>
<li>ServletContext对象有称呼为上下文对象,或者叫应用域对象(后面统一讲解域对象)。容器会为每个app创建一个独立的唯一的ServletContext对象</li>
<li>ServletContext对象为所有的Servlet所共享</li>
<li>ServletContext可以为所有的servlet提供初始配置参数</li>
</ul>
<p>简而言之：为所有的servlet提供所有参数（ServletConfig是为某一个）</p>
<h5 id="功能1获取初始化值">功能1：获取初始化值</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/09:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//获取ServletContext</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext1</span> <span class="operator">=</span> req.getServletContext();</span><br><span class="line">        System.out.println( servletContext1);</span><br><span class="line">        System.out.println( servletContext);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;encoding: &quot;</span>+encoding);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletContext.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">initParameterName</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">            System.out.println(initParameterName+<span class="string">&quot;=&quot;</span>+servletContext.getInitParameter(initParameterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>liyang<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e54ec074.png" alt="image-20241229105856750.png"></p>
<p>好无聊好无聊的课</p>
<h5 id="功能2获取tomcat路径和文件路径">功能2：获取tomcat路径和文件路径</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/11:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:往upload里面写入文件信息-io流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个指向项目部署位置下的某个文件/目录的磁盘路径真实路径</span></span><br><span class="line">        String path=servletContext.getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path+<span class="string">&quot;/a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得项目部署的上下文路径，项目的访问路径</span></span><br><span class="line">        <span class="comment">//后序可能会用到绝对路径和相对路径来找资源</span></span><br><span class="line">        <span class="comment">//例如我们的项目启动路径可能是/demo1/servlet1</span></span><br><span class="line">        <span class="comment">//假设我们使用绝对路径，当我们的demo1改变时，就失效了</span></span><br><span class="line">        <span class="comment">//context可以帮我们动态的demo1</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext.getContextPath();</span><br><span class="line">        System.out.println(contextPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/01/15/67877e5590926.png" alt="image-20241229112333847.png"></p>
<p>啊啊啊啊啊啊，太无聊了</p>
<h5 id="功能3域对象的api">功能3：域对象的API</h5>
<ul>
<li>域对象:一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的戢,共享数据的范围也不同</li>
<li>ServletContext代表应用,所以ServletContext域也叫作应用域,是webapp中最大的域,可以在本应用内实现数据的共享和传递</li>
<li>webapp中的三大域对象,分别是应用域,会话域,请求域</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67877e54f04e2.png" alt="image-20241229112551836.png"></p>
<h6 id="放元素">放元素</h6>
<p>servlet1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/09:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">        urlPatterns = &quot;/servlet1&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name = &quot;keya&quot;,value = &quot;valuea&quot;),@WebInitParam(name = &quot;keyb&quot;,value = &quot;keyB&quot;)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * void setAttribute(String key,Object value);</span></span><br><span class="line"><span class="comment">         * 向域中存储/修改数据</span></span><br><span class="line"><span class="comment">         * object getAttribute(String key);</span></span><br><span class="line"><span class="comment">         * 获得域中的数据</span></span><br><span class="line"><span class="comment">         * void removeAttribute(String key);</span></span><br><span class="line"><span class="comment">         * 移除域中的数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有人用过就是新增，有就是修改</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;keya&quot;</span>, <span class="string">&quot;va&quot;</span>);</span><br><span class="line">       <span class="comment">// servletContext.setAttribute(&quot;keyb&quot;, &quot;keyB&quot;);</span></span><br><span class="line">        <span class="comment">//获得域中的数据</span></span><br><span class="line">     <span class="comment">//   Object keya1 = servletContext.getAttribute(&quot;keya&quot;);</span></span><br><span class="line">        <span class="comment">//移除</span></span><br><span class="line">     <span class="comment">//   servletContext.removeAttribute(&quot;keya&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>sevalet3读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.sgg.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * @Author: 李阳</span><br><span class="line"> * @Date: 2024/12/29/11:01</span><br><span class="line"> * @Description:往upload里面写入文件信息-io流</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;/servlet3&quot;)</span><br><span class="line">public class servlet3 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line"></span><br><span class="line">        //从域中读取数据</span><br><span class="line">        String ka = (String) servletContext.getAttribute(&quot;keya&quot;);</span><br><span class="line">        System.out.println(ka);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/01/15/67877e550116f.png" alt="image-20241229115159599.png"></p>
<p>控制台读取到了sevalet1里面存放的元素</p>
<p>妙秒喵🐱</p>
<h6 id="修改">修改</h6>
<p>servlet1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">servletContext.setAttribute(&quot;keya&quot;, &quot;va&quot;);</span><br><span class="line">servletContext.setAttribute(&quot;keya&quot;, &quot;keyB&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/01/15/67877e5504c9f.png" alt="image-20241229115601579.png"></p>
<p>烙铁，没毛病哦</p>
<hr>
<h4 id="httpservaletrequest">HttpServaletRequest</h4>
<ul>
<li>HttpServletRequest是一个接口,其父接口是ServletRequest</li>
<li>HttpServietRequest是Tomcat将请求报文转换封装而来的对象,在Tomcat调用service方法时传入</li>
<li>HttpServletRequest代表客户端发来的请求,所有请求中的信息都可以通过该对象获得</li>
</ul>
<p>获取请求行信息相关的</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e567911d.png" alt="image-20241229130836940.png"></p>
<p>获取请求头</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e54e978d.png" alt="image-20241229131102672.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/13:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:获取请求行和请求头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//行相关 GET/POST  url:http/1.1</span></span><br><span class="line">        System.out.println(req.getMethod());<span class="comment">//获取请求方式</span></span><br><span class="line">        System.out.println(req.getScheme());<span class="comment">//请求协议</span></span><br><span class="line">        System.out.println(req.getProtocol());<span class="comment">//请求协议以及版本</span></span><br><span class="line">        System.out.println(req.getRequestURL());<span class="comment">//完整的URl</span></span><br><span class="line">        System.out.println(req.getRequestURI());<span class="comment">//获取请求的URL，项目内的资源路径</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * GET</span></span><br><span class="line"><span class="comment">         * http</span></span><br><span class="line"><span class="comment">         * HTTP/1.1</span></span><br><span class="line"><span class="comment">         * http://localhost:8080/class2/servlet04</span></span><br><span class="line"><span class="comment">         * /class2/servlet04</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * URL:统一资源定位符 是http协议下一个具体的资源路径 （class URL interments URI）</span></span><br><span class="line"><span class="comment">         * URI:统一资源标识符 是资源定位的要求和规范（interface URI）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(req.getLocalPort());<span class="comment">//本应用容器的端口号</span></span><br><span class="line">        System.out.println(req.getServerPort());<span class="comment">//客户端发请求时使用的端口号</span></span><br><span class="line">        System.out.println(req.getRemotePort());<span class="comment">//客户端软件的端口号</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 8080</span></span><br><span class="line"><span class="comment">         * 8080</span></span><br><span class="line"><span class="comment">         * 55603</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//头相关 key:value ...</span></span><br><span class="line">        <span class="comment">//获取所有请求头的名字</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> req.getParameter(name);</span><br><span class="line">            System.out.println(name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据名字单独获取指定的某个请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Accept&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;accept:&quot;</span>+accept);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * GET</span></span><br><span class="line"><span class="comment">         * http</span></span><br><span class="line"><span class="comment">         * HTTP/1.1</span></span><br><span class="line"><span class="comment">         * http://localhost:8080/class2/servlet04</span></span><br><span class="line"><span class="comment">         * /class2/servlet04</span></span><br><span class="line"><span class="comment">         * 8080</span></span><br><span class="line"><span class="comment">         * 8080</span></span><br><span class="line"><span class="comment">         * 55857</span></span><br><span class="line"><span class="comment">         * host=null</span></span><br><span class="line"><span class="comment">         * connection=null</span></span><br><span class="line"><span class="comment">         * cache-control=null</span></span><br><span class="line"><span class="comment">         * sec-ch-ua=null</span></span><br><span class="line"><span class="comment">         * sec-ch-ua-mobile=null</span></span><br><span class="line"><span class="comment">         * sec-ch-ua-platform=null</span></span><br><span class="line"><span class="comment">         * upgrade-insecure-requests=null</span></span><br><span class="line"><span class="comment">         * user-agent=null</span></span><br><span class="line"><span class="comment">         * accept=null</span></span><br><span class="line"><span class="comment">         * sec-fetch-site=null</span></span><br><span class="line"><span class="comment">         * sec-fetch-mode=null</span></span><br><span class="line"><span class="comment">         * sec-fetch-user=null</span></span><br><span class="line"><span class="comment">         * sec-fetch-dest=null</span></span><br><span class="line"><span class="comment">         * accept-encoding=null</span></span><br><span class="line"><span class="comment">         * accept-language=null</span></span><br><span class="line"><span class="comment">         * cookie=null</span></span><br><span class="line"><span class="comment">         * accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*\/\*;</span></span><br><span class="line"><span class="comment">         * q = 0.8, application / signed - exchange;</span></span><br><span class="line"><span class="comment">         * v = b3;</span></span><br><span class="line"><span class="comment">         * q = 0.7</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获取请求参数</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e5ea9d2e.png" alt="image-20241229131119709.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e60bd1c8.png" alt="image-20241229140918113.png"></p>
<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/13:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet05</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//接收请求参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据参数名获取单个值（键值对）</span></span><br><span class="line">        System.out.println(req.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(req.getParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据参数名获取多个参数</span></span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(hobbies));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            String[] parameterValues = req.getParameterValues(parameterName);</span><br><span class="line">           <span class="comment">//大于1就拿全部，小于1就拿第一个</span></span><br><span class="line">            <span class="keyword">if</span>(parameterValues.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(parameterName+<span class="string">&quot;= &quot;</span>+Arrays.toString(parameterValues));</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(parameterName+<span class="string">&quot;= &quot;</span>+parameterValues[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//返回所有参数的map集合 key=参数名 value=参数值</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; stringEntry : parameterMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(stringEntry.getKey()+<span class="string">&quot;= &quot;</span>+Arrays.toString(stringEntry.getValue()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试httpServlet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;servlet05&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>唱<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>跳<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>rap<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>篮球<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>post或者get都可以拿到</p>
<p>其他api</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e5ea321b.png" alt="image-20241229131136745.png"></p>
<h4 id="httpservletresponse">HttpServletResponse</h4>
<ul>
<li>HttpServletResponse是一个接口,其父接口是ServletResponse</li>
<li>HttpServletResponse是Tomcat预先创建的,在Tomcat调用service方法时传入</li>
<li>HttpServletResponse代表对客户端的响应,该对象会被转换成响应的报文发送给客户端,通过该对象我们可以设置响应信息</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67877e604b1d2.png" alt="image-20241229150022820.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/15:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet06</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       String info=<span class="string">&quot;&lt;h1&gt;李阳&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        <span class="comment">//设置响应行相关API 200/404/405/500  HTTP/1.1</span></span><br><span class="line">        resp.setStatus(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;sss&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setContentLength(info.getBytes().length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应体</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.write(info);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="23请求与转发">2.3请求与转发</h3>
<ul>
<li><p>请求转发生活举例:张三找李四借钱,李四没有,李四找王五,让王五借给张三</p></li>
<li><p>响应重定向生活举例:张三找李四借钱,李四没有,李四让张。去找王五,张三自己再去找王五借钱</p></li>
<li><p>请求转发通过HttpServletRequest实现,响应重定向通过HttpServletResponse实现</p></li>
</ul>
<p>1请求转发时,请求和响应对象会继续传递给下一个资源</p>
<p>2请求中的参数可以继续向下传递</p>
<p>3请求转发时服务器内部的行为,客户端是不知道的</p>
<p>4客户端只产生了一次请求</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e5eb26d4.png" alt="image-20241229153756014.png"></p>
<p>selectA处理不了给了B，B再响应给客户端</p>
<p>这个就是定义转发的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">&quot;servletB&quot;</span>).forward(req, resp);</span><br></pre></td></tr></table></figure>

<p>servletA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/15:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求转发B</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;servletB&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>servletB</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/15:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servletB</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/01/15/67877e5ef06c7.png" alt="image-20241229155049373.png"></p>
<p>转发到页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletA&quot;</span>+money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求转发B</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;WEB-INF/b.html&quot;</span>).forward(req, resp);</span><br><span class="line">        <span class="comment">//req.getRequestDispatcher(&quot;a.html&quot;).forward(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="总结-面试要背">总结-面试要背</h5>
<ul>
<li>请求转发通过HttpServletRequest对象获取请求转发器实现</li>
<li>请求转发是服务器内部的行为,对客户端是屏蔽的</li>
<li>客户端只发送了一次请求,客户端地址栏不变</li>
<li>服务端只产生了一对请求和响应对象,这一对请求和响应对象会继续传递给下一个资源</li>
<li>因为全程只有一个HttpServletRequset对象,所以请求参数可以传递,请求域中的数据也可以传递</li>
<li>请求转发可以转发给其他Servlet动态资源,也可以转发给一些静态资源以实现页面跳转</li>
<li>请求转发可以转发给WEB-INF下受保护的资源</li>
<li>请求转发不能转发到本项目以外的外部资源</li>
</ul>
<h3 id="24-重定向">2.4 重定向</h3>
<p>客户端发送请求给A，A处理不了，然后A就返回response，把目标头302和location：目标地址
返回给浏览器，浏览器再通过目标地址去请求其他功能页面</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e5f915a5.png" alt="image-20241229171354913.png"></p>
<h4 id="特点">特点</h4>
<ul>
<li>响应重定向通过HttpServletResponse对象的sendRedirect方法实现</li>
<li>响应重定向是服务端通过302响应码和路径,告诉客户端自己去找其他资源,是在服务端提示下的,<strong>客户端的行为</strong></li>
<li>客户端至少发送了两次请求,客户端地址栏是要变化的</li>
<li>服务端产生了多对请求和响应对象,且请求和响应对象不会传递给下一个资源</li>
<li>因为全程产生了多个HttpServletRequset对象,所以请求参数不可以传递,请求域中的数据也不可以传递</li>
<li>重定向可以是其他Servlet动态资源,也可以是一些静态资源以实现页面跳转</li>
<li>重定向不可以到给WEB-INF下受保护的资源</li>
<li>重定向可以到本项目以外的外部资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/29/17:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//接收用户请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;servlet2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="25-解决响应乱码">2.5 解决响应乱码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;你好，hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="26-mvc">2.6 MVC</h3>
<p>MVC (Model view
Controller）是软件工程中的一种软件架构模式，它把软件系统分为模型、视图和控制器三个基本部分。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e5ea1060.png" alt="image-20241230100316483.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e67d2b9f.png" alt="image-20241230101219329.png"></p>
<h3 id="27-会话管理">2.7 会话管理</h3>
<ul>
<li>·无状态就是不保存状态,即无畎态协议(stateless),HTTP协议自身不对请求和响应之间的通信状态进行保存,也就是说,在HTTP协议这个级别协议对于发送过的请求或者响应都不做持久化处理</li>
<li>简单理解:浏览器发送请求.服务器接收并响应,但是服务器不记录请求是否来自哪个浏览器,服务器没记录浏览器的特征,就是客户端的状态</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67877e65cd6b9.png" alt="image-20241231120551892.png"></p>
<h4 id="271-cookie">2.7.1 cookie</h4>
<p>cookie是一种客户端会话技术,cookie由服务端产生,它是服务器存放在浏览器的一小份数据,浏览器以后每次访问该服务器的时候都会将这小份数据携带到服务器去。</p>
<ul>
<li>服务端创建cookie,将cookie放入响应对象中,Tomcat容器将cookie转化为set-cookie响应头,响应给客户端。</li>
<li>客户端在收到cookie的响应头时,在下次请求该服务的资源时,会以cookie请求头的形式携带之前收到的Cookie</li>
<li>cookie是一种键值对格式的数据,从tomcat8.5开始可以保存中文,但是不推荐</li>
<li>由于cookie是存储于客户端的数据,比较容易暴露,一般不存储一些敏感或者影响安全的数据</li>
</ul>
<h5 id="生存周期">生存周期</h5>
<ul>
<li><p>会话级Cookie</p>
<ul>
<li><p>服务器端并没有明确指定Cookie的存在时间。</p></li>
<li><p>在浏览器端，Cookie数据存在于内存中。</p></li>
<li><p>只要浏览器还开着，Cookie数据就一直都在。</p></li>
<li><p>浏览器关闭，内存中的cookie数据就会被释放·</p></li>
</ul></li>
<li><p>持久化Cookie</p>
<ul>
<li><p>服务器端明确设置了Cookie的存在时间。</p></li>
<li><p>在浏览器端，Cookie数据会被保存到硬盘上</p></li>
<li><p>Cookie在硬盘上存在的时间根据服务器端限定的时间来管控，不受浏览器关闭的影响。</p></li>
<li><p>持久化Cookie到达了预设的时间会被释放</p></li>
</ul></li>
</ul>
<h5 id="会话级代码演示">会话级代码演示</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 创建cookie，将cookie放入response对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;kaya&quot;</span>,<span class="string">&quot;vala&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;kayb&quot;</span>,<span class="string">&quot;valb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>捕获</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/31/13:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:获取请求中携带的cookie</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//请求的多个cookie会进入该数组，没有cookie会为null报空指针异常</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            System.out.println(cookie.getName() + <span class="string">&quot; &quot;</span> + cookie.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="持久化">持久化</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;kaya&quot;</span>,<span class="string">&quot;vala&quot;</span>);</span><br><span class="line">       <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;kayb&quot;</span>,<span class="string">&quot;valb&quot;</span>);</span><br><span class="line">       cookie1.setMaxAge(<span class="number">3600</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/01/15/67877e65b344e.png" alt="image-20241231140608015.png"></p>
<h4 id="272-session">2.7.2 Session</h4>
<p>session要和cookie配合使用</p>
<p>HttpSession是一种保留更多信息在服务端的一种技术,服务器会为每一个客户端开辟一块内存空间,即session对象.客户端在发送请求时,都可以使用自已的session.这样服务端就可以通过session来记录某个客户端的状态了</p>
<ul>
<li>服务端在为客户端创建session时,会同时将session对象的id,即JSESSIONID以cookie的形式放入响应对象。</li>
<li>后端创建完session后,客户端会收到一个特殊的cookie,叫做JSESSIONID</li>
<li>客户端下一次请求时携带JSESSIONID,后端收到后,根据JSESSIONID找到对应的session对象。</li>
<li>通过该机制,服务端通过session就可以存储一些专门针对某个客户端的信息了</li>
<li>session也是域对象(后续详细讲解)</li>
<li><img src="https://bu.dusays.com/2025/01/15/67877e6fa4c29.png" alt="image-20241231141259769.png"></li>
</ul>
<h4 id="273-三大域对象">2.7.3 三大域对象</h4>
<p>域对象:一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的域,共享数据的范围也不同</p>
<ul>
<li>web项目中,我们一定要熟练使用的域对象分别是请求域,会话域,应用域</li>
<li>请求域对象是HttpServletRequest
,传递数据的范围是一次请求之内及请求转发。</li>
<li>会话域对象是HttpSession,传递数据的范围是一次会话之内,可以跨多个请求。</li>
<li>应用域对象是ServletContext,传递数据的范围是本应用之内,可以跨多个会话</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67877e6e775b4.png" alt="image-20241231143352815.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e6e70ea6.png" alt="image-20241231143732561.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e6e650c6.png" alt="image-20241231143759794.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e6e78891.png" alt="image-20241231143829763.png"></p>
<h5 id="域对象的使用">域对象的使用</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>void setAttribute(String name,String value)</td>
<td>向域对象中添加/修改数据</td>
</tr>
<tr>
<td>Object getAttribute(String name)</td>
<td>从域对象中获取数据</td>
</tr>
<tr>
<td>removeAttribute(String name)</td>
<td>移除域对象中数据</td>
</tr>
</tbody>
</table>
<h3 id="28-过滤器-filter">2.8 过滤器-Filter</h3>
<h4 id="1概述">1.概述</h4>
<ul>
<li>Filter接口定义了过滤器的开发规范,所有的过滤器都要实现该接口</li>
<li>·Filter的工作位置是项目中所有目标资源之前,容器在创建HttpServletRequest和HttpServletResponse对象后,会先调用Filter的doFiter方法</li>
<li>Filter的doFilter方法可以控制请求是否继续,如果放行,则请求继续,如果拒绝,则请求到此为止,由过滤器本身做出响应</li>
<li>Filter不仅可以对请求做出过滤,也可以在目标资源做出响应前,对响应再次进行处理</li>
<li>Filter是GOF中责任链模式的典型案例</li>
<li>。Filter的常用应用包括但不限于:登录权限检查,解决网站乱码,过滤敏感字符,日志记录,性能分析…..</li>
</ul>
<h4 id="2举例">2.举例</h4>
<ul>
<li>公司前台对来访人员进行审核,如果是游客则拒绝进入公司,如果是客户则放行.客户离开时提醒客户不要遗忘物品</li>
<li>停车场保安对来访车辆进行控制,如果没有车位拒绝进入,如果有车位,发放停车卡并放行,车辆离开时收取请车费</li>
<li>地铁验票闸机在人员进入之前检查票,没票拒绝进入,有票验票后放行,人员离开时同样验票</li>
</ul>
<h4 id="3应用">3.应用</h4>
<ul>
<li>日志的记录</li>
<li>·性能的分析。</li>
<li>乱码的处理·</li>
<li>事务的控制·</li>
<li>登录的控制·</li>
<li>跨域的处理</li>
<li>… …</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67877e6f62910.png" alt="image-20241231145350797.png"> <img src="https://bu.dusays.com/2025/01/15/67877e6e78891.png" alt="image-20241231143829763.png"> <img src="https://bu.dusays.com/2025/01/15/67877e6e775b4.png" alt="image-20241231143352815.png"> <img src="https://bu.dusays.com/2025/01/15/67877e6e70ea6.png" alt="image-20241231143732561.png"> <img src="https://bu.dusays.com/2025/01/15/67877e6e650c6.png" alt="image-20241231143759794.png"></p>
<h4 id="4格式">4.格式</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>logginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sgg.filters.LoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置过滤器的过滤资源规则 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>logginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      url-pattern 根据请求的资源路径对指定的请求进行过滤</span></span><br><span class="line"><span class="comment">      /*  过滤全部资源</span></span><br><span class="line"><span class="comment">      /a/*  过滤以a开头的资源</span></span><br><span class="line"><span class="comment">      *.html  过滤以htmL为后缀的资源</span></span><br><span class="line"><span class="comment">     /servlet1  servlet1请求进行过油</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     对某一个请求过滤</span></span><br><span class="line"><span class="comment">     @WebServlet(value = &quot;/servlet1&quot;,name = &quot;servlet11&quot;)</span></span><br><span class="line"><span class="comment">     &lt;servlet-name&gt;servlet11&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     一个filter-mapping中可以存在多个servlet-name和url-pattern</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="285-生命周期">2.8.5 生命周期</h4>
<blockquote>
<p>过滤器作为web项目的组件之一和Servlet的生命周期类似,略有不同,没有servlet的load-on-startup的配置,默认就是系统启动立刻构造</p>
</blockquote>
<table>
<thead>
<tr>
<th>阶段</th>
<th>对应方法</th>
<th>执行时机</th>
<th>执行次数</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建对象</td>
<td>构造器</td>
<td>web应用启动时</td>
<td>1</td>
</tr>
<tr>
<td>初始化方法</td>
<td>void init(FilterConfig filterConfig)</td>
<td>构造完毕</td>
<td>1</td>
</tr>
<tr>
<td>过滤请求</td>
<td>void doFilter(ServietRequest servletRequest, ServietResponse
servletResponse,FilterChainfilterChain)</td>
<td>每次请求</td>
<td>多次</td>
</tr>
<tr>
<td>销毁</td>
<td>default void destroy()</td>
<td>web应用关闭时</td>
<td>1次</td>
</tr>
</tbody>
</table>
<p>代码我很懒给略了</p>
<h4 id="286-过滤器链的使用">2.8.6 过滤器链的使用</h4>
<blockquote>
<p>一个web项目中,可以同时定义多个过滤器,多个过滤器对同一个资源进行过滤时,工作位置有先后,整体形成一个工作链,称之为过滤器链</p>
</blockquote>
<ul>
<li>过滤器链中的过滤器的顺序由<code>filter-mapping</code>顺序决定</li>
<li>每个过滤器过滤的范围不同,针对同一个资源来说,过滤器链中的过滤器个数可能是不同的</li>
<li>如果某个Filter是使用ServletName进行匹配规则的配置，那么这个Filter执行的优先级要更低</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/17/678a405838c7d.png" alt="image-20250117193438865"></p>
<p>工作流程</p>
<p><img src="https://bu.dusays.com/2025/01/19/678c5fa93008b.png" alt="image-20250119101248427"></p>
<p>过滤器链中的过滤器的顺序由<code>filter-mapping</code>顺序决定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   配置多个过滤器--&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sgg.filters.Filter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sgg.filters.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sgg.filters.Filter3<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2861-使用注解方式">2.8.6.1 使用注解方式</h5>
<p><code>@WebFilter("/*")</code></p>
<p>使用注解方式代码举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 方行前代码&quot;</span>);</span><br><span class="line">        <span class="comment">//放行代码</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter1放行后代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用注解后，控制执行顺序需要改变忘记命名顺序，字典的前后区别</p>
<h3 id="29-监听器">2.9 监听器</h3>
<blockquote>
<p>监听器:专门用于对域对象对象身上发生的事件或状态改变进行监听和相应处理的对象</p>
</blockquote>
<ul>
<li>监听器是GOF设计模式中,观察者模式的典型案例</li>
<li>观察者模式:当被观察的对象发生某些改变时,观察者自动采取对应的行动的一种设计模式</li>
<li>监听器使用的感受类似Js中的事件,被观察的对象发生某些情况时,自动触发代码的执行。</li>
<li>监听器并不监听web项目中的所有组件,仅仅是对三大域对象做相关的事件监听</li>
</ul>
<blockquote>
<p>监听器的分类</p>
</blockquote>
<ul>
<li>web中定义八个监听器接口作为监听器的规范,这八个接口按照不同的标准可以形成不同的分类</li>
<li>按监听的对象划分
<ul>
<li>application域监听器 <code>ServletContextListener</code>
ServletContextAttributeListener</li>
<li>session域监听器 HttpSessionListener HttpSessionAttributeListener
HttpSessionBindingListener HttpSessionActivationListener</li>
<li>request域监听器 ServletRequestListener
ServletRequestAttributeListener</li>
</ul></li>
<li>按监听的事件分
<ul>
<li>域对象的创建和销毁监听器 ServletContextListener HttpSessionListener
ServletRequestListener</li>
<li>域对象数据增删改事件监听器 ServletContextAttributeListener
HttpSessionAttributeListener ServletRequestAttributeListener</li>
<li>其他监听器 HttpSessionBindingListener
HttpSessionActivationListener</li>
</ul></li>
</ul>
<h4 id="292-监听器的六个主要接口">2.9.2 监听器的六个主要接口</h4>
<h5 id="2921-application域监听器">2.9.2.1 application域监听器</h5>
<blockquote>
<p>ServletContextListener 监听ServletContext对象的创建与销毁</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>contextInitialized(ServletContextEvent sce)</td>
<td>ServletContext创建时调用</td>
</tr>
<tr>
<td>contextDestroyed(ServletContextEvent sce)</td>
<td>ServletContext销毁时调用</td>
</tr>
</tbody>
</table>
<ul>
<li>ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。</li>
</ul>
<blockquote>
<p>ServletContextAttributeListener
监听ServletContext中属性的添加、移除和修改</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>attributeAdded(ServletContextAttributeEvent scab)</td>
<td>向ServletContext中添加属性时调用</td>
</tr>
<tr>
<td>attributeRemoved(ServletContextAttributeEvent scab)</td>
<td>从ServletContext中移除属性时调用</td>
</tr>
<tr>
<td>attributeReplaced(ServletContextAttributeEvent scab)</td>
<td>当ServletContext中的属性被修改时调用</td>
</tr>
</tbody>
</table>
<ul>
<li>ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下:</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>getName()</td>
<td>获取修改或添加的属性名</td>
</tr>
<tr>
<td>getValue()</td>
<td>获取被修改的属性值</td>
</tr>
<tr>
<td>getServletContext()</td>
<td>获取ServletContext对象</td>
</tr>
</tbody>
</table>
<h4 id="servletcontextlistener-应用域代码">ServletContextListener
应用域代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.listen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/01/19/11:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationLister</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域被初始化了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域被销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">2025</span>-<span class="number">01</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">17</span>:<span class="number">29</span>,<span class="number">228</span>] 工件 demo9-listen:Web exploded: 正在部署工件，请稍候…</span><br><span class="line"><span class="number">1135537166</span>应用域被初始化了</span><br><span class="line"><span class="number">1135537166</span>应用域被销毁</span><br><span class="line">已与服务器断开连接</span><br></pre></td></tr></table></figure>

<h4 id="servletcontextattributelistener监听数据变化代码">ServletContextAttributeListener监听数据变化代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.listen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/01/19/11:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationLister</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span>, ServletContextAttributeListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域被初始化了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域被销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域增加了&quot;</span>+key+<span class="string">&quot;: &quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域移除了&quot;</span>+key+<span class="string">&quot;: &quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();<span class="comment">//获取的是旧的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取新的值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> servletContext.getAttribute(key);</span><br><span class="line">        System.out.println(servletContext.hashCode()+<span class="string">&quot;应用域修改了&quot;</span>+key+<span class="string">&quot;: &quot;</span>+value+<span class="string">&quot;为&quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">已连接到服务器</span><br><span class="line">[<span class="number">2025</span>-<span class="number">01</span>-<span class="number">19</span> <span class="number">02</span>:<span class="number">25</span>:<span class="number">48</span>,<span class="number">245</span>] 工件 demo9-listen:Web exploded: 正在部署工件，请稍候…</span><br><span class="line"><span class="number">762047125</span>应用域被初始化了</span><br><span class="line"><span class="number">762047125</span>应用域增加了keya: valuea</span><br><span class="line"><span class="number">762047125</span>应用域修改了keya: valuea为valuexx</span><br><span class="line"><span class="number">762047125</span>应用域移除了keya: valuexx</span><br><span class="line"><span class="number">762047125</span>应用域被销毁</span><br><span class="line"><span class="number">19</span>-Jan-<span class="number">2025</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">57.614</span> 信息 [main] org.apache.coyote.AbstractProtocol.stop 正在停止ProtocolHandler [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br><span class="line"><span class="number">19</span>-Jan-<span class="number">2025</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">57.630</span> 信息 [main] org.apache.coyote.AbstractProtocol.destroy 正在销毁协议处理器 [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br><span class="line">已与服务器断开连接</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="日程管理">日程管理</h2>
<p>link
日程表项目后端系统,https://github.com/lyay23/atguigu-scheduleSystem</p>
<p>前端工程化 <a href="https://github.com/lyay23/atguigu-vue-scheduleSystem">lyay23/atguigu-vue-scheduleSystem
(github.com)</a></p>
<h3 id="错误">错误</h3>
<h4 id="1实体类名称不匹配">1.实体类名称不匹配</h4>
<p>我在经行测试的时候遇到了一些错误</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e664b2e9.png" alt="image-20241230144156493.png"></p>
<p>控制台说这个名字不匹配</p>
<p>检查发现是因为我的实体类名称不叫uid，而查询报错</p>
<p>解决方案1：为sql语句的uid取别名与pojo的一样</p>
<p>方案2：修改pojo与数据库的uid一致</p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e674871e.png" alt="image-20241230144349702.png"></p>
<p><img src="https://bu.dusays.com/2025/01/15/67877e66c3d7b.png" alt="image-20241230144423606.png"></p>
<p>两种方法都可行</p>
<hr>
<h4 id="2中文乱码问题">2.中文乱码问题</h4>
<p><img src="https://bu.dusays.com/2025/01/19/678cee62402c5.png" alt="image-20250119202153241"></p>
<p>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>设置中文</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>日记本</title>
    <url>/posts/28799/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="别试了" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9e2c0ff412be49e476490c9e06fa2a91fb07e66837dafa29229493c67231a576"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">有时候，我们都需要距离</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/posts/1080/</url>
    <content><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><blockquote>
<p>逆水行舟 不进则退</p>
</blockquote>
<h2 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h2><blockquote>
<p>408 要求</p>
<p>（一）操作系统的基本概念</p>
<p>（二）操作系统的发展历程</p>
<p>（三）程序运行环境</p>
<p>​         1．CPU 运行模式（内核模式、用户模式）</p>
<p>​         2． 中断和异常的处理</p>
<p>​         3 系统调用</p>
<p>​        4 程序的链接与装入</p>
<p>​        5 程 序运行时内存映像与地址空间</p>
<p>（四）操作系统结构（分层，模块化，宏内核，微内核，外核）</p>
<p>（五）操作系统引导</p>
<p>（六）虚拟机</p>
</blockquote>
<h3 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>操作系统</strong>(Operating System，OS）是指控制和 <strong>管理</strong> 整个计算机系统的 <strong>硬件和软件资源</strong>，并合理地组织调度计算机的工作和资源的分配; <strong>以提供给用户和其他软件方便的接口和环境</strong>; 它是计算机系统中最基本的 <strong>系统软件</strong>。</p>
<ol>
<li>操作系统是系统的管理者</li>
<li>向上层提供方便易用的服务</li>
<li>是最接近硬件的一层软件</li>
</ol>
<h4 id="操作系统提供的功能"><a href="#操作系统提供的功能" class="headerlink" title="操作系统提供的功能"></a>操作系统提供的功能</h4><ul>
<li>处理机管理</li>
<li>存储器管理</li>
<li>文件管理</li>
<li>设备管理</li>
</ul>
<h4 id="操作系统向上层提供方便易用的服务"><a href="#操作系统向上层提供方便易用的服务" class="headerlink" title="操作系统向上层提供方便易用的服务"></a>操作系统向上层提供方便易用的服务</h4><h5 id="直接给用户的"><a href="#直接给用户的" class="headerlink" title="直接给用户的"></a>直接给用户的</h5><p><strong>1.命令接口</strong>：</p>
<ul>
<li>联机命令接口：交互式命令接口</li>
<li>脱机命令接口：批处理命令接口</li>
</ul>
<h5 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h5><h5 id="直接给软件-程序员使用的"><a href="#直接给软件-程序员使用的" class="headerlink" title="直接给软件/程序员使用的"></a>直接给软件/程序员使用的</h5><p><strong>程序接口</strong>: 程序接口由一组系统调用组成，用户通过在程序中使用这些系统调用来请求操作系统为其提供服务，如使用外部设备、申请分配和回收内存及其其他各种要求</p>
<hr>
<p>操作系统对硬件机器的拓展: 将 CPU、内存、磁盘、显示器、键盘等硬件合理地组织起来，能够相互协调配合，实现更多更复杂的功能</p>
<h4 id="操作系统的四个特征"><a href="#操作系统的四个特征" class="headerlink" title="操作系统的四个特征"></a>操作系统的四个特征</h4><blockquote>
<p>并发 共享 虚拟 异步</p>
</blockquote>
<h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><p><strong>并发</strong>: 指两个或多个事件在同一时间间隔内发生。这些事件 <strong>宏观上是同时发生的</strong>，但 <strong>微观上是交替发生的</strong>。常考易混概念――<strong>并行</strong>: 指两个或多个事件在同一时刻同时发生。</p>
<p><strong>操作系统的并发性</strong> 指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。<br>操作系统就是伴随着“多道程序技术”而出现的。因此，<strong>操作系统和程序并发是一起诞生的。</strong></p>
<p><img src="https://bu.dusays.com/2025/02/20/67b6bd1fca85e.png" alt="image-20250220132643929"></p>
<h5 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h5><p><strong>共享</strong> 即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>
<h6 id="互斥共享方式"><a href="#互斥共享方式" class="headerlink" title="互斥共享方式"></a>互斥共享方式</h6><p>系统中的某些资源，虽然可以提供给多个进程使用, 但一个时间段内只允许一个进程访问该资源</p>
<h6 id="同时共享方式"><a href="#同时共享方式" class="headerlink" title="同时共享方式"></a>同时共享方式</h6><p>系统中的某些资源，允许一个时间段内由多个进程“同时”对它们进行访问</p>
<blockquote>
<p>如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义<br>如果失去共享性，则 QQ 和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发</p>
</blockquote>
<h5 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h5><p><strong>虚拟</strong> 是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者)是用户感受到的。</p>
<h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p>
<h3 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h3><div class="table-container">
<table>
<thead>
<tr>
<th>操作系统类型</th>
<th>定义</th>
<th>特点</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>批处理操作系统</td>
<td>用户提交一批作业后不再干预，由操作系统自动控制运行</td>
<td><strong>自动性</strong>:系统按照一定的顺序自动依次处理作业，无需人工干预每个作业的执行过程      <strong>高效性</strong>:通过批量处理作业，减少了作业之间的切换时间和人工操作时间，提高了系统资源的利用率和作业处理效率。、<strong>无交互性</strong>:用户在提交作业后直到作业完成，无法与作业进行交互，不能实时控制作业的执行。</td>
<td>大规模数据处理任务，如银行批量账务处理、企业批量报</td>
</tr>
<tr>
<td>实时操作系统</td>
<td>能在规定时间内对外部事件快速响应，并在严格时间约束下完成处理</td>
<td><strong>及时性</strong>:对外部事件能够在规定的时间内做出快速响应，确保系统的实时性要求。   <strong>可靠性</strong> :具有高度的稳定性和可靠性，保证在任何情况下都能准确无误地完成任务，通常采用冗余设计等  <strong>专用性</strong>:一般为特定的实时应用系统而设计，如工业自动化控制、航空航天、军事指挥等领域。</td>
<td>工业控制、航空航天、智能交通等对实时性和可靠性要求高的领域，如飞机飞行控制、工业流水线控制</td>
</tr>
<tr>
<td>网络操作系统</td>
<td>管理网络通信和共享资源，为用户提供网络服务</td>
<td><strong>网络通信功能</strong>:提供强大的网络通信能力，支持多种网络协议，能够实现计算机之间的通信和数据传输。 <strong>资源共享管理</strong>:可以对网络中的硬件资源（如打印机、存储设备等）和软件资源（如文件、数据库等）进行有效的管理和共享，方便用户使用、<strong>用户管理</strong>:具备用户认证、授权等管理功能，确保网络资源的安全访问和使用，用户知道资源位置并可共享</td>
<td>构建企业局域网、校园网等，常见系统有 Windows Server 系列、UNIX、Linux</td>
</tr>
<tr>
<td>分时操作系统</td>
<td>把 CPU 时间划分为时间片，轮流分配给各终端用户使用计算机</td>
<td><strong>交互性</strong>:用户可以通过终端与计算机进行实时交互，及时得到系统的响应，方便用户进行程序开发、文本编辑等工作  <strong>多路性</strong>:允许多个用户同时使用计算机系统，每个用户都感觉自己独占计算机资源。<strong>独立性</strong>:每个用户在自己的终端上进行操作，相互之间互不干扰，各自独立地运行自己的程序。</td>
<td>需要用户频繁交互的场合，如软件开发环境、办公自动化系统</td>
</tr>
<tr>
<td>分布式操作系统</td>
<td>通过网络连接大量计算机，实现资源共享、协同工作和分布式计算</td>
<td><strong>分布性</strong>：系统中的资源分布在不同的计算机上，通过网络进行连接和通信，整个系统看起来像一个统一的整体。 <strong>并行性</strong>：可以将一个大型任务分解成多个子任务，分布到不同的计算机上并行执行，提高任务的处理速度 <strong>透明性：</strong>用户使用系统资源时，不需要知道资源的具体位置和分布情况，就像使用本地资源一样方便</td>
<td>大规模科学计算、数据中心、云计算等领域，如谷歌 GFS、Hadoop 平台</td>
</tr>
</tbody>
</table>
</div>
<h4 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h4><p>缺点：用户独占全机、人机速度矛盾导致资源利用率极低</p>
<h4 id="批处理阶段"><a href="#批处理阶段" class="headerlink" title="批处理阶段"></a>批处理阶段</h4><h5 id="单道批处理"><a href="#单道批处理" class="headerlink" title="单道批处理"></a>单道批处理</h5><p>主要优点: 缓解了一定程度的人机速度矛盾, 资源利用率有所提升。</p>
<p>主要缺点: 内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU 有大量的时间是在空闲等待/o 完成。资源利用率依然很低。</p>
<h5 id="多道批处理"><a href="#多道批处理" class="headerlink" title="多道批处理"></a>多道批处理</h5><p>主要优点: 多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU 和其他资源更能保持“忙碌”状态，系统吞吐量增大。</p>
<p>主要缺点: 用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行。eg: 无法调试程序/无法在程序运行过程中输入一些参数)</p>
<h4 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h4><p>分时操作系统: 计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。</p>
<p>主要优点: 用户请求可以被即时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。</p>
<p>主要缺点: 不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。</p>
<h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><p>主要优点: 能够优先响应一些紧急任务，某些紧急任务不需时间片排队。<br>在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性</p>
<h5 id="硬实时系统"><a href="#硬实时系统" class="headerlink" title="硬实时系统"></a>硬实时系统</h5><p>必须在绝对严格的规定时间内完成处理</p>
<h5 id="软实时系统"><a href="#软实时系统" class="headerlink" title="软实时系统"></a>软实时系统</h5><p>能接收偶尔违法时间规定</p>
<h3 id="操作系统的运行环境"><a href="#操作系统的运行环境" class="headerlink" title="操作系统的运行环境"></a>操作系统的运行环境</h3><blockquote>
<p>（三）程序运行环境</p>
<p>​         1．CPU 运行模式（内核模式、用户模式）</p>
<p>​         2． 中断和异常的处理</p>
<p>​         3 系统调用</p>
<p>​        4 程序的链接与装入</p>
<p>​        5 程 序运行时内存映像与地址空间</p>
</blockquote>
<h4 id="CPU-的运行模式"><a href="#CPU-的运行模式" class="headerlink" title="CPU 的运行模式"></a>CPU 的运行模式</h4><p><img src="https://bu.dusays.com/2025/02/20/67b6edd5d4ed6.png" alt="image-20250220165441606"></p>
<p>处于内核态时，说明此时正在运行的是内核程序，此时可以执行特权指令</p>
<p>处于用户态时，说明此时正在运行的是应用程序，此时只能执行非特权指令</p>
<p><img src="https://bu.dusays.com/2025/02/20/67b6ed668c071.png" alt="image-20250220165250143"></p>
<h4 id="中断和异常处理"><a href="#中断和异常处理" class="headerlink" title="中断和异常处理"></a>中断和异常处理</h4><p><img src="https://bu.dusays.com/2025/02/20/67b6f813c6328.png" alt="image-20250220173823433"></p>
<h5 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h5><p>中断是让操作系统内核重新夺回 CPU 使用权的途径</p>
<h6 id="陷入指令（访管指令）"><a href="#陷入指令（访管指令）" class="headerlink" title="陷入指令（访管指令）"></a>陷入指令（访管指令）</h6><p>在用户状态下，主动把 CPU 的控制权还给内核</p>
<h5 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h5><p><strong>中断</strong>（Interruption）也称外中断，是指来自 CPU 执行指令外部的事件，通常用于信息输入/输出（见第 5 章），如设备发出的 I/O 结束中断，表示设备输入/输出处理已经完成。时钟中断，表示一个固定的时间片已到，让处理机处理计时、启动定时运行的任务等。</p>
<p><strong>异常</strong>（Exception）也称内中断，是指来自 CPU 执行指令内部的事件，如程序的非法操作码、地址越界、运算溢出、虚存系统的缺页及专门的陷入指令等引起的事件。异常不能被屏蔽，一旦出现，就应立即处理</p>
<p><img src="https://bu.dusays.com/2025/02/20/67b6f4a72e13a.png" alt="image-20250220172341831"></p>
<p><strong>内中断(异常)</strong>：与当前执行的指令有关，中断信号的来自 CPU 内部</p>
<p><strong>外中断(中断)</strong>：与当前执行的指令无关，中断信号来自 CPU 外部</p>
<p><strong>陷阱</strong>：由陷入指令引发, 是应用程序故意引发的(如：非法操作码，除数为 0，运算溢出)</p>
<p><strong>故障</strong>：由错误条件引起的, 可能被内核程序修复。内核程序修复故障后会把 CPU 使用权还给应用程序, 让它继续执行下去。（如: 缺页故障，条件陷入指令，系统调用指令）<br><strong>终止</strong>: 由致命错误引起, 内核程序无法修复该错误，因此一般不再将 CPU 使用权还给引发终止的应用程序, 而是直接终止该应用程序。（如：非法使用特权指令，控制器出错，存储器校验错）</p>
<h5 id="中断机制基本原理"><a href="#中断机制基本原理" class="headerlink" title="中断机制基本原理"></a>中断机制基本原理</h5><p>不同的中断信号，需要用不同的中断处理程序来处理。当 CPU 检测到中断信号后，会根据中断信号的类型去查询“<strong>中断向量表</strong>”，以此来找到相应的中断处理程序在内存中的存放位置。</p>
<h4 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h4><p><img src="https://bu.dusays.com/2025/02/20/67b701c424472.png" alt="image-20250220181943985"></p>
<p>“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，<strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong></p>
<h5 id="系统调用和库函数的区别"><a href="#系统调用和库函数的区别" class="headerlink" title="系统调用和库函数的区别"></a>系统调用和库函数的区别</h5><p>普通应用程序：可直接进行系统调用，也可使用库函数。有的库函数涉及系统调用, 有的不涉及</p>
<p>编程语言：向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便。</p>
<p>操作系统：向上提供系统调用，使得上层程序能请求内核的服务</p>
<p><img src="https://bu.dusays.com/2025/02/20/67b6fbcf15727.png" alt="image-20250220175418877"></p>
<h5 id="系统调用的分类"><a href="#系统调用的分类" class="headerlink" title="系统调用的分类"></a>系统调用的分类</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">解析</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">设备管理</td>
<td style="text-align:center">完成设备的请求/释放/启动等功能</td>
</tr>
<tr>
<td style="text-align:center">文件管理</td>
<td style="text-align:center">完成文件的读/写/创建/删除等功能</td>
</tr>
<tr>
<td style="text-align:center">进程控制</td>
<td style="text-align:center">完成进程的创建/撤销/阻塞/唤醒等功能</td>
</tr>
<tr>
<td style="text-align:center">进程通信</td>
<td style="text-align:center">完成进程之间的消息传递/信号传递等功能</td>
</tr>
<tr>
<td style="text-align:center">内存管理</td>
<td style="text-align:center">完成内存的分配/回收等功能</td>
</tr>
</tbody>
</table>
</div>
<h5 id="为什么要用到系统调用"><a href="#为什么要用到系统调用" class="headerlink" title="为什么要用到系统调用"></a>为什么要用到系统调用</h5><p>应用程序通过 <strong>系统调用</strong> 请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此 <strong>凡是与共享资源有关的操作(如存储分配、I/O 操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求</strong>，由操作系统内核代为完成。这样 <strong>可以保证系统的稳定性和安全性，</strong> 防止用户进行非法操作。</p>
<h5 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h5><p><img src="https://bu.dusays.com/2025/02/20/67b701ad3abc7.png" alt="image-20250220181920599"></p>
<h3 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h3><blockquote>
<p>（四）操作系统结构（分层，模块化，宏内核，微内核，外核）</p>
</blockquote>
<h4 id="操作系统的内核"><a href="#操作系统的内核" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h4><p><img src="https://bu.dusays.com/2025/03/02/67c3af8f4f7d0.png" alt="image-20250302090823449"></p>
<p><strong>内核</strong> 是操作系统最基本、最核心的部分</p>
<p>实现操作系统内核功能的那些程序就是 <strong>内核程序</strong></p>
<p><strong>时钟管理</strong>：利用时钟中断实现计时功能</p>
<p><strong>中断处理</strong>：负责实现中断机制</p>
<p><strong>原语</strong>：是一种特殊程序，处于操作系统最底层，是最接近硬件的部分，这种程序的运行具有原子性（其运行只能一气呵成，不可中断），运行时间较短，调用频繁</p>
<p>操作系统 <strong>内核</strong> 需要运行在 <strong>内核态</strong></p>
<p>操作系统的 <strong>非内核功能</strong> 运行在 <strong>用户态</strong></p>
<h5 id="对系统资源进行管理的功能"><a href="#对系统资源进行管理的功能" class="headerlink" title="对系统资源进行管理的功能"></a>对系统资源进行管理的功能</h5><p>进程管理</p>
<p>存储器管理</p>
<p>设备管理</p>
<h5 id="大内核与微内核"><a href="#大内核与微内核" class="headerlink" title="大内核与微内核"></a>大内核与微内核</h5><p><img src="https://bu.dusays.com/2025/03/02/67c3b7d8e0d72.png" alt="image-20250302094352310"></p>
<p><strong>大内核</strong>：将操作系统的主要功能模块都作为系统内核，运行在核心态</p>
<ul>
<li>优点：高性能</li>
<li>缺点：内核代码庞大，结构混乱难以维护</li>
</ul>
<p><strong>微内核</strong>: 只把最基本的功能保留在内核</p>
<ul>
<li>优点：内核功能少，结构清晰，方便维护</li>
<li>缺点：需要频繁地在核心态和用户态之间切换，性能低</li>
</ul>
<h4 id="操作系统结构考点"><a href="#操作系统结构考点" class="headerlink" title="操作系统结构考点"></a>操作系统结构考点</h4><p><img src="https://bu.dusays.com/2025/03/02/67c3bace169c5.png" alt="image-20250302095629461"></p>
<h3 id="操作系统引导"><a href="#操作系统引导" class="headerlink" title="操作系统引导"></a>操作系统引导</h3><blockquote>
<p>（五）操作系统引导</p>
</blockquote>
<p><img src="https://bu.dusays.com/2025/03/02/67c3e9573a11e.png" alt="image-20250302131503082"></p>
<ol>
<li>CPU从一个特定主存地址开始取指令，执行ROM中的引导程序（先进行硬件自检，再开机)</li>
<li>将磁盘的第一块——主引导记录读入丙存，执行磁盘引导程序，扫描分区表</li>
<li>从活动分区（又称主分区，即安装了操作系统的分区）读入分区引导记录，执行其中的程序</li>
<li>从根目录下找到完整的操作系统初始化程序(即启动管理器）并执行，完成“开机”的一系列动作</li>
</ol>
<h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p><strong>虚拟机</strong>:使用虚拟化技术，将一台物理机器虚拟化为多台虚拟机器(Virtual Machine, VM)，每个虚拟机器都可以独立运行一个操作系统</p>
<p><img src="https://bu.dusays.com/2025/03/02/67c3f0b57f389.png" alt="image-20250302134628490"></p>
<p><img src="https://bu.dusays.com/2025/03/02/67c3f09bf0e62.png" alt="image-20250302134601843"></p>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><blockquote>
<p>（一）进程与线程</p>
<p>1． 进程与线程的基本概念</p>
<p>2． 进程 ／ 线程的状态与转换</p>
<p>3． 线程的实现（内核支持的线程，线程库支持的线程）</p>
<p>4． 进程与线程的组织与控制</p>
<p>5． 进程间通信（共享内存，消息传递，管道，信号）</p>
<p>（2025 新增）</p>
<p>（二）CPU 调度与上下文切换</p>
<p>1． 调度的基本概念</p>
<p>2． 调度的目标</p>
<p>3． 调度的实现</p>
<p>调度器 ／ 调度程序（scheduler），调度的时机与调度方式（抢占式 ／ 非抢占式），闲逛进程，内核级线程与用户级线程调度</p>
<p>4．CPU 调度算法（2025 新增）</p>
<p>5． 多处理机调度（2025 新增）</p>
<p>6． 上下文及其切换机制</p>
<p>（三）同步与互斥</p>
<p>1． 同步于互斥的基本概念</p>
<p>2 基本的实现方法 （软件方法；硬件方法）。</p>
<p>3 锁</p>
<p>4． 信号量</p>
<p>5 条件变量</p>
<p>6． 经典同步问题（生产者-消费者问题；读者-写者问题；哲学家进餐问题。）</p>
<p>（四）死锁</p>
<p>1． 死锁的基本概念</p>
<p>2． 死锁预防</p>
<p>3． 死锁避免</p>
<p>4 死锁检测和解除</p>
</blockquote>
<h3 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h3><h4 id="进程的概念、组成、特征"><a href="#进程的概念、组成、特征" class="headerlink" title="进程的概念、组成、特征"></a>进程的概念、组成、特征</h4><p><img src="https://bu.dusays.com/2025/03/02/67c40ed411985.png" alt="image-20250302155459975"></p>
<h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>程序:是静态的，就是个存放在磁盘里的可执行文件，就是一系列的指令集合。</p>
<p>进程（Process) :是动态的，是程序的一次执行过程</p>
<p>一个<strong>进程实体（进程映像）</strong>由<strong>PCB、程序段、数据段</strong>组成。进程是动态的，<strong>进程实体（进程映像）是静态的。</strong></p>
<p><strong>进程</strong>是进程实体的运行过程，是系统进行<strong>资源分配</strong>和<strong>调度</strong>的一个独立单位。</p>
<h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><h6 id="进程控制块—PCB"><a href="#进程控制块—PCB" class="headerlink" title="进程控制块—PCB"></a>进程控制块—PCB</h6><p>PCB是进程存在的唯一标志,当进程被创建时,操作系统为其创建PCB，当进程结束时，会回收其PCB。</p>
<p><img src="https://bu.dusays.com/2025/03/02/67c406895b8a7.png" alt="image-20250302151937275"></p>
<p>PCB是给操作系统用的</p>
<h6 id="程序段"><a href="#程序段" class="headerlink" title="程序段"></a>程序段</h6><p>程序段就是能被进程调度程序调度到CPU执行的程序代码段</p>
<h6 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h6><p>一个进程的数据段，可以是进程对应的程序加工处理的原始数据，也可以是程序执行时产生的中间或者最终结果</p>
<h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><p>进程是由多道程序的并发执行而引出的，它和程序是两个截然不同的概念。程序是静态的，进程是动态的，进程的基本特征是对比单个程序的顺序执行提出的。</p>
<ol>
<li>动态性。进程是程序的一次执行，它有着创建、活动、暂停、终止等过程，具有一定的生命周期，是动态地产生、变化和消亡的。动态性是进程最基本的特征。</li>
<li>并发性。指多个进程同存于内存中，能在一段时间内同时运行。引入进程的目的就是使进程能和其他进程并发执行。并发性是进程的重要特征，也是操作系统的重要特征。</li>
<li>独立性。指进程是一个能独立运行、独立获得资源和独立接受调度的基本单位。凡未建立PCB的程序，都不能作为一个独立的单位参与运行。</li>
<li>异步性。由于进程的相互制约，使得进程按各自独立的、不可预知的速度向前推进。异步性会导致执行结果的不可再现性，为此在操作系统中必须配置相应的进程同步机制。</li>
<li>结构性。每个进程都会配置一个PCB。结构上看，进程由程序段、数据段、PCB组成</li>
</ol>
<h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><p><img src="https://bu.dusays.com/2025/03/02/67c41f03da038.png" alt="image-20250302170402018"></p>
<h5 id="创建态、就绪态、阻塞态、终止态"><a href="#创建态、就绪态、阻塞态、终止态" class="headerlink" title="创建态、就绪态、阻塞态、终止态"></a>创建态、就绪态、阻塞态、终止态</h5><p><img src="https://bu.dusays.com/2025/03/02/67c41cd59ff41.png" alt="image-20250302165443199"></p>
<ol>
<li>进程正在被创建时，它的状态是“<strong>创建态</strong>”，在这个阶段操作系统会为进程分配资源、初始化PCB</li>
<li>当进程创建完成后，便进入“<strong>就绪态</strong>”，处于就绪态的进程已经具备运行条件，但由于没有空闲CPU，就暂时不能运行</li>
<li>在进程运行的过程中，可能会请求等待某个事件的发生（如等待某种系统资源的分配，或者等待其他进程的响应）。在这个事件发生之前，进程无法继续往下执行，此时操作系统会让这个进程下CPU，并让它进入“<strong>阻塞态</strong>”，当CPU空闲时，又会选择另一个就绪态进程上CPU运行</li>
<li>一个进程可以执行exit系统调用，请求操作系统终止该进程。此时该进程会进入“<strong>终止态</strong>”，操作系统会让该进程下CPU,并回收内存空间等资源，最后还要回收该进程的PCB。</li>
</ol>
<h4 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。</p>
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/posts/79666db/</url>
    <content><![CDATA[<h1 id="C语言—数据结构"><a href="#C语言—数据结构" class="headerlink" title="C语言—数据结构"></a>C语言—数据结构</h1><blockquote>
<p><strong>故天将降大任于是人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为</strong></p>
<p>​                                                                                                                        ——《孟子·告子章句下·第十五节》</p>
</blockquote>
<h2 id="一、数据结构之基础"><a href="#一、数据结构之基础" class="headerlink" title="一、数据结构之基础"></a>一、数据结构之基础</h2><h3 id="1-数据结构的三要素"><a href="#1-数据结构的三要素" class="headerlink" title="1.数据结构的三要素"></a>1.数据结构的三要素</h3><p><img src="https://bu.dusays.com/2025/01/15/678793b45b922.png" alt></p>
<p>1.若采用顺序存储，则各个数据元素在物理上必须是连续的;若采用非顺序存储，则各个数据元素在物理上可以是离散的。<br>2.数据的存储结构会影响存储空间分配的方便程度<br>3数椐的存储结构会影响对数据运算的速度</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793baf2244.png" alt></p>
<h4 id="数据的存储结构有几种"><a href="#数据的存储结构有几种" class="headerlink" title="数据的存储结构有几种"></a><strong>数据的存储结构有几种</strong></h4><p>​    线性</p>
<p>​          连续存储（数组）</p>
<p>​                   优点：存储速度很快</p>
<p>​                   缺点：插入和删除元素很慢，空间通常是有限的</p>
<p>​           离散存储（链表）</p>
<p>​                    优点：空间没有限制，插入删除元素很快</p>
<p>​                    缺点：存取速度很慢</p>
<h3 id="2、存储结构"><a href="#2、存储结构" class="headerlink" title="2、存储结构"></a>2、存储结构</h3><p><img src="https://bu.dusays.com/2025/01/15/678793b5b1906.png" alt></p>
<h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>顺序存储,把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p>
<h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p>链式存储，逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。（指针链接指针）</p>
<h4 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h4><p>索引存储。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字，地址)离散的</p>
<h4 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h4><p>散列存储。根据元素的夭键字直接计算出该元素的存储地址，又称哈希（Hash）存储</p>
<h3 id="3-算法特征："><a href="#3-算法特征：" class="headerlink" title="3.算法特征："></a>3.算法特征：</h3><p>确定性，可行性，输入，输出</p>
<h4 id="好算法特征："><a href="#好算法特征：" class="headerlink" title="好算法特征："></a>好算法特征：</h4><p>正确性，可读性，健壮性，高效率与低存储需求（时间，空间复杂度低）</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793b938586.png" alt></p>
<h2 id="二、链表"><a href="#二、链表" class="headerlink" title="二、链表"></a>二、链表</h2><h3 id="1-数组的优缺点："><a href="#1-数组的优缺点：" class="headerlink" title="1.数组的优缺点："></a>1.数组的优缺点：</h3><p>优点：存储速度快</p>
<p>缺点：需要一个连续很大的内存，插入和删除元素的效率很低</p>
<h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><p>优点：插入 删除元素效率高，不需要一个连续的很大内存</p>
<p>缺点：查找某个元素的效率低</p>
<h3 id="3-术语："><a href="#3-术语：" class="headerlink" title="3.术语："></a>3.术语：</h3><h4 id="首节点"><a href="#首节点" class="headerlink" title="首节点"></a><strong>首节点</strong></h4><ul>
<li>存放第一个有效数据的节点</li>
</ul>
<h4 id="尾节点"><a href="#尾节点" class="headerlink" title="尾节点"></a><strong>尾节点</strong></h4><ul>
<li>存放最后一个元素的有效数据节点</li>
</ul>
<h4 id="头结点："><a href="#头结点：" class="headerlink" title="头结点："></a><strong>头结点：</strong></h4><ol>
<li>头结点的数据类型和首节点的类型是一样的</li>
<li>头结点是首结点前面的那个节点</li>
<li>头结点里面不存放有效数据</li>
<li>设置结点是为了方便对链表经行操作</li>
</ol>
<h4 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a><strong>头指针</strong></h4><ul>
<li>存放头结点的地址的指针变量</li>
<li>可以通过头指针推算出链表的其他信息</li>
</ul>
<h3 id="4-链表的定义"><a href="#4-链表的定义" class="headerlink" title="4.链表的定义"></a>4.链表的定义</h3><ul>
<li>n个节点离散分配</li>
<li>彼此通过指针相连接</li>
<li>每个节点只有一个前驱节点和后驱节点</li>
<li>首节点没有前驱节点，  尾节点没有后续节点</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> date;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指向下一元素的指针域-递归（相同类型的指针)</span></span><br><span class="line">}Node,*pNode;<span class="comment">//node等价于struct Node,pNode等价于struct Node *</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-分类："><a href="#5-分类：" class="headerlink" title="5.分类："></a>5.分类：</h3><ul>
<li><p>单链表</p>
</li>
<li><p>双链表</p>
<p>​        每一个节点都有两个指针域</p>
</li>
<li><p>循环链表</p>
<p>​       能通过任何一个节点找到其他所有节点</p>
</li>
<li><p>非循环链表</p>
</li>
</ul>
<h3 id="6-算法"><a href="#6-算法" class="headerlink" title="6.算法"></a>6.算法</h3><p>遍历</p>
<p>查找</p>
<p>清空</p>
<p>销毁</p>
<p>排序</p>
<p>删除节点</p>
<p>插入节点 </p>
<h3 id="7-创建带头单链表并遍历输出"><a href="#7-创建带头单链表并遍历输出" class="headerlink" title="7.创建带头单链表并遍历输出"></a>7.创建带头单链表并遍历输出</h3><p>郝斌老师代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Created by 李阳 on 2024/9/26.</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据结构之链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义单链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指向下一元素的指针域-递归（相同类型的指针)</span></span><br><span class="line">}Node,* pNode;<span class="comment">//node等价于struct Node,pNode等价于struct Node *</span></span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pNode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    pNode pHead =<span class="literal">NULL</span>;<span class="comment">//等价于struct Node * pHead =NULL;</span></span><br><span class="line">    pHead = creat_list();<span class="comment">//创建一个非循环的单链表，并将该链表的头结点的地址给pHead</span></span><br><span class="line">    traverse_list(pHead);<span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单链表（带头）</span></span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span> {<span class="comment">//返回值是一个地址</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> val;<span class="comment">//用来临时存放用户输入的节点值</span></span><br><span class="line">  <span class="comment">//分配了一个不存放有效数据的头结点</span></span><br><span class="line">    pNode pHead =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    pNode pTail=pHead;<span class="comment">//定义了一个指针变量，首先分配一个头节点 pHead。然后，将 pTail 初始化为指向这个头节点。由于此时链表为空，头节点也是尾节点。</span></span><br><span class="line">    pTail-&gt;pNext=<span class="literal">NULL</span>;<span class="comment">//地址为空</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入链表的节点个数：len ="</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        pNode pNew =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        pNew-&gt;data=val;<span class="comment">//将临时val的值放给新创的节点</span></span><br><span class="line">        pTail-&gt;pNext=pNew;<span class="comment">// 设置为指向新节点的指针，这样新节点就被添加到了链表的末尾</span></span><br><span class="line">        pNew-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line">        pTail=pNew;<span class="comment">//pTail 将指向链表的最后一个节点(更新，向后移）</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pHead ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">      pNode p=pHead-&gt;pNext;<span class="comment">//定义了一个指针变量p，将链表的头指针给p</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> !=p)<span class="comment">//p不为NULL时</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,p-&gt;data);<span class="comment">//打印p的数据</span></span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p向后移</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="8-※链表的基本操作※"><a href="#8-※链表的基本操作※" class="headerlink" title="8.※链表的基本操作※"></a>8.※链表的基本操作※</h3><p>郝斌老师代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Created by 李阳 on 2024/9/26.</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据结构之单链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指向下一元素的指针域-递归（相同类型的指针)</span></span><br><span class="line">}Node,* pNode;<span class="comment">//node等价于struct Node,pNode等价于struct Node *</span></span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pNode)</span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(pNode pHead)</span>;<span class="comment">//是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(pNode)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(pNode,<span class="type">int</span> ,<span class="type">int</span> )</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(pNode pHead,<span class="type">int</span> pos,<span class="type">int</span> *pval)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(pNode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    pNode pHead =<span class="literal">NULL</span>;<span class="comment">//等价于struct Node * pHead =NULL;</span></span><br><span class="line">    pHead = creat_list();<span class="comment">//创建一个非循环的单链表，并将该链表的头结点的地址给pHead</span></span><br><span class="line">    traverse_list(pHead);<span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //判断链表是否为空</span></span><br><span class="line"><span class="comment">    if(is_empty(pHead))</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        printf("链表为空！\n");</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        printf("链表不空");</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //返回链表长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int len= length_list(pHead);</span></span><br><span class="line"><span class="comment">    printf("链表长度是 %d\n",len);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //排序</span></span><br><span class="line"><span class="comment">    printf("从小到大排序后的代码是：\n");</span></span><br><span class="line"><span class="comment">    sort_list(pHead);</span></span><br><span class="line"><span class="comment">    traverse_list(pHead);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //插入</span></span><br><span class="line"><span class="comment">    insert_list(pHead,3,44);</span></span><br><span class="line"><span class="comment">    traverse_list(pHead);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //删除</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    if(delete_list(pHead,3,&amp;val))</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        printf("删除成功，您删除的元素是%d\n",val);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    } else</span></span><br><span class="line"><span class="comment">        printf("删除未成功\n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    traverse_list(pHead);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span> {<span class="comment">//返回值是一个地址</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> val;<span class="comment">//用来临时存放用户输入的节点值</span></span><br><span class="line">  <span class="comment">//分配了一个不存放有效数据的头结点</span></span><br><span class="line">    pNode pHead =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    pNode pTail=pHead;<span class="comment">//定义了一个指针变量，首先分配一个头节点 pHead。然后，将 pTail 初始化为指向这个头节点。由于此时链表为空，头节点也是尾节点。</span></span><br><span class="line">    pTail-&gt;pNext=<span class="literal">NULL</span>;<span class="comment">//地址为空</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入链表的节点个数：len ="</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        pNode pNew =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        pNew-&gt;data=val;<span class="comment">//将临时val的值放给新创的节点</span></span><br><span class="line">        pTail-&gt;pNext=pNew;<span class="comment">// 设置为指向新节点的指针，这样新节点就被添加到了链表的末尾</span></span><br><span class="line">        pNew-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line">        pTail=pNew;<span class="comment">//pTail 将指向链表的最后一个节点(更新，向后移）</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pHead ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">      pNode p=pHead-&gt;pNext;<span class="comment">//定义了一个指针变量p，将链表的头指针给p</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> !=p)<span class="comment">//p不为NULL时</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,p-&gt;data);<span class="comment">//打印p的数据</span></span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p向后移</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead-&gt;pNext)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回链表长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">    pNode p=pHead-&gt;pNext;<span class="comment">//定义了一个指针变量p，将头节点的地址给他</span></span><br><span class="line">    <span class="type">int</span> len =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span>!=p)<span class="comment">//如果这里面是空的</span></span><br><span class="line">    {</span><br><span class="line">        ++len;<span class="comment">//++</span></span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p指向下一个元素</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i,j,t;</span><br><span class="line"><span class="type">int</span> len = length_list(pHead);</span><br><span class="line">pNode p,q;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>,p=pHead-&gt;pNext; i &lt;len<span class="number">-1</span> ; ++i,p=p-&gt;pNext) {<span class="comment">//p放的是第一个元素，</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>,q=p-&gt;pNext; j &lt;len ; ++j,q=q-&gt;pNext) {<span class="comment">//q放的是p的后面的一个元素</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)</span><br><span class="line">            {</span><br><span class="line">                t=p-&gt;data;</span><br><span class="line">                p-&gt;data=q-&gt;data;</span><br><span class="line">                q-&gt;data=t;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入--在第pos的前面插入一个新的节点val，pos从1开始</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(pNode pHead,<span class="type">int</span> pos,<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    pNode p=pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span>!=p &amp;&amp; i&lt;pos<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        p=p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || <span class="literal">NULL</span> ==p)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pNode pNew =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"动态内存分配失败\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    pNew -&gt;data=val;<span class="comment">//定义了一个新节点，将val先放进去</span></span><br><span class="line">    pNode q=p-&gt;pNext;<span class="comment">//p此时已经来到了pos-1的地方，也就是他的前面，</span></span><br><span class="line">    p-&gt;pNext=pNew;<span class="comment">//将他的地址给pNew</span></span><br><span class="line">    pNew-&gt;pNext=q;<span class="comment">//再将pNew的下一元素的地址给next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(pNode pHead,<span class="type">int</span> pos,<span class="type">int</span> * pval)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    pNode p=pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span>!=p-&gt;pNext &amp;&amp; i&lt;pos<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        p=p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || <span class="literal">NULL</span> ==p-&gt;pNext)<span class="comment">//pos-1:eg:删除第3个必须要知道第二个</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pNode q=p-&gt;pNext;<span class="comment">//第pos个节点</span></span><br><span class="line">    *pval=q-&gt;data;<span class="comment">//将要删除的节点保存下来</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除p节点后面的节点</span></span><br><span class="line">    p-&gt;pNext=p-&gt;pNext-&gt;pNext;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="9-李阳的线性表"><a href="#9-李阳的线性表" class="headerlink" title="9.李阳的线性表"></a>9.李阳的线性表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 李阳 on 2024/11/11.--线性表</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXNUM 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DateType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    DateType data[MAXNUM];<span class="comment">//定义了一个数组</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">}SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initList</span> <span class="params">(SqList *L)</span>{</span><br><span class="line">      L-&gt;length=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListInsert</span><span class="params">(SqList *L,<span class="type">int</span> i,DateType d)</span><span class="comment">//第i位置插入d</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L-&gt;length+<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//插入位置不合法</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length&gt;MAXNUM)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//表满了</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = L-&gt;length; k &gt;=i ; k--) <span class="comment">//依次向后移</span></span><br><span class="line">    {</span><br><span class="line">        L-&gt;data[k]=L-&gt;data[k<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>]=d;<span class="comment">//当用户输入在3的位置插入，其实是在索引2的位置，如果想</span></span><br><span class="line">    L-&gt;length++;<span class="comment">//修改，可以将k&gt;=i改为k&gt;i即可</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListDelete</span><span class="params">(SqList *L,<span class="type">int</span> i,DateType *d)</span><span class="comment">//删除第i个元素并保存在d中</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    *d=L-&gt;data[i<span class="number">-1</span>];<span class="comment">//保存被删除的元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;L-&gt;length;k++)<span class="comment">//找到被删除元素位置</span></span><br><span class="line">    {</span><br><span class="line">       L-&gt;data[k<span class="number">-1</span>]= L-&gt;data[k];<span class="comment">//向前移</span></span><br><span class="line">    }</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TraverseList</span><span class="params">(SqList L)</span><span class="comment">//这里传的L而不是*L是值传递，不需要对数据进行修改</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,L.data[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回当前元素个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(SqList L)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改指定位置元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListUpdate</span><span class="params">(SqList *L,<span class="type">int</span> i,DateType e)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;L-&gt;length)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>]=e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找索引为i的指定元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListGit</span><span class="params">(SqList L,<span class="type">int</span> i,DateType *x)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;L.length)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    *x=L.data[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素的位置（返回第一个匹配元素的位置）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SqList L, DateType e)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e) {</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>; <span class="comment">// 返回的是位置索引，从1开始计数</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 未找到</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    SqList  L;</span><br><span class="line">    initList(&amp;L);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    ListInsert(&amp;L,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    ListInsert(&amp;L,<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    TraverseList(L);</span><br><span class="line"></span><br><span class="line">    DateType d;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    ListDelete(&amp;L,<span class="number">2</span>,&amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除的元素是：%d "</span>,d);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    TraverseList(L);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="10-李阳的带头单链表"><a href="#10-李阳的带头单链表" class="headerlink" title="10.李阳的带头单链表"></a>10.李阳的带头单链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 李阳 on 2024/11/12.</span></span><br><span class="line"><span class="comment">//带头单链表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">}Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">Node * <span class="title function_">initList</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">     Node * head=(Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"动态内存分配失败!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">instertATEnd</span><span class="params">(Node * head ,<span class="type">int</span> date)</span></span><br><span class="line">{</span><br><span class="line">    Node * newNode=(Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"创建失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    newNode -&gt;data=date;</span><br><span class="line">    newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Node *temp=head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    temp-&gt;next=newNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertATHead</span><span class="params">(Node * head,<span class="type">int</span>  data)</span></span><br><span class="line">{</span><br><span class="line">    Node * newNode=(Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"创建失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    newNode-&gt;next=head-&gt;next;<span class="comment">//尾巴结点为NULL</span></span><br><span class="line">    head-&gt;next=newNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node * head)</span></span><br><span class="line">{</span><br><span class="line">    Node * temp=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,temp-&gt;data);</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node * head, <span class="type">int</span> data)</span></span><br><span class="line">{</span><br><span class="line">    Node * temp=head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>&amp;&amp;temp-&gt;next-&gt;data!=data)</span><br><span class="line">    {</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(temp-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        Node * current=temp-&gt;next;</span><br><span class="line">        temp-&gt;next=current-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">    } <span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"没找到哦"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回指定元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getElement</span><span class="params">(Node* head, <span class="type">int</span> index)</span> {</span><br><span class="line">    Node* temp = head;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; count &lt; index) {</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 检查是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"索引 %d 越界\n"</span>, index);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 或者返回一个特殊值表示错误，比如 INT_MIN 或 -1（需要包含 &lt;limits.h&gt;）</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;data;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 获取链表的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getListLength</span><span class="params">(Node* head)</span> {</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    Node* current = head-&gt;next; <span class="comment">// 不计算头结点</span></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) {</span><br><span class="line">        length++;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表内存的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node* head)</span> {</span><br><span class="line">    Node* current = head-&gt;next; <span class="comment">// 从头结点的下一个节点开始释放</span></span><br><span class="line">    Node* nextNode;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) {</span><br><span class="line">        nextNode = current-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = nextNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(head); <span class="comment">// 最后释放头结点</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置添加数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertList</span><span class="params">(Node * head,<span class="type">int</span> i,<span class="type">int</span> data)</span></span><br><span class="line">{</span><br><span class="line">    Node * newNode =(Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (!newNode) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    Node * temp=head;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊情况：在头部插入</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        newNode-&gt;data = data;</span><br><span class="line">        head = newNode;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span> &amp;&amp; index&lt;i<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        index++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index != i - <span class="number">1</span>) {</span><br><span class="line">        <span class="comment">// 位置超出链表长度</span></span><br><span class="line">        <span class="built_in">free</span>(newNode);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入位置超出链表长度\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line">    newNode-&gt;next=temp-&gt;next;</span><br><span class="line">    temp-&gt;next=newNode;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引删除元素，并将值保存在data中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteList</span><span class="params">(Node* head,<span class="type">int</span> i,<span class="type">int</span> *data)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="comment">// 链表为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"链表为空，无法删除\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    Node * temp=head;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>&amp;&amp; index&lt;i<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        index++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index!=i<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除有误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">      Node * current=temp-&gt;next;</span><br><span class="line">    *data=current-&gt;data;</span><br><span class="line"></span><br><span class="line">    temp-&gt;next=current-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(current);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    Node * head=initList();</span><br><span class="line"></span><br><span class="line">    instertATEnd(head,<span class="number">1</span>);</span><br><span class="line">    instertATEnd(head,<span class="number">2</span>);</span><br><span class="line">    instertATEnd(head,<span class="number">3</span>);</span><br><span class="line">    instertATEnd(head,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"尾插法"</span>);</span><br><span class="line">    printList(head);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"----------------------"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"头插法\n"</span>);</span><br><span class="line"></span><br><span class="line">    insertATHead(head,<span class="number">5</span>);</span><br><span class="line">    insertATHead(head,<span class="number">4</span>);</span><br><span class="line">    printList(head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line">    deleteNode(head,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    printList(head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取链表长度</span></span><br><span class="line">    <span class="type">int</span> length = getListLength(head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Linked list length: %d\n"</span>, length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放链表内存</span></span><br><span class="line">    freeList(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="三、栈"><a href="#三、栈" class="headerlink" title="三、栈"></a>三、栈</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>​             一种可以实现“先进后出”的存储结构</p>
<p>​            栈类似于一个箱子，先放进去的后拿出来，后进去的先拿出来</p>
<h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p>   静态栈</p>
<p>   动态栈</p>
<h3 id="3-算法"><a href="#3-算法" class="headerlink" title="3.算法"></a>3.算法</h3><p>​      出栈</p>
<p>​      压栈</p>
<p>郝斌老师代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据结构之栈 o.O</span></span><br><span class="line"><span class="comment"> *  Created by 李阳 on 2024/10/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">pNext</span>;</span></span><br><span class="line">}Node,*pNode;</span><br><span class="line"><span class="comment">//栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    pNode pTop;<span class="comment">//元素顶部</span></span><br><span class="line">    pNode pBottom;<span class="comment">//元素底部</span></span><br><span class="line">}sTack,*pStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(pStack)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(pStack pS,<span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse</span><span class="params">(pStack)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">popStack</span><span class="params">(pStack,<span class="type">int</span> *)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">empty</span><span class="params">(pStack pS)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(pStack pS)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">   sTack S;<span class="comment">//sTack等价于 struct Stack--建立了一个名为S的成员变量，里面有两个元素，ptop和pbottom，里面暂时没有有效数据</span></span><br><span class="line"></span><br><span class="line">   initStack(&amp;S);<span class="comment">//初始化-造出空栈</span></span><br><span class="line">   pushStack(&amp;S,<span class="number">1</span>);<span class="comment">//压栈</span></span><br><span class="line">    pushStack(&amp;S,<span class="number">2</span>);<span class="comment">//压栈</span></span><br><span class="line">    pushStack(&amp;S,<span class="number">3</span>);<span class="comment">//压栈</span></span><br><span class="line">    pushStack(&amp;S,<span class="number">4</span>);<span class="comment">//压栈</span></span><br><span class="line"></span><br><span class="line">    traverse(&amp;S);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空</span></span><br><span class="line">    clear(&amp;S);</span><br><span class="line">   <span class="comment">// traverse(&amp;S);//输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">if</span>( popStack(&amp;S,&amp;val))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈成功，出栈的元素是：%d\n"</span>,val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   traverse(&amp;S);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    pS-&gt;pTop=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (Node));<span class="comment">//将top指向一个新造的空节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pS-&gt;pTop)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        pS-&gt;pBottom=pS-&gt;pTop;<span class="comment">//地址都指向空节点</span></span><br><span class="line">        pS-&gt;pTop-&gt;pNext=<span class="literal">NULL</span>;<span class="comment">//将新造的节点的指针域为空--因为他是最后一个元素的下一个元素，因此没有指针域</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//压栈--进栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(pStack pS,<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    pNode pNew=(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (Node));</span><br><span class="line">    pNew-&gt;data=val;</span><br><span class="line">    pNew-&gt;pNext=pS-&gt;pTop;<span class="comment">//此时ptoop里面放的是初始化时的临时变量地址，这里调用，将新建的栈的指针域指向初始化的元素地址</span></span><br><span class="line">    pS-&gt;pTop=pNew;<span class="comment">//再将新的节点地址给top</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    pNode p=pS-&gt;pTop;<span class="comment">//定义个临时指针变量p，将头的值给p，</span></span><br><span class="line">    <span class="keyword">while</span> (p!=pS-&gt;pBottom)<span class="comment">//当p为底部元素时程序终止</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p指向p的下一元素地址</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">empty</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop==pS-&gt;pBottom)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">bool</span> <span class="title function_">popStack</span><span class="params">(pStack pS,<span class="type">int</span> * pVal)</span><span class="comment">//把ps所指向的栈出栈一次，并将出栈元素存入pval新参所指向的变量中，成功返回true，否则false</span></span><br><span class="line">{</span><br><span class="line">     <span class="keyword">if</span>(empty(pS))</span><br><span class="line">     {</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     {</span><br><span class="line">        pNode r=pS-&gt;pTop;<span class="comment">//定义一个变量r，将顶元素给r</span></span><br><span class="line">        *pVal=r-&gt;data;</span><br><span class="line">        pS-&gt;pTop=r-&gt;pNext;<span class="comment">//再将top指向下一元素，这样r就被孤立了</span></span><br><span class="line">         <span class="built_in">free</span>(r);</span><br><span class="line">         r=<span class="literal">NULL</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(empty(pS))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">    pNode p=pS-&gt;pTop;</span><br><span class="line">    pNode q=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (p!=pS-&gt;pBottom)</span><br><span class="line">        {</span><br><span class="line">            q=p-&gt;pNext;<span class="comment">//q指向第二个</span></span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p=q;<span class="comment">//p又指向了下一个元素了</span></span><br><span class="line">        }</span><br><span class="line">        pS-&gt;pTop=pS-&gt;pBottom;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-应用"><a href="#4-应用" class="headerlink" title="4.应用"></a>4.应用</h3><p>函数调用</p>
<p>中断</p>
<p>表达式求值</p>
<p>内存分配</p>
<p>缓存处理</p>
<p>迷宫</p>
<h3 id="5-栈的表达式求值—后缀表达式（逆波兰表达式）"><a href="#5-栈的表达式求值—后缀表达式（逆波兰表达式）" class="headerlink" title="5.栈的表达式求值—后缀表达式（逆波兰表达式）"></a>5.栈的表达式求值—后缀表达式（逆波兰表达式）</h3><p><strong>1.例如：1+2*3</strong></p>
<p>​     后缀表达式为 1 2 3 * +</p>
<p>​             遇到一个运算符他会在前面两个数字间运算 </p>
<ol>
<li>​          2 *3</li>
<li>然后向后移到+    </li>
<li>6+1</li>
</ol>
<p><strong>2、(a + b) * (c - (d / e)) + f</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b + c d e / - * f +</span><br></pre></td></tr></table></figure>
<p><strong>3.、a * (b + c) - (d / e)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b c + * d e / -</span><br></pre></td></tr></table></figure>
<p><strong>4、a + b * (c - d / e) ^ f</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b c d e / - f ^ * +</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 操作数和运算符</span><br><span class="line">操作数（如变量和常数）直接添加到输出列表中。</span><br><span class="line">运算符则需要根据优先级和括号来决定是否入栈、弹出或保持在栈中。</span><br><span class="line">2. 运算符优先级</span><br><span class="line">运算符的优先级从高到低一般为：</span><br><span class="line">* 和 / （乘法和除法）优先级高</span><br><span class="line">+ 和 - （加法和减法）优先级低</span><br><span class="line">在遇到相同优先级的运算符时，按照左结合性处理（从左到右）。</span><br><span class="line">3. 括号的处理</span><br><span class="line">遇到左括号 ( 时，直接入栈。</span><br><span class="line">遇到右括号 ) 时，弹出栈中的运算符到输出，直到遇到对应的左括号为止，左括号被丢弃。</span><br><span class="line">4. 栈的使用</span><br><span class="line">当一个运算符被处理时，检查栈顶运算符的优先级：</span><br><span class="line">如果栈顶运算符的优先级高于或等于当前运算符，则弹出栈顶运算符到输出。</span><br><span class="line">否则，将当前运算符入栈。</span><br><span class="line">5. 表达式结束时的处理</span><br><span class="line">当整个中序表达式处理完毕后，仍有运算符在栈中时，将它们全部弹出到输出。</span><br><span class="line">6. 后缀表达式的特征</span><br><span class="line">后缀表达式不需要括号，因为运算符的顺序和位置已经明确了运算的优先级和关联性。</span><br></pre></td></tr></table></figure>
<p><strong>当一个运算符被处理时，检查栈顶运算符的优先级：</strong><br><strong>如果栈顶运算符的优先级高于或等于当前运算符，则弹出栈顶运算符到输出。</strong><br><strong>否则，将当前运算符入栈。</strong></p>
<p>总结：</p>
<ul>
<li>栈底部的运算符永远是最低的</li>
<li>遇到括号先输出括号里的运算符，但不保留括号</li>
<li>当有刚入栈的运算符小于或等于当前栈中的运算符，那直接将栈出到小于此运算符的位置</li>
<li>来看个小例子吧：</li>
<li>1.当栈低为+或-时，来了个*或/时可以留着栈中，当此时又来了一个新运算符，假设为-，此时栈中的为+和<em>，那么将\</em>和+直接出栈，-再放入栈中</li>
<li>2.假设栈底运算符为<em>或者/，当入栈为+或-时，那么将\</em>或\出栈，将+或-压入栈底部</li>
<li>3.当栈低为+和<em>时，此时入栈了一个/那么将\</em>出栈，+留在栈中，/也压入栈中</li>
</ul>
<p>特别注意：* / ^的运算符是在两个运算的字母后的</p>
<p>例题：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">eg:1. (A + B) * (C - D) / E ^ F </span><br><span class="line"> 遇到括号左括号进栈A输出+进栈B输出，扫描到右括号+出栈，此时为AB+</span><br><span class="line"> *入栈，左括号入栈C输出-入栈D输出右括号出栈，此时变为AB+CD-,栈低为*</span><br><span class="line"> 扫描/入栈，因为/的优先级不大于*，因此*出栈，此时变为AB+CD-*，栈低为/</span><br><span class="line"> E输出，^进栈^的优先级不大于/要出栈，但是因为我们的运算符要相匹配，因此F输出在依次输出栈/^,这里E F ^ 表示 E 和 F 进行指数运算。/ 表示乘法结果除以 E F ^ 的结果</span><br><span class="line"> AB+CD-*EF/^</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">2. A + B * (C ^ D - E) ^ F / G</span><br><span class="line">   输出A,+进栈，输出B，此时为AB，+在栈里面</span><br><span class="line">   扫描左括号入栈，C输出，^进栈D输出，-进栈，因为我们的-优先级低于^,所以^的位置上移动，出栈，E输出扫描到又括号^出栈，-出栈，栈低为+和*，此时为ABCD^E-</span><br><span class="line">   ^入栈,因为^的优先级不大于*，所以*出栈，^入栈，栈里为+^，F输出,/进栈，因为FG是个组合，所以输出*FG/^  </span><br><span class="line">   结果是ABCD^E-*FG/^  </span><br></pre></td></tr></table></figure>
<h3 id="6-后缀表达式转中缀"><a href="#6-后缀表达式转中缀" class="headerlink" title="6.后缀表达式转中缀"></a>6.后缀表达式转中缀</h3><p>我们学完了中缀转后缀下面来试一试后缀表达式转中缀吧！</p>
<p>我们先来看题吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AB+CD-*EF/^</span><br><span class="line"></span><br><span class="line">首先我们的ab进栈，这时我们扫描到运算符+，这时候就变成a+b，然后入栈（遇到运算符要与他的前两位进行计算）</span><br><span class="line">cd进栈，扫描到运算符-，就变成c-d然后入栈，此时栈里存放的是a+b 和c-d </span><br><span class="line">然后扫描到运算符* ，就变成 a+b * c-d ，因为我们左右两边是个整体，所以要加括号（a+b） * （c-d），然后再入栈</span><br><span class="line">EF进栈，扫描到/，就变成E/F,此时栈里存放的是（a+b） * （c-d） 和 （E/F）</span><br><span class="line">扫描到^ 就变成 （a+b） * （c-d） ^ （E/F）</span><br><span class="line">本题结束(●'◡'●)</span><br></pre></td></tr></table></figure>
<p>由此我们可以反推出 ：</p>
<p>字母总是两两存在的因此在中序转后缀需要考虑组合</p>
<p>后缀转中缀的是运算符之前的两位数字/字母进行计算</p>
<h3 id="7-李阳的栈"><a href="#7-李阳的栈" class="headerlink" title="7.李阳的栈"></a>7.李阳的栈</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 李阳 on 2024/11/13.--链式栈</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">}Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义栈结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkedStack</span>{</span></span><br><span class="line">    Node * top;<span class="comment">//栈顶指针，初始化为NULL表示空栈</span></span><br><span class="line">} LinkedStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">LinkedStack * <span class="title function_">initStack</span><span class="params">()</span>{</span><br><span class="line">    LinkedStack * <span class="built_in">stack</span>=(LinkedStack *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedStack));</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top=<span class="literal">NULL</span>; <span class="comment">// 初始化栈顶指针为NULL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(LinkedStack * <span class="built_in">stack</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top==<span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param stack</span></span><br><span class="line"><span class="comment"> * @param data</span></span><br><span class="line"><span class="comment"> * 解析：让我来为你解析吧！</span></span><br><span class="line"><span class="comment"> * 首先我们定义了一个链表，然后一个空栈，里面有一个top指向NULL</span></span><br><span class="line"><span class="comment"> * 然后我们传入一个元素假设为1</span></span><br><span class="line"><span class="comment"> * 然后newNode-&gt;next=stack-&gt;top;// 新节点的next指向当前栈顶</span></span><br><span class="line"><span class="comment">    stack-&gt;top=newNode;</span></span><br><span class="line"><span class="comment"> *这俩是核心代码 我们直接说这个</span></span><br><span class="line"><span class="comment"> * stack-&gt;top上面初始化为NULL</span></span><br><span class="line"><span class="comment"> * 所以newNode-&gt;next里面就是NULL</span></span><br><span class="line"><span class="comment"> * 然后newNode为指针类型的， stack-&gt;top=newNode;就是将top指向了他的指针</span></span><br><span class="line"><span class="comment"> * 我理解的是双胞胎，栈的top的指针就指向了NewNode</span></span><br><span class="line"><span class="comment"> * 假设我们现在又传入了一个2</span></span><br><span class="line"><span class="comment"> * newNode-&gt;next=stack-&gt;top</span></span><br><span class="line"><span class="comment"> * 2的next里面放的是1的地址</span></span><br><span class="line"><span class="comment"> * stack-&gt;top=newNode;</span></span><br><span class="line"><span class="comment"> * 我们又将2的地址给了top，类似top再向上移动</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(LinkedStack* <span class="built_in">stack</span>,<span class="type">int</span> data)</span>{</span><br><span class="line">    Node * newNode=(Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line"></span><br><span class="line">    newNode-&gt;next=<span class="built_in">stack</span>-&gt;top;<span class="comment">// 新节点的next指向当前栈顶</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top=newNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param stack</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> * 我又来啦，现在由李阳为你解析链栈的出栈</span></span><br><span class="line"><span class="comment"> * 我们这个是有返回值的，首先传入一个栈是毋庸置疑的</span></span><br><span class="line"><span class="comment"> * 还需要一个小小的判断-如果栈里面没有元素呢</span></span><br><span class="line"><span class="comment"> * -------核心代码----</span></span><br><span class="line"><span class="comment"> * 首先我们定义了一个临时变量temp用于存放栈顶，</span></span><br><span class="line"><span class="comment"> * 这里top里面放的是最后一个元素的地址</span></span><br><span class="line"><span class="comment"> * 根据地址可以找到元素没问题吧</span></span><br><span class="line"><span class="comment"> * 然后我们再将栈顶的元素的下一个地址重新给top</span></span><br><span class="line"><span class="comment"> * 我们之前top里面放的是栈顶的地址，现在我们变成传入栈顶</span></span><br><span class="line"><span class="comment"> * 的下一元素的地址，也就是将top向下移动</span></span><br><span class="line"><span class="comment"> * o.O</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(LinkedStack * <span class="built_in">stack</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈是空的"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    Node * temp=<span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="type">int</span>  popData=temp-&gt;data;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top=temp-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> popData;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printStack</span><span class="params">(LinkedStack *<span class="built_in">stack</span>)</span></span><br><span class="line">{</span><br><span class="line">    Node *temp=<span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,temp-&gt;data);</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">StackTop</span><span class="params">(LinkedStack*<span class="built_in">stack</span>)</span></span><br><span class="line">{</span><br><span class="line">    Node * temp=<span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> topdata=temp-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> topdata;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeStack</span><span class="params">(LinkedStack * <span class="built_in">stack</span>)</span></span><br><span class="line">{</span><br><span class="line">      Node * temp=<span class="built_in">stack</span>-&gt;top;</span><br><span class="line">      Node *nextNode;<span class="comment">//下一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        nextNode=temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp=nextNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//来检验一下吧^_^</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    LinkedStack *<span class="built_in">stack</span>=initStack();<span class="comment">//初始化</span></span><br><span class="line">    push(<span class="built_in">stack</span>,<span class="number">1</span>);</span><br><span class="line">    push(<span class="built_in">stack</span>,<span class="number">2</span>);</span><br><span class="line">    push(<span class="built_in">stack</span>,<span class="number">3</span>);</span><br><span class="line">    push(<span class="built_in">stack</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    printStack(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> a=  StackTop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈顶元素是：%d "</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="type">int</span> b= pop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d出栈了"</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    printStack(<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line">    freeStack(<span class="built_in">stack</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="四、队列"><a href="#四、队列" class="headerlink" title="四、队列"></a>四、队列</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>​        一种可以实现“先进先出”的存储结构—排队买票进站 </p>
<h3 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2.分类"></a>2.分类</h3><p>​    链式队列（链表）</p>
<p>​    静态队列（数组）</p>
<p>​            静态队列通常都必须是循环队列</p>
<p>​                      <img src="https://bu.dusays.com/2025/01/15/678793bca624b.png" alt>        </p>
<h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><p>郝斌老师代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by 李阳 on 2024/10/14.</span></span><br><span class="line"><span class="comment"> * 数据结构之静态循环队列o.O</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> *pBase;</span><br><span class="line">    <span class="type">int</span> front;<span class="comment">//首</span></span><br><span class="line">    <span class="type">int</span> rear;<span class="comment">//尾</span></span><br><span class="line">} QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(QUEUE *)</span>;<span class="comment">//改变实参的值所以要加*</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE *,<span class="type">int</span>)</span>;<span class="comment">//入队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE *)</span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">full_queue</span><span class="params">(QUEUE *)</span>;<span class="comment">//判断是否满</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE *,<span class="type">int</span> *pVal)</span>;<span class="comment">//出队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">emput_queue</span><span class="params">(QUEUE *)</span>;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    QUEUE Q;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    init(&amp;Q);<span class="comment">//调用初始化函数</span></span><br><span class="line">    en_queue(&amp;Q,<span class="number">1</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">2</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">3</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">4</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">5</span>);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (out_queue(&amp;Q, &amp;val)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队成功: %d\n"</span>, val); <span class="comment">// 修正输出格式</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队失败\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(QUEUE *pQ)</span></span><br><span class="line">{</span><br><span class="line">    pQ-&gt;pBase=(<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>)*<span class="number">6</span>);<span class="comment">//定义了6个数据的数组</span></span><br><span class="line">    pQ-&gt;front=pQ-&gt;rear=<span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE *pQ,<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(full_queue(pQ))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列满啦"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear]=val;<span class="comment">//将值放入尾部，并且尾部要+1</span></span><br><span class="line">        pQ-&gt;rear=(pQ-&gt;rear+<span class="number">1</span>)%<span class="number">6</span>;<span class="comment">//尾部+1--因为是循环队列，当他满的时候会又从0开始</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为满</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">full_queue</span><span class="params">(QUEUE *pQ)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>((pQ-&gt;rear+<span class="number">1</span>)%<span class="number">6</span>==pQ-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE *pQ)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=pQ-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> ((i!=pQ-&gt;rear))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,pQ-&gt;pBase[i]);</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">6</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">emput_queue</span><span class="params">(QUEUE * pQ)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear)</span><br><span class="line">    {</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE * pQ,<span class="type">int</span> *pVal)</span><span class="comment">//因为要带回来值，所以要*</span></span><br><span class="line">{</span><br><span class="line">   <span class="keyword">if</span>(emput_queue(pQ))</span><br><span class="line">   {</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"表是空的"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   } <span class="keyword">else</span></span><br><span class="line">   {</span><br><span class="line">     *pVal=pQ-&gt;pBase[pQ-&gt;front];</span><br><span class="line">     pQ-&gt;front=(pQ-&gt;front+<span class="number">1</span>)%<span class="number">6</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="4-队列的操作"><a href="#4-队列的操作" class="headerlink" title="4.队列的操作"></a>4.队列的操作</h3><p>所有和时间有关的操作</p>
<h3 id="5-李阳的队列"><a href="#5-李阳的队列" class="headerlink" title="5.李阳的队列"></a>5.李阳的队列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 李阳 on 2024/11/13.--链式队列</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">} Node;</span><br><span class="line"><span class="comment">// 定义队列结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkedQueue</span> {</span></span><br><span class="line">    Node* front;  <span class="comment">// 队头指针</span></span><br><span class="line">    Node* rear;   <span class="comment">// 队尾指针</span></span><br><span class="line">} LinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">LinkedQueue * <span class="title function_">initQueue</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    LinkedQueue * <span class="built_in">queue</span>=(LinkedQueue*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedQueue));</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front=<span class="built_in">queue</span>-&gt;rear=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="comment">//返回0为空，1不为空所以为int类型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(LinkedQueue* <span class="built_in">queue</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;front == <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span> <span class="params">(LinkedQueue * <span class="built_in">queue</span>,<span class="type">int</span> data)</span></span><br><span class="line">{</span><br><span class="line">    Node *newNode=(Node* ) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line">    newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front=<span class="built_in">queue</span>-&gt;rear=newNode;</span><br><span class="line">    } <span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear-&gt;next=newNode;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear=newNode;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dequeue</span><span class="params">(LinkedQueue * <span class="built_in">queue</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列是空的"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Node *temp=<span class="built_in">queue</span>-&gt;front;<span class="comment">//先进先出</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">deque</span>=temp-&gt;data;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front=<span class="built_in">queue</span>-&gt;front-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;front==<span class="literal">NULL</span>){</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear=<span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">deque</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(LinkedQueue*<span class="built_in">queue</span>)</span></span><br><span class="line">{</span><br><span class="line">    Node *temp=<span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,temp-&gt;data);</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NUll\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeQueue</span><span class="params">(LinkedQueue*<span class="built_in">queue</span>)</span></span><br><span class="line">{</span><br><span class="line">    Node * temp=<span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    Node * nextNode;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        nextNode=temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp=nextNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//取队头元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getFront</span><span class="params">(LinkedQueue*<span class="built_in">queue</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span>{</span><br><span class="line">        <span class="type">int</span> temp=<span class="built_in">queue</span>-&gt;front-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    LinkedQueue* <span class="built_in">queue</span> = initQueue();</span><br><span class="line"></span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">10</span>);</span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">20</span>);</span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    printQueue(<span class="built_in">queue</span>);  <span class="comment">// 打印队列内容</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="type">int</span> temp = getFront(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"队头%d \n"</span>,temp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Dequeued: %d\n"</span>, dequeue(<span class="built_in">queue</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Dequeued: %d\n"</span>, dequeue(<span class="built_in">queue</span>));</span><br><span class="line"></span><br><span class="line">    printQueue(<span class="built_in">queue</span>);  <span class="comment">// 再次打印队列内容</span></span><br><span class="line"></span><br><span class="line">    freeQueue(<span class="built_in">queue</span>);  <span class="comment">// 释放队列内存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="6-李阳的循环队列"><a href="#6-李阳的循环队列" class="headerlink" title="6.李阳的循环队列"></a>6.李阳的循环队列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 李阳 on 2024/11/16.-循环队列</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义循环队列结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="type">int</span> *data;  <span class="comment">// 指向队列数组的指针</span></span><br><span class="line">    <span class="type">int</span> max_size;  <span class="comment">// 队列的最大容量</span></span><br><span class="line">    <span class="type">int</span> front;  <span class="comment">// 队头索引</span></span><br><span class="line">    <span class="type">int</span> rear;  <span class="comment">// 队尾索引（指向下一个入队位置）</span></span><br><span class="line">    <span class="type">int</span> size;  <span class="comment">// 队列中当前元素的数量</span></span><br><span class="line">} CircularQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化循环队列</span></span><br><span class="line">CircularQueue* <span class="title function_">create_circular_queue</span><span class="params">(<span class="type">int</span> max_size)</span> {</span><br><span class="line">    CircularQueue *<span class="built_in">queue</span> = (CircularQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CircularQueue));</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">queue</span>-&gt;max_size = max_size;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(max_size * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>-&gt;data) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败\n"</span>);</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查队列是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(CircularQueue *<span class="built_in">queue</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;size == <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查队列是否已满</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full</span><span class="params">(CircularQueue *<span class="built_in">queue</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;size == <span class="built_in">queue</span>-&gt;max_size;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enqueue</span><span class="params">(CircularQueue *<span class="built_in">queue</span>, <span class="type">int</span> value)</span> {</span><br><span class="line">    <span class="keyword">if</span> (is_full(<span class="built_in">queue</span>)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列已满，无法入队\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (is_empty(<span class="built_in">queue</span>)) {</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % <span class="built_in">queue</span>-&gt;max_size;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = value;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">dequeue</span><span class="params">(CircularQueue *<span class="built_in">queue</span>, <span class="type">int</span> *value)</span> {</span><br><span class="line">    <span class="keyword">if</span> (is_empty(<span class="built_in">queue</span>)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空，无法出队\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    *value = <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;front == <span class="built_in">queue</span>-&gt;rear) {</span><br><span class="line">        <span class="comment">// 队列中只有一个元素，出队后队列为空</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % <span class="built_in">queue</span>-&gt;max_size;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印队列中的所有元素（用于调试）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_queue</span><span class="params">(CircularQueue *<span class="built_in">queue</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> (is_empty(<span class="built_in">queue</span>)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; <span class="built_in">queue</span>-&gt;size; count++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="built_in">queue</span>-&gt;data[i]);</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="built_in">queue</span>-&gt;max_size;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放队列占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_circular_queue</span><span class="params">(CircularQueue *<span class="built_in">queue</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;data) {</span><br><span class="line">            <span class="built_in">free</span>(<span class="built_in">queue</span>-&gt;data);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    CircularQueue *<span class="built_in">queue</span> = create_circular_queue(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">10</span>);</span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">20</span>);</span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">30</span>);</span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    print_queue(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    dequeue(<span class="built_in">queue</span>, &amp;value);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出队元素: %d\n"</span>, value);</span><br><span class="line"></span><br><span class="line">    print_queue(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">50</span>);</span><br><span class="line">    enqueue(<span class="built_in">queue</span>, <span class="number">60</span>);  <span class="comment">// 这将导致队列满</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试再次入队会失败，因为队列已满</span></span><br><span class="line">    <span class="comment">// enqueue(queue, 70);</span></span><br><span class="line"></span><br><span class="line">    print_queue(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    free_circular_queue(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="五、递归"><a href="#五、递归" class="headerlink" title="五、递归"></a>五、递归</h2><p><img src="https://bu.dusays.com/2025/01/15/678793c331bfe.png" alt></p>
<h3 id="1-简单应用—阶层"><a href="#1-简单应用—阶层" class="headerlink" title="1.简单应用—阶层"></a>1.简单应用—阶层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据结构之递归</span></span><br><span class="line"><span class="comment"> * Created by 李阳 on 2024/10/15.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//demo1--求阶层</span></span><br><span class="line"><span class="comment">/* for循环版</span></span><br><span class="line"><span class="comment">int jiec(int a)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">    int b=1;</span></span><br><span class="line"><span class="comment">    int i;</span></span><br><span class="line"><span class="comment">    for ( i=1; i &lt;=a; ++i)</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        b=b*i;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    return b;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">    int b=5;</span></span><br><span class="line"><span class="comment">    int a= jiec(b);</span></span><br><span class="line"><span class="comment">    printf("%d 的阶层是 %d",b,a);</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归版</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">f</span><span class="params">(<span class="type">long</span> n)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> f(n<span class="number">-1</span>)*n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">   <span class="type">long</span> a,b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要求的阶层"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">    b= f(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld 的阶层是 %ld"</span>,a,b);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归实现1+2+...</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> sum(n<span class="number">-1</span>)+n;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id="2-定义，要求，意义"><a href="#2-定义，要求，意义" class="headerlink" title="2.定义，要求，意义"></a>2.定义，要求，意义</h3><h4 id="①定义："><a href="#①定义：" class="headerlink" title="①定义："></a>①<strong>定义：</strong></h4><p>一个函数间接或直接调用自己</p>
<h4 id="②递归需要满足的三个条件"><a href="#②递归需要满足的三个条件" class="headerlink" title="②递归需要满足的三个条件"></a>②<strong>递归需要满足的三个条件</strong></h4><ol>
<li>递归必须要有一个明确的终止条件</li>
<li>该函数所处理的数据规模必须在递减</li>
<li>这个转化必须是可解的</li>
</ol>
<h4 id="③意义"><a href="#③意义" class="headerlink" title="③意义"></a>③<strong>意义</strong></h4><p>优点：易于理解</p>
<p>缺点：速度慢，存储空间大</p>
<h4 id="④循环："><a href="#④循环：" class="headerlink" title="④循环："></a>④<strong>循环</strong>：</h4><p>不易理解，速度快，存储空间小</p>
<h2 id="六、串、数组和广义表"><a href="#六、串、数组和广义表" class="headerlink" title="六、串、数组和广义表"></a>六、串、数组和广义表</h2><h3 id="一、串（string）"><a href="#一、串（string）" class="headerlink" title="一、串（string）"></a>一、串（string）</h3><p>0个或多个任意字符组成的有限序列</p>
<h4 id="1-子串的定义"><a href="#1-子串的定义" class="headerlink" title="1.子串的定义"></a>1.子串的定义</h4><p>一个串中任意个连续字符组成的子序列（含空串）称为该串的子串</p>
<p>例如：“abcd”的子串有 </p>
<p>“ ”，“a”,”ab”,”abc”,”abcd”</p>
<p><strong>真子串</strong>：是指不包含自身的所有子串</p>
<p><strong>主串</strong>:包含子串的串相应的称为主串</p>
<p><strong>字符位置</strong>:字符在序列中的序号为该字符串中的位置</p>
<p><strong>子串位置</strong>：子串第一个字符在主串中的位置</p>
<p><strong>空格串：</strong>由一个或多个空格组成的串，与空串不同</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793b0437c6.png" alt></p>
<p><strong>串相等:</strong>当且仅当两个串的长度相等并且各个对应立置上的字符都相同时，这两个串才是相等的。</p>
<h4 id="2-串的类型定义、存储结构及运算"><a href="#2-串的类型定义、存储结构及运算" class="headerlink" title="2.串的类型定义、存储结构及运算"></a>2.串的类型定义、存储结构及运算</h4><p>顺序存储结构-顺序串</p>
<p>链式存储结构-链式串</p>
<h4 id="3-串的表示"><a href="#3-串的表示" class="headerlink" title="3.串的表示"></a>3.串的表示</h4><h5 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串的顺序存储结构</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN+<span class="number">1</span>];<span class="comment">//存储串的一维数组1-255</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//串的当前长度</span></span><br><span class="line">}SString;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="链式存储-1"><a href="#链式存储-1" class="headerlink" title="链式存储"></a>链式存储</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串的链式存储结构--块链结构</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE 80</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> {</span></span><br><span class="line">    <span class="type">char</span> ch[CHUNKSIZE]; <span class="comment">// 存储字符块</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> *<span class="title">next</span>;</span>  <span class="comment">// 指向下一个块的指针</span></span><br><span class="line">} Chunk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    Chunk *head;  <span class="comment">// 串的首指针</span></span><br><span class="line">    Chunk *tail;  <span class="comment">// 串的尾指针</span></span><br><span class="line">    <span class="type">int</span> curlen;   <span class="comment">// 串的当前长度</span></span><br><span class="line">} LString;</span><br></pre></td></tr></table></figure>
<h4 id="4-串的模式匹配"><a href="#4-串的模式匹配" class="headerlink" title="4.串的模式匹配"></a>4.串的模式匹配</h4><h5 id="1-BF算法（穷举法）"><a href="#1-BF算法（穷举法）" class="headerlink" title="1.BF算法（穷举法）"></a>1.BF算法（穷举法）</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index_BF</span><span class="params">(SString S,SString T)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=S.length&amp;&amp;j&lt;=T.length)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]==T.ch[j])</span><br><span class="line">        {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        } <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            i=(i-j)+<span class="number">2</span>;j=<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">  <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">      <span class="keyword">return</span> i-T.length;<span class="comment">//匹配成功</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/678793d4c791c.png" alt></p>
<h5 id="2-※※※-KMP算法"><a href="#2-※※※-KMP算法" class="headerlink" title="2.※※※ KMP算法"></a>2.<strong>※※※ KMP</strong>算法</h5><p><img src="https://bu.dusays.com/2025/01/15/678793d5eed9f.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算模式串 T 的 next 数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_next</span><span class="params">(SString T, <span class="type">int</span> next[])</span> {</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;  <span class="comment">// T 的当前位置</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 前缀的长度</span></span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// next[0] 通常设为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; T.length) {</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || T.ch[i] == T.ch[j]) {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            next[i] = j; <span class="comment">// 注意：next[i] 是 i 位置的前缀长度</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j = next[j - <span class="number">1</span>]; <span class="comment">// 使用 next 数组回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP 算法实现，返回模式串 T 在主串 S 中首次出现的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Index_KMP</span><span class="params">(SString S, SString T, <span class="type">int</span> next[])</span> {</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;  <span class="comment">// S 的当前位置</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;  <span class="comment">// T 的当前位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= S.length &amp;&amp; j &lt;= T.length) {</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || S.ch[i] == T.ch[j]) { <span class="comment">// j = -1 表示需要跳过</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j = next[j]; <span class="comment">// 使用 next 数组回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (j == T.length) <span class="keyword">return</span> i - T.length; <span class="comment">// 匹配成功，返回匹配位置</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 匹配失败，返回 -1</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="3-KMP算法改进"><a href="#3-KMP算法改进" class="headerlink" title="3.KMP算法改进"></a>3.KMP算法改进</h5><p><img src="https://bu.dusays.com/2025/01/15/678793dc31080.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_nextval</span><span class="params">(SString T, <span class="type">int</span> nextval[])</span> {</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;  <span class="comment">// T 的当前位置</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 前缀的长度</span></span><br><span class="line">    nextval[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// next[0] 通常设为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; T.length) {</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || T.ch[i] == T.ch[j]) {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(T.ch[i]!=T.ch[j])</span><br><span class="line">                nextval[i]=j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextval[i]=nextval[j];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j = nextval[j]; <span class="comment">// 使用 next 数组回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h3><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h4><p>按照一点格式排列起来的具有相同的数据元素集合</p>
<p><strong>一维数组</strong>：若线性表中的元素为非结构的简单元素，则称为一维数组（线性结构，定长的线性表）</p>
<p><strong>二维数组</strong>：若一维数组中的元素又是一维数组结构，则称为二维数组</p>
<p><strong>二维数组逻辑结构：</strong></p>
<ul>
<li>非线性结构： 每一个元素既在一个行表中，又在一个列表中</li>
<li>线性结构：该线性表的每一个元素也是一个定长的线性表</li>
</ul>
<p><strong>数组特点</strong>：结构固定—定义后，维度和为界不再改变</p>
<p><strong>结论</strong>:</p>
<ul>
<li>线性表结构是数组的一个特例</li>
<li>而数组结构又是线性表结构的扩展</li>
</ul>
<p><strong>基本操作</strong>：除了结构的初始化和销毁之外，只有取元素和修改元素值的操作</p>
<p>一般采用顺序结构来表示数组</p>
<h4 id="2-存储位置"><a href="#2-存储位置" class="headerlink" title="2.存储位置"></a>2.存储位置</h4><p><img src="https://bu.dusays.com/2025/01/15/678793ddb69e3.png" alt></p>
<p>数组元素a[i] [j] 的存储位置是 LOC(i,j)=LOC(0,0)+n <em> i+j </em> L(L是存储每个元素所需要L个存储单元)</p>
<h4 id="3-压缩存储"><a href="#3-压缩存储" class="headerlink" title="3.压缩存储"></a>3.压缩存储</h4><ol>
<li>什么是压缩存储?<br>若多个数据元素的值都相同，则只分配一个元素值的存储空间，且零元素不占存储空间</li>
<li>什么样的矩阵能够压缩?<br>一些特殊矩阵，如:对称矩阵，对角矩阵，三角矩阵，稀疏矩阵等。</li>
<li>什么叫稀疏矩阵?<br>矩阵中非零元素的个数较少（一般小于5%)</li>
</ol>
<h5 id="1-对称矩阵"><a href="#1-对称矩阵" class="headerlink" title="1.对称矩阵"></a><strong>1.对称矩阵</strong></h5><ol>
<li><h6 id="特点"><a href="#特点" class="headerlink" title="[特点]"></a>[特点]</h6><p>沿着对角线对称</p>
<p>在nxn的矩阵a中，满足如下性质:    aij=aji (1 ≤i, j &lt;n)</p>
</li>
<li><h6 id="存储方法"><a href="#存储方法" class="headerlink" title="[存储方法]"></a>[存储方法]</h6><p>只存储下(或者上)三角(包括主对角线)的数据元素。共占用n(n+1)/2个元素空间。</p>
</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/678793deea555.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793e02b547.png" alt></p>
<h5 id="2-三角矩阵"><a href="#2-三角矩阵" class="headerlink" title="2.三角矩阵"></a><strong>2.三角矩阵</strong></h5><ol>
<li><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="[特点]"></a>[特点]</h6><p>对角线以下(或者以上)的数据元素(不包括对角线)全部为常数co</p>
</li>
<li><h6 id="存储方法-1"><a href="#存储方法-1" class="headerlink" title="[存储方法]"></a>[存储方法]</h6><p>重复元素c共享一个元素存储空间，共占用n(n+1)/2+1个元素空间: sa[1.. n(n+1)/2+1]</p>
</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/678793e262d84.png" alt></p>
<h5 id="3-对角矩阵（带状矩阵）"><a href="#3-对角矩阵（带状矩阵）" class="headerlink" title="3.对角矩阵（带状矩阵）"></a><strong>3.对角矩阵（带状矩阵）</strong></h5><p>[特点]在nxn的方阵中，所有非零元素都集中在以主对角线为中心的带状区域中，区域外的值全为0，则称为对角矩阵。常见的有三对角矩阵、五对角矩阵、七对角矩阵等。</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793d3a20dc.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793dfa0c39.png" alt></p>
<h5 id="4-稀疏矩阵"><a href="#4-稀疏矩阵" class="headerlink" title="4.稀疏矩阵"></a><strong>4.稀疏矩阵</strong></h5><p>稀疏矩阵:设在mxn的矩阵中有t个非零元素。<br>令ɸ= t/(mxn)<br>当ɸ≤0.05时称为稀疏矩阵。</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793e169ac6.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793e30dc88.png" alt></p>
<p>三元组顺序表又称有序的双下标法。</p>
<ol>
<li><p>三元组顺序表的优点:非零元在表中按行序有序存储，因此便于进</p>
<p>行依行顺序处理的矩阵运算。</p>
</li>
<li><p>三元组顺序表的缺点:不能随机存取。若按行号存取某一行中的非</p>
<p>零元，则需从头开始进行查找。</p>
</li>
</ol>
<h6 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a><strong>十字链表</strong></h6><p>优点:它能够灵活地插入因运算而产生的新的非零元素，删除因运算而产生的新的零元素，实现矩阵的各种运算<br><img src="https://bu.dusays.com/2025/01/15/678793e472a54.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793e5c8f27.png" alt></p>
<p> <img src="https://bu.dusays.com/2025/01/15/678793e73a771.png" alt></p>
<h3 id="三-广义表"><a href="#三-广义表" class="headerlink" title="三.广义表"></a>三.广义表</h3><h4 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a>1.定义</h4><p>广义表 （又称列表Lists）是n≧0个元素 a0,a1…..an-1的有限序列，其中每一个ai或者是原子，或者是一个广义表</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793e9b3087.png" alt></p>
<ul>
<li><p>广义表通常记作:Ls=(a1, a2,..，an)</p>
<p>其中:LS为表名，n为表的长度，每一个ai为表的元素</p>
</li>
<li><p>习惯上，一般用<strong>大写字母</strong>表示<strong>广义表</strong>，<strong>小写字母</strong>表示<strong>原子。</strong></p>
</li>
<li><p><strong>表头：</strong>若LS非空(n≥1)，则其第一个元素a1就是表头。<br>记作head(LS) = a1。<strong>注</strong>:表头可以是原子，也可以是子表。</p>
</li>
<li><p><strong>表尾</strong>：除<strong>表头</strong>之外的<strong>其它元素</strong>组成的<strong>表</strong>。</p>
<p>​      记作tail(LS） = (a2, …. an)。</p>
<p>​     注:表尾不是最后一个元素，而是一个<strong>子表。</strong></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793de7e485.png" alt></p>
</li>
</ul>
<h4 id="2-性质"><a href="#2-性质" class="headerlink" title="2.性质"></a>2.性质</h4><ul>
<li><p>(1)广义表中的数据元素有相对<strong>次序;一个直接前驱和一个直接后驱</strong></p>
</li>
<li><p>(2)广义表的<strong>长度</strong>定义为最外层所包含元素的个数;</p>
<p>​     如: C=(a (b, q))是长度为2的广义表。</p>
</li>
<li><p>(3)广义表的<strong>深度</strong>定义为该广义表<strong>展开后所含括号的重数</strong>;</p>
<p>​     A=(b ,c)的深度为1,B=(A,d)的深度为2，C=(f, B,h)的深度为3。</p>
<p>​     <strong>注意</strong>:“原子”的深度为0;“空表”的深度为1。</p>
</li>
<li><p>广义表可以为其他广义表<strong>共享</strong>，如：广义表B就共享了广义表A。在b中不必列出A的值，而是通过名称来引用，B=(A)</p>
</li>
<li><p>广义表可以是一个递归的表。如：F=（a,F=(a,(a,(a,…)))</p>
</li>
</ul>
<p>​               注意：递归表的深度是无穷值，长度是有限值，这里长度是2</p>
<ul>
<li>广义表是多层次结构，广义表的元素可以是单元素，也可以是子表，而子表的元素还可以是子表，….。<br>可以用图形象地表示。<br>例:D=(E，F）其中:E=(a, (b,c)）F=(d,(e))</li>
</ul>
<h4 id="3-广义表和线性表的区别"><a href="#3-广义表和线性表的区别" class="headerlink" title="3.广义表和线性表的区别"></a>3.广义表和线性表的区别</h4><ol>
<li>广义表可以看成是线性表的推广，线性表是广义表的特例。</li>
<li>广义表的结构相当灵活，在某种前提下，它可以兼容线性表、数组、树和有向图等各种常用的数据结构。</li>
<li>当二维数组的每行(或每列)作为子表处理时，二维数组即为一个广义表。</li>
<li>另外，树和有向图也可以用广义表来表示。</li>
<li>由于广义表不仅集中了线性表、数组、树和有向图等常见数据结构的特点，而且可有效地利用存储空间，因此在计算机的许多应用领域都有成功使用广义表的实例。</li>
</ol>
<h4 id="4-广义表的基本运算"><a href="#4-广义表的基本运算" class="headerlink" title="4.广义表的基本运算"></a>4.广义表的基本运算</h4><p> <img src="https://bu.dusays.com/2025/01/15/678793e83be46.png" alt></p>
<p>案例分析</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793eadac15.png" alt></p>
<p>代码实现</p>
<h2 id="七、树"><a href="#七、树" class="headerlink" title="七、树"></a>七、树</h2><h3 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1.树的定义"></a>1.树的定义</h3><p><img src="https://bu.dusays.com/2025/01/15/678793ec1da50.png" alt></p>
<h4 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h4><p><strong>树</strong>(Tree)是n (n≥0)个结点的有限集。(递归)<br>       若n =0，称为<strong>空树</strong>;<br>        若n &gt;0，则它满足如下两个条件:<br>              (1)<strong>有且仅有一个</strong>特定的称为<strong>根</strong>(Root)的结点;<br>              (2)<strong>其余结点</strong>可分为m (m≥0)个互不相交的<strong>有限集</strong>T1,T2,T3,…Tm，其中每一个集合本身又是一棵树，并称为根的<strong>子树</strong>(SubTree)。 </p>
<h4 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h4><p><strong>结点</strong>：数据元素以及指向树的分支</p>
<p><strong>根结点</strong>：非空树中无前驱点的结点</p>
<p><strong>结点的度</strong>：结点拥有的子树数</p>
<p>​    eg: A 3,B 2,F 0</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793ee926ad.png" alt></p>
<p><strong>树的度</strong>： 数内各结点的度的最大值</p>
<p><strong>叶子结点</strong>:终端结点（度为0）</p>
<p>​          eg: k L G M J</p>
<p><strong>分支结点</strong>:非终端结点</p>
<p>​            eg: B,C,D…</p>
<p><strong>内部结点</strong>:根节点以外的分支结点称为内部结点 </p>
<p><strong>孩子结点</strong>：结点的子树的根称为孩子</p>
<p><strong>双亲结点</strong>：孩子结点的前驱</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793ee926ad.png" alt></p>
<p>​       eg: BCD是A的孩子结点，A是bcd的双亲结点</p>
<p><strong>兄弟结点</strong>：同级的结点</p>
<p><strong>祖先结点</strong>：从根到该结点所经分支上的所有结点</p>
<p>​           eg: M的祖先结点为H,D,A</p>
<p><strong>子孙结点</strong>:从某结点为根的子树的任意结点</p>
<p>​          eg: D的孙子有HM</p>
<p><strong>树的深度</strong>：树中结点的最大层次</p>
<p><strong>有序树</strong>：树中的各子树从左至右有次序(最左边为第一个孩子)</p>
<p><strong>无序树</strong>：树中结点的各子树无次序</p>
<p><strong>森林</strong>：是m（m&gt;=0)棵互不相交的树的集合</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793efe3519.png" alt></p>
<p>​              树一定是森林，森林不一定是树</p>
<h4 id="树结构和线性结构的比较"><a href="#树结构和线性结构的比较" class="headerlink" title="树结构和线性结构的比较"></a>树结构和线性结构的比较</h4><p><img src="https://bu.dusays.com/2025/01/15/678793f14bdb5.png" alt></p>
<h3 id="2-二叉树的定义"><a href="#2-二叉树的定义" class="headerlink" title="2.二叉树的定义"></a>2.二叉树的定义</h3><p><img src="https://bu.dusays.com/2025/01/15/678793e5c621a.png" alt></p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​    二叉树是n(n&gt;=0)个结点的有限集，它或者是空集(n= 0),或者由一个根结点及两棵互不相交的分别称作这个根的左子树和右子树的二叉树组成。</p>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ol>
<li>每个结点最多有俩孩子(二叉树中不存在度大于2的结点)。</li>
<li>子树有左右之分，其次序不能颠倒。</li>
<li>二叉树可以是空集合，根可以有空的左子树或空的右子树。</li>
</ol>
<h4 id="树和二叉树区别"><a href="#树和二叉树区别" class="headerlink" title="树和二叉树区别"></a><strong>树和二叉树区别</strong></h4><ul>
<li>二叉树不是树的特殊情况，它们是两个概念</li>
<li>二叉树结点的子树要区分左子树和右子树，即使只有一棵子树也经行区分，说明它是左子树，还是右子树。</li>
<li>树当结点只有一个孩子时，就无须区分它是左还是右的次序。因此二者是不同的。这是二叉树与树的最主要的差别。</li>
<li>(也就是二叉树每个结点位置或者次序都是固定的，可以是空，但是个可以说它没有位置，而树的结点位置是相对于别的结点来说的，没有别的结点时.它就无所谓左右了)</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/678793f3454a1.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793f47ae50.png" alt></p>
<h3 id="3-案例引用"><a href="#3-案例引用" class="headerlink" title="3.案例引用"></a>3.案例引用</h3><p><img src="https://bu.dusays.com/2025/01/15/678793f5d89ac.png" alt></p>
<h3 id="4-树和二叉树的抽象数据类型定义"><a href="#4-树和二叉树的抽象数据类型定义" class="headerlink" title="4.树和二叉树的抽象数据类型定义"></a>4.树和二叉树的抽象数据类型定义</h3><p><img src="https://bu.dusays.com/2025/01/15/678793f728f2f.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793f8eefe9.png" alt></p>
<h3 id="5-二叉树的性质和存储结构"><a href="#5-二叉树的性质和存储结构" class="headerlink" title="5.二叉树的性质和存储结构"></a>5.二叉树的性质和存储结构</h3><h4 id="1-性质"><a href="#1-性质" class="headerlink" title="1.性质"></a>1.性质</h4><h5 id="满二叉树与完全二叉树"><a href="#满二叉树与完全二叉树" class="headerlink" title="满二叉树与完全二叉树"></a>满二叉树与完全二叉树</h5><p><strong>满二叉树</strong>：一颗深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>且有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.049ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2673.8 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(1173.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2173.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点的二叉树就叫满二叉树</p>
<p><strong>完全二叉树</strong>：深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>的具有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个结点的二叉树，当且仅当每一个结点都与深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>的<strong>满二叉树</strong>中的<strong>编号</strong>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="3.054ex" height="1.532ex" role="img" focusable="false" viewbox="0 -666 1350 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>的结点一一对应时，称为<strong>完全二叉树</strong>（叶子结点的编号是连续的,<strong>左侧树必须满元素</strong>)</p>
<ul>
<li>叶子只可能分布在层次最大的两层上，</li>
<li>对任意结点，如果其右子树的最大层次为i，则其左子树的最大层次必为i或i+1</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/678793fba882e.png" alt></p>
<h6 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h6><p>​      在二叉树的第i层上至多有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.915ex" height="1.887ex" role="img" focusable="false" viewbox="0 -833.9 1730.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>个结点</p>
<h6 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h6><p>​     深度为k的二叉树至多有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.049ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2673.8 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(1173.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2173.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点(k&gt;=1)</p>
<h6 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h6><p>​      对任何一个二叉树<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.309ex" height="1.871ex" role="img" focusable="false" viewbox="0 -677 1020.6 827"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container>,如果其叶子为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.375ex" role="img" focusable="false" viewbox="0 -442 1036.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>,度为2的结点为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.339ex" role="img" focusable="false" viewbox="0 -442 1036.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container>，\则<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="11.604ex" height="1.881ex" role="img" focusable="false" viewbox="0 -666 5129.1 831.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1314.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2370.1,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3628.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(4629.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793fa360f5.png" alt></p>
<p>​        eg:这里叶子结点7 8 9 10 11 12有6个,度为2的有1 2 3 4 5 有五个</p>
<p>总结点数n  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="20.578ex" height="1.846ex" role="img" focusable="false" viewbox="0 -666 9095.6 816"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(1933.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(2970.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(3542.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(4264.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(5264.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mi" transform="translate(6301.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(6873.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(7595.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(8595.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 又 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="16.941ex" height="1.694ex" role="img" focusable="false" viewbox="0 -583 7488.1 748.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(1933.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3192.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(4192.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(5451.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(6451.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container></p>
<p>总边个数B <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.989ex" height="1.731ex" role="img" focusable="false" viewbox="0 -683 4415 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2914.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(3915,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>  =  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="17.041ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 7532.1 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2092.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(3129.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(3701.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(4423.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(5423.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mi" transform="translate(6460.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(7032.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h6 id="性质4"><a href="#性质4" class="headerlink" title="性质4"></a>性质4</h6><p>具有n个结点的<strong>完全二叉树</strong>的深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="7.895ex" height="2.239ex" role="img" focusable="false" viewbox="0 -694 3489.7 989.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msubsup" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(510,-295.7) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1989.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2989.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h6 id="性质5"><a href="#性质5" class="headerlink" title="性质5"></a>性质5</h6><p>如果有一颗<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个结点的<strong>完全二叉树(</strong>深度为 [<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="8.524ex" height="2.366ex" role="img" focusable="false" viewbox="0 -750 3767.7 1045.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msubsup" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(510,-295.7) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1767.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2267.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3267.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>)的结点按层编号(从第1层到第[<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="8.524ex" height="2.366ex" role="img" focusable="false" viewbox="0 -750 3767.7 1045.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msubsup" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(510,-295.7) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1767.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2267.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3267.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>层，每层从左到右)，对<strong>任一结点i</strong>(1&lt;=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>&lt;=n),有</p>
<ol>
<li>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>=1，则结点i是二叉树的根，无双亲;如果i&gt;1，则其<strong>双亲是结点[i /2]。</strong></li>
<li>如果2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.155ex" height="1.586ex" role="img" focusable="false" viewbox="0 -661 2278.6 701"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(1678.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，则结点i为叶子结点，无左孩子;否则，<br>其<strong>左孩子是结点2i。</strong></li>
<li>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.183ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 4501 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1067.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2067.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2845.2,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(3901,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，则结点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>无右孩子;否则，其<strong>右孩</strong><br><strong>子是结点2i + 1。</strong></li>
</ol>
<p><strong>总结</strong>: 编号为i，他的父结点为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.043ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1345 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(345,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(845,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>,左结点为2i，右节点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.809ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2567.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1067.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2067.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h4 id="2-存储结构"><a href="#2-存储结构" class="headerlink" title="2.存储结构"></a>2.存储结构</h4><p><img src="https://bu.dusays.com/2025/01/15/678793f16773a.png" alt></p>
<h5 id="1-二叉树的顺序存储结构"><a href="#1-二叉树的顺序存储结构" class="headerlink" title="1.二叉树的顺序存储结构"></a>1.二叉树的顺序存储结构</h5><ul>
<li><p>实现：按满二叉树的结点层次编号，依次存放在二叉树的数据元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXTSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> SqBiTree[MAXTSIZE];</span><br><span class="line">SqBiTree bt;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/678793f96d783.png" alt></p>
</li>
<li><p>缺点： <img src="https://bu.dusays.com/2025/01/15/678793faa55fc.png" alt></p>
<p>结点间的关系蕴含在其存储位置中，浪费空间，适合满二叉树和完全二叉树</p>
</li>
</ul>
<h5 id="2-二叉树的链式存储结构"><a href="#2-二叉树的链式存储结构" class="headerlink" title="2.二叉树的链式存储结构"></a>2.二叉树的链式存储结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> *<span class="title">lchild</span>,*<span class="title">rchile</span>;</span><span class="comment">//左右孩子</span></span><br><span class="line">}BiNode,*BiTree;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/678793fbdd8c3.png" alt></p>
<p>在n个结点的二叉链表中，有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个空指针域</p>
<p>必有2n个链域，除根节点外，每个结点有且仅有一个双亲，所有只会有n-1个结点的链域存放指针，指向非空子女结点</p>
<h5 id="3-三叉链表"><a href="#3-三叉链表" class="headerlink" title="3.三叉链表"></a>3.三叉链表</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TriTNode</span>{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TriTNode</span> *<span class="title">Ichild</span>,*<span class="title">parent</span>,*<span class="title">rchild</span>;</span><span class="comment">//指向双亲结点</span></span><br><span class="line">}TriTNode,*TriTree;</span><br></pre></td></tr></table></figure>
<h4 id="3-遍历二叉树和线索二叉树"><a href="#3-遍历二叉树和线索二叉树" class="headerlink" title="3.遍历二叉树和线索二叉树"></a>3.遍历二叉树和线索二叉树</h4><h5 id="1-类型"><a href="#1-类型" class="headerlink" title="1.类型"></a>1.类型</h5><p>先序遍历：根左右</p>
<p>中序遍历：左根右</p>
<p>后续遍历：左右根</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793fd73789.png" alt>       </p>
<h6 id="先—根左右"><a href="#先—根左右" class="headerlink" title="先—根左右"></a>先—根左右</h6><p><img src="https://bu.dusays.com/2025/01/15/678793ff4435f.png" alt></p>
<p>ABELDHMIJ</p>
<h6 id="中—左根右"><a href="#中—左根右" class="headerlink" title="中—左根右"></a>中—左根右</h6><p><img src="https://bu.dusays.com/2025/01/15/6787940079abe.png" alt></p>
<p>ELBAMHIDJ</p>
<h6 id="后—左右根"><a href="#后—左右根" class="headerlink" title="后—左右根"></a>后—左右根</h6><p><img src="https://bu.dusays.com/2025/01/15/67879401b3d88.png" alt></p>
<p>LEBMIHJDA </p>
<p>实例：</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793b295ce2.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678793f789feb.png" alt></p>
<h5 id="2-根据遍历序列确定二叉树（先-中-后序）"><a href="#2-根据遍历序列确定二叉树（先-中-后序）" class="headerlink" title="2.根据遍历序列确定二叉树（先 中 后序）"></a>2.根据遍历序列确定二叉树（先 中 后序）</h5><ul>
<li><p>若二叉树中的各结点均不相同，则二叉树结点的先徐序列、中序序列和后序序列都是唯一的</p>
</li>
<li><p>由二叉树的先序和中序序列，或由二叉树的后序和中序序列可以确定唯一一颗二叉树</p>
</li>
</ul>
<h6 id="实例1：先序-中序"><a href="#实例1：先序-中序" class="headerlink" title="实例1：先序+中序"></a>实例1：先序+中序</h6><p>先：A B C D E F G H I</p>
<p>中：C D B F E A I H G J</p>
<p>解题思路</p>
<ol>
<li><p>由先知A必为根，B必为左   由中知 CDBFE在左部，IHGJ在右边</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793ff8cfa7.png" alt></p>
</li>
<li><p>由先序知道B为根，由中序知道CD为左子树，FE为右子树</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879400a8d73.png" alt></p>
</li>
<li><p>由先序知道G是根，那么I H为左子树，J为右子树</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879401ea578.png" alt></p>
</li>
<li><p>由中序CD左根右知道，c为左，d为右，先序知道E为根，中序知道F为左</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879403211f7.png" alt></p>
</li>
<li><p>由中序知道I为左子树</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879404469d0.png" alt></p>
</li>
</ol>
<h6 id="实例2—中序-后续"><a href="#实例2—中序-后续" class="headerlink" title="实例2—中序+后续"></a>实例2—中序+后续</h6><ol>
<li>中序序列:BDCEAFHG</li>
<li>后序序列:DECBHGFA</li>
<li>由中序后续知道根为A，BDCE为左根 FHG为右根</li>
<li>后序知道B为根，中序推出没有左根，c为下一个根</li>
<li>左右根D为左，E为右边</li>
<li>后序知道F为根</li>
<li>由中序知道F没有左，那么H为左，G为根</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/678794060d8ea.png" alt></p>
<h5 id="3-遍历的算法实现-先序遍历"><a href="#3-遍历的算法实现-先序遍历" class="headerlink" title="3.遍历的算法实现-先序遍历"></a>3.遍历的算法实现-先序遍历</h5><p><img src="https://bu.dusays.com/2025/01/15/6787940838536.png" alt></p>
<h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">PerOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//指向根节点的指针T</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,T-&gt;data);</span><br><span class="line">        <span class="comment">// visit(T)</span></span><br><span class="line">        PerOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PerOrderTraverse(T-&gt;rchile);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h6 id="递归代码解释"><a href="#递归代码解释" class="headerlink" title="递归代码解释"></a>递归代码解释</h6><ol>
<li><p>首先进入函数，此时T为传入的根结点</p>
</li>
<li><p>打印根节点</p>
</li>
<li><p>第一次调用：<strong>根左右</strong>函数指向根B</p>
</li>
<li><p>进入第二层循环 遍历左，左为空此时返回</p>
</li>
<li><p>回到第二层循环此时 PerOrderTraverse(T-&gt;lchild);为空，那么自动执行下一条语句PerOrderTraverse(T-&gt;rchile);</p>
</li>
<li><p>进入循环，执行到D</p>
</li>
<li><p>再向下执行为空返回到第一次循环</p>
</li>
<li><p>再执行C</p>
<p><img src="https://bu.dusays.com/2025/01/15/678793fe73288.png" alt></p>
</li>
</ol>
<p>(●ˇ∀ˇ●)明白了吗！</p>
<h5 id="4-遍历的算法实现-中序遍历"><a href="#4-遍历的算法实现-中序遍历" class="headerlink" title="4.遍历的算法实现-中序遍历"></a>4.遍历的算法实现-中序遍历</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">PerOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//指向根节点的指针T</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>){</span><br><span class="line">       </span><br><span class="line">        PerOrderTraverse(T-&gt;lchild);</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,T-&gt;data);<span class="comment">//可替换(访问根节点)</span></span><br><span class="line">        <span class="comment">// visit(T)</span></span><br><span class="line">        PerOrderTraverse(T-&gt;rchile);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="5-历的算法实现-后序遍历"><a href="#5-历的算法实现-后序遍历" class="headerlink" title="5.历的算法实现-后序遍历"></a>5.历的算法实现-后序遍历</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">PerOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//指向根节点的指针T</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>){</span><br><span class="line">       </span><br><span class="line">        PerOrderTraverse(T-&gt;lchild);</span><br><span class="line">         </span><br><span class="line">        PerOrderTraverse(T-&gt;rchile);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,T-&gt;data);<span class="comment">//可替换(访问根节点)</span></span><br><span class="line">        <span class="comment">// visit(T)</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="6-二叉树遍历小总结"><a href="#6-二叉树遍历小总结" class="headerlink" title="6.二叉树遍历小总结"></a>6.二叉树遍历小总结</h5><p><img src="https://bu.dusays.com/2025/01/15/6787940737cbf.png" alt></p>
<p>时间复杂度O(n)//每个结点只访问一次</p>
<p>空间复杂度O(n)//栈占用的最大辅助空间</p>
<h5 id="7-中序遍历非递归算法-栈"><a href="#7-中序遍历非递归算法-栈" class="headerlink" title="7.中序遍历非递归算法-栈"></a>7.中序遍历非递归算法-栈</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraverse</span><span class="params">(BiTree T)</span>{</span><br><span class="line">    BiTree P;</span><br><span class="line">    InitStack(S);<span class="comment">//初始化</span></span><br><span class="line">    P=T;</span><br><span class="line">    <span class="keyword">while</span> (p||StackEmpty(S))<span class="comment">//遇到的是根的时候</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(P)<span class="comment">//不为空</span></span><br><span class="line">        {</span><br><span class="line">            Push(S,p);<span class="comment">//入栈</span></span><br><span class="line">            p=p-&gt;Ichild;<span class="comment">//访问左子树</span></span><br><span class="line">        } <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            Pop(S,q);<span class="comment">//出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,q-&gt;data);<span class="comment">//输出根</span></span><br><span class="line">            p=q-&gt;rchild;</span><br><span class="line">        }<span class="comment">//while</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="8-二叉树的层次遍历"><a href="#8-二叉树的层次遍历" class="headerlink" title="8.二叉树的层次遍历"></a>8.二叉树的层次遍历</h5><p><img src="https://bu.dusays.com/2025/01/15/6787940947692.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787940a797fa.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">    BTNode data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> front,rar;</span><br><span class="line">    </span><br><span class="line">}SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BTNode *b)</span></span><br><span class="line">{</span><br><span class="line">    BTNode *p;</span><br><span class="line">    SqQueue *qu;</span><br><span class="line">    initQueue(qu);<span class="comment">//初始化</span></span><br><span class="line">    enQuenue(qu,b);<span class="comment">//根节点指针进入队列</span></span><br><span class="line">    <span class="keyword">while</span>(!QueueEmpty(qu)){<span class="comment">//队不为空则循环</span></span><br><span class="line">        deQueue(qu,p);<span class="comment">//出栈结点p</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);访问结点p</span><br><span class="line">        <span class="title function_">if</span><span class="params">(p-&gt;Ichild!=<span class="literal">NULL</span>)</span><span class="title function_">enQueue</span><span class="params">(qu,p-&gt;Ichild)</span>;<span class="comment">//有左孩子时将其进队</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)enqueue(qu,p-&gt;rchild);<span class="comment">//有右孩子时将其进队</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="9-二叉树遍历算法的应用"><a href="#9-二叉树遍历算法的应用" class="headerlink" title="9.二叉树遍历算法的应用"></a>9.二叉树遍历算法的应用</h5><h6 id="1-二叉树的建立"><a href="#1-二叉树的建立" class="headerlink" title="1.二叉树的建立"></a>1.二叉树的建立</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(&amp;ch);</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">"#"</span>) T=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">if</span>(!(T=(BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))))</span><br><span class="line">        <span class="built_in">exit</span>(OVRTFLOW);</span><br><span class="line">    T-&gt;data=ch;<span class="comment">//生成根节点</span></span><br><span class="line"></span><br><span class="line">CreateBiTree(T-&gt;Ichild);<span class="comment">//构造左子树</span></span><br><span class="line"></span><br><span class="line">CreateBiTree(T-&gt;rchild);<span class="comment">//构造右子树</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}<span class="comment">//CreateBiTree</span></span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787940bb6eaf.png" alt></p>
<h6 id="2-复制二叉树"><a href="#2-复制二叉树" class="headerlink" title="2.复制二叉树"></a>2.复制二叉树</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Copy</span><span class="params">(BiTree T,BiTree &amp;newT)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line">        NewT=<span class="literal">NULL</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">        NewT=new BiTNode;</span><br><span class="line">        NewT-&gt;data=T-&gt;data;</span><br><span class="line"></span><br><span class="line">        Copy(T-&gt;lchild,NewT-&gt;lchild);</span><br><span class="line">        Copy(T-&gt;rchild,NewT-&gt;rchild);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h6 id="3-计算二叉树的深度"><a href="#3-计算二叉树的深度" class="headerlink" title="3.计算二叉树的深度"></a>3.计算二叉树的深度</h6><ul>
<li><p>如果是空树，则深度为0</p>
</li>
<li><p>否则，递归计算左子树的深度计为m，递归计算右子树的深度计为n，二叉树的深度则为m与n的较大者<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Depth</span><span class="params">(BiTree T)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        m= Depth(T-&gt;lchild);</span><br><span class="line">        n= Depth(T-&gt;rchile);</span><br><span class="line">        <span class="keyword">if</span>(m&gt;n)<span class="keyword">return</span> (m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (n+<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="4-计算二叉树的结点总数"><a href="#4-计算二叉树的结点总数" class="headerlink" title="4.计算二叉树的结点总数"></a>4.计算二叉树的结点总数</h6><ul>
<li>如果为空树则结点为0</li>
<li>否则，结点个数为左子树个数+右子树结点个数再+1</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">NodeCount</span><span class="params">(Bitree T)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> NodeCount(T-&gt;lchild)+ NodeCount(T-&gt;rchild)+<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h6 id="5-计算叶子结点的个数"><a href="#5-计算叶子结点的个数" class="headerlink" title="5.计算叶子结点的个数"></a>5.计算叶子结点的个数</h6><ul>
<li>如果是空树返回0</li>
<li>否则，为左子树的叶子结点+右子树的叶子结点</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LeafCount</span><span class="params">(BiTree T)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)<span class="comment">//空树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;rchile==<span class="literal">NULL</span>)<span class="comment">//如果是叶子结点返回1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> LeafCount(T-&gt;lchild)+leafCount(T-&gt;rchile);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="10-线索二叉树"><a href="#10-线索二叉树" class="headerlink" title="10.线索二叉树"></a>10.线索二叉树</h5><ul>
<li>如果某个结点的左孩子为空，则将空的左孩子指针域改为<strong>指向其前驱</strong>；</li>
<li>如果某孩子的右结点为空，则将空的右孩子的指针域改为<strong>指向其后继</strong>；</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/6787940e8ceda.png" alt></p>
<p>这里是依照遍历来判断前驱后继，而不是图</p>
<h6 id="1-定义-3"><a href="#1-定义-3" class="headerlink" title="1.定义"></a>1.定义</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThNode</span>{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="type">int</span> ltag,rtag;<span class="comment">//0表示是左/右孩子，1表示是前/后继</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiThNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    </span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787940fee958.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678794113afb7.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678794055bd17.png" alt></p>
<hr>
<h6 id="2-线索二叉树画法"><a href="#2-线索二叉树画法" class="headerlink" title="2.线索二叉树画法"></a>2.线索二叉树画法</h6><p><img src="https://bu.dusays.com/2025/01/15/6787940f274bd.png" alt></p>
<h6 id="3-遍历算法"><a href="#3-遍历算法" class="headerlink" title="3.遍历算法"></a>3.遍历算法</h6><p>408不要求掌握</p>
<h5 id="11-李阳的交换左右子树"><a href="#11-李阳的交换左右子树" class="headerlink" title="11.李阳的交换左右子树"></a>11.李阳的交换左右子树</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 李阳 on 2024/11/14.树的交换左右子树</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>{</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line"></span><br><span class="line">}TreeNode;</span><br><span class="line"></span><br><span class="line">TreeNode * <span class="title function_">creatNode</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    TreeNode * newNode=(TreeNode*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"失败的树 "</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    newNode-&gt;val=val;</span><br><span class="line">    newNode-&gt;left=<span class="literal">NULL</span>;</span><br><span class="line">    newNode-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换左右子树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swaplr</span><span class="params">(TreeNode * root)</span>{</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    TreeNode * temp=root-&gt;left;</span><br><span class="line">    root-&gt;left=root-&gt;right;</span><br><span class="line">    root-&gt;right=temp;</span><br><span class="line">    swaplr(root-&gt;left);<span class="comment">//交换左半树</span></span><br><span class="line">    swaplr(root-&gt;right);<span class="comment">//右半边树</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历打印二叉树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode*root)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;val);</span><br><span class="line">    preOrderTraversal(root-&gt;left);</span><br><span class="line">    preOrderTraversal(root-&gt;right);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放二叉树内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTree</span><span class="params">(TreeNode* root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    freeTree(root-&gt;left);</span><br><span class="line">    freeTree(root-&gt;right);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    TreeNode * root=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建一个简单的二叉树</span></span><br><span class="line">    <span class="comment">//       1</span></span><br><span class="line">    <span class="comment">//      / \</span></span><br><span class="line"><span class="comment">    //     2   3</span></span><br><span class="line">    <span class="comment">//    / \</span></span><br><span class="line"><span class="comment">    //   4   5</span></span><br><span class="line"></span><br><span class="line">    root= creatNode(<span class="number">1</span>);</span><br><span class="line">    root-&gt;left = creatNode(<span class="number">2</span>);</span><br><span class="line">    root-&gt;right = creatNode(<span class="number">3</span>);</span><br><span class="line">    root-&gt;left-&gt;left = creatNode(<span class="number">4</span>);</span><br><span class="line">    root-&gt;left-&gt;right = creatNode(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    preOrderTraversal(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    swaplr(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Pre-order traversal after swapping:\n"</span>);</span><br><span class="line">    preOrderTraversal(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    freeTree(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="6-树和森林"><a href="#6-树和森林" class="headerlink" title="6.树和森林"></a>6.树和森林</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">408要求</span><br><span class="line">2森林与二叉树的转换</span><br><span class="line">3树和森林的遍历</span><br></pre></td></tr></table></figure>
<h4 id="1-定义-4"><a href="#1-定义-4" class="headerlink" title="1.定义"></a>1.定义</h4><p><strong>森林</strong>：是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.642ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5145.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1267,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2422.8,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g><g data-mml-node="mn" transform="translate(4256.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(4756.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>棵互不相交的树的集合</p>
<h4 id="2-双亲表示法"><a href="#2-双亲表示法" class="headerlink" title="2.双亲表示法"></a>2.双亲表示法</h4><ul>
<li><p><strong>实现</strong>：定义结构数组</p>
<p>​            存放树的结点</p>
<p>​             每个结点含两个域</p>
</li>
<li><p><strong>数据域</strong>：存放结点本身信息</p>
</li>
<li><p><strong>双亲域</strong>：指示本结点的双亲结点在数组中的位置</p>
</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67879410bb21f.png" alt></p>
<p><strong>特点</strong>：找双亲容易，找孩子难</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span>{</span><span class="comment">//树的结点定义</span></span><br><span class="line">    TElemType data;<span class="comment">//数据元素</span></span><br><span class="line">    <span class="type">int</span> parent;<span class="comment">//双亲位置域</span></span><br><span class="line">}PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span><span class="comment">//树的类型定义</span></span><br><span class="line">    PTNode nodes[MAXTSIZE];<span class="comment">//双亲表示</span></span><br><span class="line">    <span class="type">int</span> n,r;<span class="comment">//节点数,根节点位置</span></span><br><span class="line">}PTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-孩子链表"><a href="#3-孩子链表" class="headerlink" title="3.孩子链表"></a>3.孩子链表</h4><p>把每个结点的孩子结点排列起来，看成是一个线性表， 用单链表存储，则n个结点有n个孩子链表(叶子的孩子链表为空表)。而n个头指针又组成一个线性表，用顺序表(含n个元素的结构数组)存储。</p>
<p><strong>解释</strong>：每个结点都有一个单链表，叶子节点的单链表是空表，然后再将这些链表的头指针存放在数组中</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879412467ec.png" alt></p>
<p>孩子结点结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>{</span></span><br><span class="line">    <span class="type">int</span> child;<span class="comment">//整数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">next</span>;</span><span class="comment">//下一个孩子的地址</span></span><br><span class="line">}* ChildPrt;</span><br></pre></td></tr></table></figure>
<p>双亲结点结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    TElemType data;<span class="comment">//数据元素</span></span><br><span class="line">    ChildPrt firstchild;<span class="comment">//孩子链表头指针</span></span><br><span class="line">}CTBox;</span><br></pre></td></tr></table></figure>
<p>树结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    CTBox nodes[MAXTSIZE];<span class="comment">//头指针数组</span></span><br><span class="line">    <span class="type">int</span> n,r;<span class="comment">//节点数和根节点位置下标</span></span><br><span class="line">}CTree;</span><br></pre></td></tr></table></figure>
<p><strong>特点</strong>:找孩子容易，找双亲难</p>
<h4 id="4-孩子兄弟表示法（二叉树表示法，二叉链表表示法）"><a href="#4-孩子兄弟表示法（二叉树表示法，二叉链表表示法）" class="headerlink" title="4.*孩子兄弟表示法（二叉树表示法，二叉链表表示法）"></a>4.*孩子兄弟表示法（二叉树表示法，二叉链表表示法）</h4><h5 id="1-定义-5"><a href="#1-定义-5" class="headerlink" title="1.定义"></a>1.定义</h5><p><strong>实现</strong>：用二叉链表作树的存储结构，链表中的美观结点的指针域分别指向其<strong>第一个孩子节点</strong>和<strong>下一个兄弟节点</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>{</span></span><br><span class="line">    ELemtype data;<span class="comment">//元素类型 数据元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>,*<span class="title">nextsibling</span>;</span><span class="comment">//第一个孩子，下一个兄弟</span></span><br><span class="line">}CSNode,*CSTree;</span><br></pre></td></tr></table></figure>
<p>左孩子 右兄弟，是兄弟的就来砍我</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794137fe5d.png" alt></p>
<p>特点：找孩子，找兄弟简单，找双亲难</p>
<h4 id="5-树与二叉树的转换"><a href="#5-树与二叉树的转换" class="headerlink" title="5.*树与二叉树的转换"></a>5.*树与二叉树的转换</h4><h5 id="1-定义-6"><a href="#1-定义-6" class="headerlink" title="1.定义"></a>1.定义</h5><ul>
<li>将树转化为二叉树，利用二叉树的算法实现对树的操作</li>
<li>由于树和二叉树都可以用二叉链表作存储结构，则以二叉树链表作媒介可以导出树与二叉树之间的对应关系</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67879414bfc3e.png" alt></p>
<h5 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h5><h6 id="1-将树转为二叉树"><a href="#1-将树转为二叉树" class="headerlink" title="1.将树转为二叉树"></a>1.将树转为二叉树</h6><ol>
<li><p>加线:在兄弟之间加一连线</p>
</li>
<li><p>抹线:对每个结点，除了其左孩子外，去除其与其余孩子之间的关系</p>
</li>
<li>旋转:以树的根结点为轴心，将整树顺时针转45°</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/6787941618c4c.png" alt></p>
<h6 id="2-将二叉树转为树"><a href="#2-将二叉树转为树" class="headerlink" title="2.将二叉树转为树"></a>2.将二叉树转为树</h6><ol>
<li>加线:若p结点是双亲结点的左孩子，则将p的右孩子，右孩子的右孩….沿分支找到的所有右孩子，都与p的双亲用线连起来</li>
<li>抹线:抹掉原二叉树中双亲与右孩子之间的连线</li>
<li>调整:将结点按层次排列，形成树结构</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/6787941753ecd.png" alt></p>
<h4 id="6-森林和二叉树的转换（二叉树与多棵树之间的关系"><a href="#6-森林和二叉树的转换（二叉树与多棵树之间的关系" class="headerlink" title="6.*森林和二叉树的转换（二叉树与多棵树之间的关系)"></a>6.*森林和二叉树的转换（二叉树与多棵树之间的关系)</h4><h5 id="1-森林转化为二叉树"><a href="#1-森林转化为二叉树" class="headerlink" title="1.森林转化为二叉树"></a>1.森林转化为二叉树</h5><ol>
<li><p>将各棵树分别转换成二叉树</p>
</li>
<li><p>将每棵树的根结点用线相连</p>
</li>
<li><p>以第一棵树根结点为二叉树的根，再以根结点为轴心，顺时针旋转，构成二叉树型结构</p>
</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/67879418b7625.png" alt></p>
<h5 id="2-二叉树转为森林"><a href="#2-二叉树转为森林" class="headerlink" title="2.二叉树转为森林"></a>2.二叉树转为森林</h5><ol>
<li><p>抹线:将二叉树中根结点与其右孩子连线，及沿右分支搜索到的所有右孩子间连线全部抹掉，使之变成孤立的二又树（去掉全部右孩线）</p>
</li>
<li><p>还原:将孤立的二又树还原成树（孤立二叉再还原)</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879419ef799.png" alt></p>
</li>
</ol>
<h4 id="7-树与森林的遍历"><a href="#7-树与森林的遍历" class="headerlink" title="7.树与森林的遍历"></a>7.树与森林的遍历</h4><h5 id="1-树的遍历的三种方式-先根（次序-，后根，层次遍历"><a href="#1-树的遍历的三种方式-先根（次序-，后根，层次遍历" class="headerlink" title="1.树的遍历的三种方式{先根（次序)，后根，层次遍历}"></a>1.树的遍历的三种方式{先根（次序)，后根，层次遍历}</h5><ul>
<li><p>先根遍历（次序）</p>
<p>​           若树不空，则先访问根结点，然后依次先根遍历各棵子树</p>
</li>
<li><p>后根遍历（次序）</p>
<p>​          若树不空，则先依次后根遍历各棵子树，然后访问根结点</p>
</li>
<li><p>层次遍历</p>
<p>​          若树不空，则至上而下自左至右访问树的每个结点</p>
</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/6787941cd46df.png" alt></p>
<h5 id="2-森林的遍历"><a href="#2-森林的遍历" class="headerlink" title="2.森林的遍历"></a>2.森林的遍历</h5><p>将森林看作3部分构成</p>
<ol>
<li>森林中第一棵树的根结点;</li>
<li>森林中第一棵树的子树森林，</li>
<li>森林中其它树构成的森林。</li>
</ol>
<h6 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1.先序遍历"></a>1.先序遍历</h6><p>若森林不空 则：</p>
<ol>
<li>访问森林中第一棵树的<strong>根结点;</strong></li>
<li><strong>先序遍历</strong>森林中第一棵树的子树森林;</li>
<li><strong>先序遍历</strong>森林中(除第一棵树之外)其余树构成的森林。</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/678794219b79f.png" alt></p>
<h6 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2.中序遍历"></a>2.中序遍历</h6><p>若森林不空，则</p>
<p>​    1.<strong>中序遍历</strong>森林中第一棵树的子树森林;</p>
<p>​     2.访问森林中第一棵树的<strong>根结点;</strong></p>
<p>​     3.<strong>中序遍历</strong>森林中(除第一棵树之外)其余树构成的森林。</p>
<p>对应：213</p>
<h6 id="3-小案例"><a href="#3-小案例" class="headerlink" title="3.小案例"></a>3.小案例</h6><p><img src="https://bu.dusays.com/2025/01/15/6787940cc49c2.png" alt></p>
<h3 id="7-哈夫曼树及其应用"><a href="#7-哈夫曼树及其应用" class="headerlink" title="7.*哈夫曼树及其应用"></a>7.*哈夫曼树及其应用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">408要求：</span><br><span class="line">1．哈夫曼（Huffman）树和哈夫曼编码</span><br><span class="line"></span><br><span class="line">2．并查集及其应用</span><br><span class="line"></span><br><span class="line">3．堆及其应用（25新增）</span><br></pre></td></tr></table></figure>
<h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p><strong>路径</strong>：从树中的一个结点到另一个结点之间的分支构成这两个结点间的路径</p>
<p><strong>结点路径的长度</strong>:两结点间的路径上的分支数</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794168d823.png" alt></p>
<p><strong>树的路径长度</strong>：从树根到每一个结点的路径长度之和，记作TL</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787941811996.png" alt></p>
<p>结点数目相同的二叉树中，完全二叉树是路径长度最短的二叉树</p>
<p><strong>权</strong>：将树中结点赋给一个有着某种含义的数值，则这个数值称为该<strong>结点的权</strong></p>
<p><strong>结点的带权路径长度</strong>：从<strong>根节点</strong>到该结点之间的<strong>路径长度</strong>与该结点的<strong>权</strong>的<strong>乘积</strong></p>
<p><strong>树的带权的路径长度</strong>：树中的所有<strong>叶子</strong>结点<strong>带权路径长度之和</strong>(WPL)</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787941979edb.png" alt></p>
<p><strong>最优树</strong>：带权路径最短的树（最优树）度要相同</p>
<p><strong>最优二叉树</strong>：带权路径长度(WPL)最短的二叉树</p>
<p> 满二叉树不一定是哈夫曼树</p>
<p>具有相同带权结点的哈夫曼树不唯一</p>
<p><strong>贪心算法</strong>：构造哈夫曼树时首先选择权最小的叶子结点</p>
<h4 id="2-哈夫曼算法"><a href="#2-哈夫曼算法" class="headerlink" title="2.哈夫曼算法"></a>2.哈夫曼算法</h4><h5 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h5><ol>
<li><p>根据<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个给定的权值<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.571ex" height="1.984ex" role="img" focusable="false" viewbox="0 -683 6440.4 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mn" transform="translate(977,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1380.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1825.2,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mn" transform="translate(977,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3205.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(3650.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="msub" transform="translate(4989.1,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container>构成的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>棵二叉树的森林<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="16.839ex" height="1.977ex" role="img" focusable="false" viewbox="0 -680 7442.9 874"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mo" transform="translate(1026.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2082.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1020.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1465.2,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2485.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2930.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="msub" transform="translate(4269.1,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container>,其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.889ex" role="img" focusable="false" viewbox="0 -677 911 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>只有一个带权为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.875ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 1271 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>的根节点</p>
<p>​    构造森林全是根</p>
</li>
<li><p>在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewbox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g></g></g></svg></mjx-container>中选取两棵根结点的权值最小的树作为左右子树，构造一棵新的二叉树，且设置新的二叉树的根结点的权值为其左右子树上根结点的权值之和。</p>
<p>​           选用两小造新树</p>
</li>
<li><p>在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewbox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g></g></g></svg></mjx-container>中删除这两棵树，同时将新得到的二叉校加入森林中。·</p>
</li>
</ol>
<p>​             删除两小添新人</p>
<p>​    4. 重复2，3剩单根</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787941c36cdb.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/6787941f33a5b.png" alt></p>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><ol>
<li>哈夫曼树的结点只有度为0或2的没有度为1的结点</li>
<li>包含n各叶子结点的哈夫曼树共有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.386ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2822.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1322.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2322.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点</li>
<li>包含n棵树的森林要经过n-1次合并才能形成哈夫曼树，共产生n-1个新结点</li>
<li>在哈夫曼算法中，初始时有n棵二叉树，要经过n-1次合并最终形成哈夫曼树。</li>
<li>经过n-1次合并产生n-1个新结点，且这n-1个新结点都是具有两个孩子的分支结点。</li>
<li>可见:哈夫曼树中共有n+n-1 = 2n-1个结点，且其所有的分支结点的度均不为1。</li>
</ol>
<h5 id="2-哈夫曼树的算法"><a href="#2-哈夫曼树的算法" class="headerlink" title="2.哈夫曼树的算法"></a>2.哈夫曼树的算法</h5><h6 id="顺序结构（一维数组）"><a href="#顺序结构（一维数组）" class="headerlink" title="顺序结构（一维数组）"></a>顺序结构（一维数组）</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> weight;<span class="comment">//权值</span></span><br><span class="line">    <span class="type">int</span> parent,lch,rch;<span class="comment">//双亲，左孩子，右孩子</span></span><br><span class="line">}HTNode,*HUffmanTree;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/67879422dbcff.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreatHuffmanTree</span> <span class="params">(HuffmanTree &amp;HT, <span class="type">int</span> n)</span>{<span class="comment">//构造哈夫曼树——哈夫曼算法</span></span><br><span class="line">    <span class="type">int</span> m,i;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    m=<span class="number">2</span>*n<span class="number">-1</span>;<span class="comment">//数组共2n-1个元素</span></span><br><span class="line">    HT=new HTNode[m+<span class="number">1</span>];<span class="comment">//0号单元未用，HT[m]表示根结点</span></span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i){<span class="comment">//将2n-1个元素的Ich、rch、parent置为O</span></span><br><span class="line">    HT[i].lch=<span class="number">0</span>; HT[i].rch=<span class="number">0</span>; HT[i].parent=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">cin</span>&gt;&gt;HT[i].weight;<span class="comment">//输入前n个元素的weight值</span></span><br><span class="line"><span class="comment">// 初始化结束，下面开始建立哈夫曼树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( i=n+<span class="number">1</span>;i&lt;=m; i++){<span class="comment">//合并产生n-1个结点——构造Huffman树</span></span><br><span class="line">     Select(HT, i<span class="number">-1</span>,s1,s2);<span class="comment">//在HT[k](1≤ksi-1)中选择两个其双亲域为0，</span></span><br><span class="line">                           <span class="comment">//且权值最小的结点,并返回它们在HT中的序号s1和s2</span></span><br><span class="line">HT[s1].parent=i; HT[s2] .parent=i;<span class="comment">//表示从F中删除s1,s2</span></span><br><span class="line">HT[i].llch=s1;HT[i].rch=s2;<span class="comment">//s1,s2分别作为i的左右孩子</span></span><br><span class="line">HT[i].weight=HT[s1].weight + HT[s2].weight;<span class="comment">//i的权值为左右孩子权值之和</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<ol>
<li>初始化HT[1…….2n-1]: lch=rch=parent=0</li>
<li>输入初始n个叶子结点:置HT[1…..n]的weight值;</li>
<li>进行以下n-1次合并，依次产生n-1个结点HT[i], i=n+1…..2n-1:</li>
</ol>
<ul>
<li>a)在HT[1..i-1]中选两个未被选过(从parent ==0的结点中选)的weight最小的两个结点HT[s1]和HT[s2], s1、s2为两个最小结点下标;</li>
<li>b)修改HT[s1]和HT[s2]的parent的值：HT[s1].parent=i;HT[s2].parent=i;</li>
<li>c)修改新产生的HT[i]:<br>.HT[i].weight=HT[s1].weight + HT[s2].weight;. HT[i]. Ich=s1; HT[i]. rch=s2;</li>
</ul>
<h4 id="3-哈夫曼编码"><a href="#3-哈夫曼编码" class="headerlink" title="3.哈夫曼编码"></a>3.哈夫曼编码</h4><p>前缀编码：任意一字符不是另一个字符的前缀</p>
<h5 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h5><p>1、统计字符集中每个字符在电文中出现的平均概率 (概率越大，<br>要求编码越短)。<br>2、利用哈夫曼树的特点:权越大的叶子离根越近;将每个字符的概率值作为权值，构造哈夫曼树。则概率越大的结点，路径越短。<br>3、在哈夫曼树的每个分支上标上O或1:<br>    结点的左分支标0，右分支标1<br>    把从根到每个吐子的路径上的标号连接起来，作为该叶子代表的字符的编码。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942485bbc.png" alt></p>
<p><img src="https://bu.dusays.com/2025/01/15/678794150563d.png" alt></p>
<p> 左分支标记0，右分支标记1</p>
<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><p>1.为什么哈夫曼编码能够保证是前缀编码?</p>
<p>因为没有一片树叶是另一片树叶的祖先，所以每个叶结点的编码就不可能是其它叶结点编码的前缀</p>
<p>2.为什么哈夫曼编码能够保证字符编码总长最短?<br>因为哈夫曼树的带权路径长度最短，故字符编码的总长最短。</p>
<p><strong>性质</strong>1：哈夫曼编码是前缀编码</p>
<p><strong>性质</strong>2：哈夫曼编码是最优前缀码</p>
<h5 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreatHuffmanCode</span><span class="params">(HuffmanTree HT, HuffmanCode &amp; HC, <span class="type">int</span> n)</span>{</span><br><span class="line">    <span class="comment">//从叶子到根逆向求每个字符的哈夫曼编码，存储在编码表HC中</span></span><br><span class="line">    <span class="type">int</span> i,cd,start;</span><br><span class="line">    HC=new <span class="type">char</span> *[n+<span class="number">1</span>];<span class="comment">//分配n个字符编码的头指针矢量</span></span><br><span class="line"></span><br><span class="line">    cd=new <span class="type">char</span> [n];<span class="comment">//分配临时存放编码的动态数组空间</span></span><br><span class="line"></span><br><span class="line">    cd[n<span class="number">-1</span>]=<span class="string">'\0’;//编码结束符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for(i=1; i&lt;=n; ++i){//逐个字符求哈夫曼编码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    start=n-1; c=i; f=HT[i].parent;</span></span><br><span class="line"><span class="string">    while(f!=O){//从叶子结点开始向上回溯，直到根结点</span></span><br><span class="line"><span class="string">    --start;//回溯一次start向前指一个位置</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (HT[f].Ichild= =c) cd[start]= '</span>O<span class="string">' ;//结点c是f的左孩子，则生成代码O</span></span><br><span class="line"><span class="string">    else cd[start]= '</span><span class="number">1</span><span class="string">' ;//结点c是f的右孩子，则生成代码1</span></span><br><span class="line"><span class="string">    c=f; f=HT[f].parent;//继续向上回溯</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">//求出第i个字符的编码</span></span><br><span class="line"><span class="string">HC[i]= new char [n-start];//为第i个字符串编码分配空间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">strcpy(HC[i],&amp;cd[start]);//将求得的编码从临时空间cd复制到HC的当前行中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">delete cd;//释放临时空间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">}// CreatHuffanCode</span></span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787941e3c433.png" alt></p>
<h4 id="4-编码的实现"><a href="#4-编码的实现" class="headerlink" title="4.编码的实现"></a>4.编码的实现</h4><p><img src="https://bu.dusays.com/2025/01/15/6787942204abe.png" alt></p>
<p><img src="/posts/79666db/image-20241107140705475.png" alt="image-20241107140705475"></p>
<h2 id="八、图"><a href="#八、图" class="headerlink" title="八、图"></a>八、图</h2><h3 id="1-图的定义和基本术语"><a href="#1-图的定义和基本术语" class="headerlink" title="1.图的定义和基本术语"></a>1.图的定义和基本术语</h3><h4 id="1-图的定义"><a href="#1-图的定义" class="headerlink" title="1.图的定义"></a>1.图的定义</h4><p><strong>图</strong>：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.03ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4875.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/></g><g data-mml-node="mo" transform="translate(1063.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2119.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2508.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3277.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3722.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(4486.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>​         V:顶点（数据元素）的有穷非空集合</p>
<p>​         E:边的有穷集合</p>
<p><strong>无向图</strong>：每条边都没有方向</p>
<p><strong>有向图</strong>:每条边都有方向</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879425ebfd5.png" alt></p>
<p><strong>完全图</strong>：任意两个点都有一条边相连</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794278b7c5.png" alt></p>
<p><strong>稀疏图</strong>：有很少边或弧的图（e&lt;nlogn)</p>
<p><strong>稠密图</strong>：有较多边或弧的图</p>
<p><strong>网</strong>：边/弧带权的图</p>
<p><strong>邻接</strong>:有边/弧相连的两个顶点之间的关系。</p>
<p>​       存在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="6.547ex" height="2.363ex" role="img" focusable="false" viewbox="0 -750 2893.9 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1201,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1645.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(2504.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，则称<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewbox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container>;互为<strong>邻接点</strong>;(无向图)</p>
<p>​        存在$<v_i, v_j>$，则称v<strong>邻接到</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewbox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container>,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewbox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container><strong>邻接于</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>(有向图)</v_i,></p>
<p><strong>关联</strong>：边/弧与顶点的关系</p>
<p>​           存在$(V_i,V_j)/<v_i,v_j><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.231ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 8500 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">称</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4000,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(4500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">弧</text></g><g data-mml-node="mi" transform="translate(5500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">关</text></g><g data-mml-node="mi" transform="translate(6500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">联</text></g><g data-mml-node="mi" transform="translate(7500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g></g></g></svg></mjx-container>v_i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g></g></svg></mjx-container>v_j$</v_i,v_j></p>
<p><strong>顶点的度</strong>:与该顶点相关联的边的数目，记为TD(v)</p>
<p>在有向图中，顶点的度等于该顶点的入度与出度之和。</p>
<p>顶点v的入度是以v为终点的有向边的条数,记作ID(v)</p>
<p>顶点v的出度是以v为始点的有向边的条数,记作OD(v)</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942ab13d1.png" alt></p>
<p><strong>路径</strong>：接续的边构成的顶点序列</p>
<p><strong>路径长度</strong>:路径上边或弧的数目/权值之和。<br><strong>回路(环)</strong>:第一个顶点和最后一个顶点相同的路径。<br><strong>简单路径</strong>:除路径起点和终点可以相同外，其余顶点均不相同的路径。</p>
<p><strong>简单回路(简单环)</strong>:除路径起点和终点相同外，其余顶点均不相同的路径。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942d83864.png" alt></p>
<p><strong>连通图(强连通图)</strong><br>在无(有)向图<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.03ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4875.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/></g><g data-mml-node="mo" transform="translate(1063.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2119.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2508.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3277.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3722.2,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g></g><g data-mml-node="mo" transform="translate(4486.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>中，若对任何两个顶点v、u都右在从v至到u的路径称G是连通图(裾连通图)</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787941b2437f.png" alt></p>
<p><strong>权与网</strong><br>图中边或弧所具有的相关数称为<strong>权</strong>。表明从一个顶点到另一个顶点的距离或耗费。<br>带权的图称为<strong>网</strong>。</p>
<p><strong>子图</strong><br>设有两个图G= (V，{E})、G1= (V1，{E1})，若V1⊆V,E1⊆E,则称G1是G的子图</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942529a87.png" alt></p>
<p><strong>连通分量（强连通分量)</strong><br>无向图G的<strong>极大连通子图</strong>称为G的<strong>连通分量</strong>。<br>极大连通子图意思是:该子图是G连通子图，将G的任何不在该子图中的顶点加入，子图不再连通。</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879426d0a67.png" alt></p>
<p>有向图G的极大强连通子图称为G的<strong>强连通分量</strong></p>
<p>极大强连通子图意思是:该子图是G的强连通子图，将D的任何不在该子图中的顶点加入，子图不再是强连通的。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942986223.png" alt></p>
<p><strong>极小连通子图:</strong>该子图是G的连通子图，在该子图中删除任何一天边子图不再连通。<br><strong>生成树:</strong>包含无向图G所有顶点的极小连通子图。<br><strong>生成森林:</strong>对非连通图，由各个连通分量的生成树的集合。</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942c4d4bf.png" alt></p>
<h3 id="2-图的类型定义"><a href="#2-图的类型定义" class="headerlink" title="2.图的类型定义"></a>2.图的类型定义</h3><h4 id="1-图的抽象数据类型定义如下"><a href="#1-图的抽象数据类型定义如下" class="headerlink" title="1.图的抽象数据类型定义如下:"></a>1.图的抽象数据类型定义如下:</h4><p>ADT Graph{<br>            <strong>数据对象V</strong>:具有相同特性的数据元素的集合，称为<strong>顶点集。</strong><br>            <strong>数据关系R:</strong> R={VR}<br>                        VR={<v,w>|<v,w> | v,w⊆V ^ p(v,w),<br>                                <v,w>表示从v到w的弧，P(v,w)定义了弧<v,w>的信息</v,w></v,w></v,w></v,w></p>
<p>}</p>
<h4 id="2-图的操作"><a href="#2-图的操作" class="headerlink" title="2. 图的操作"></a>2. 图的操作</h4><p><img src="https://bu.dusays.com/2025/01/15/6787942e7d7a5.png" alt></p>
<h4 id="3-图的存储结构"><a href="#3-图的存储结构" class="headerlink" title="3.图的存储结构"></a>3.图的存储结构</h4><p><img src="https://bu.dusays.com/2025/01/15/67879430f2beb.png" alt></p>
<h5 id="1-数组（邻接矩阵）表示法"><a href="#1-数组（邻接矩阵）表示法" class="headerlink" title="1.数组（邻接矩阵）表示法"></a>1.数组（邻接矩阵）表示法</h5><p><img src="https://bu.dusays.com/2025/01/15/67879433a04b1.png" alt></p>
<h6 id="无向图邻接矩阵"><a href="#无向图邻接矩阵" class="headerlink" title="无向图邻接矩阵"></a>无向图邻接矩阵</h6><p><img src="https://bu.dusays.com/2025/01/15/6787942388289.png" alt></p>
<p>分析1：无向图的邻接矩阵是对称的</p>
<p>分析2：顶点i的度=第i行（列）中的1的个数</p>
<p>特别：完全的邻接矩阵中，对角元素为0，其余为1</p>
<h6 id="有向图的邻接矩阵"><a href="#有向图的邻接矩阵" class="headerlink" title="有向图的邻接矩阵"></a>有向图的邻接矩阵</h6><p><img src="https://bu.dusays.com/2025/01/15/6787942b60b70.png" alt></p>
<p>分析1：有向图的邻接矩阵可能不是对称的</p>
<p>分析2：顶点的出度=第i行元素之和（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.307ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 1019.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> 指向&amp;V_2&amp; 和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.307ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 1019.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g></g></g></svg></mjx-container>）</p>
<p>顶点的出度=第i列元素之和</p>
<p>​              顶点的度=第i行元素之和+第i列元素之和</p>
<h5 id="有向网的邻接矩阵"><a href="#有向网的邻接矩阵" class="headerlink" title="有向网的邻接矩阵"></a>有向网的邻接矩阵</h5><p>网（即有权图)的邻接矩阵表示法</p>
<p>定义为</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.403ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 9018 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(1194.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1723.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2174.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(2607.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(3076.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(3354.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3699.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(3977.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(4255.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(4667.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(5223.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(6279.2,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mi" transform="translate(7550.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(8240,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g></g></g></svg></mjx-container>V_i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.713ex" role="img" focusable="false" viewbox="0 -121 278 315"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container>V_j<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.531ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2444.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(1055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mo" transform="translate(2055.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g></g></g></svg></mjx-container>V_i,V_j<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.951ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3072.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(666.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">∊</text></g><g data-mml-node="mi" transform="translate(1544.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(2313.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g></g></svg></mjx-container></p>
<p>​                  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="9.05ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"/></g></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">无</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">弧</text></g></g></g></svg></mjx-container></p>
<p>如果两个顶点之间存在弧或边，那么我就记录两个顶点为权<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="3.808ex" height="2.007ex" role="img" focusable="false" viewbox="0 -683 1683 887"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mi" transform="translate(1271,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container>，如果不存在则记录无穷大</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787942f9fb6c.png" alt></p>
<h4 id="2-邻接矩阵的存储形式"><a href="#2-邻接矩阵的存储形式" class="headerlink" title="2.邻接矩阵的存储形式"></a>2.邻接矩阵的存储形式</h4><h6 id="1-用两个数组分别存储顶点表和邻接矩阵"><a href="#1-用两个数组分别存储顶点表和邻接矩阵" class="headerlink" title="1.用两个数组分别存储顶点表和邻接矩阵"></a>1.用两个数组分别存储顶点表和邻接矩阵</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum 100 <span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VerTexType;<span class="comment">//设顶点的娄文据类型为字符型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ArcType;<span class="comment">//假设边的权值类型为整型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">VerTexType vexs[MVNum]; <span class="comment">//顶点表</span></span><br><span class="line">ArcType arcs[MVNum][MVNum]; <span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="type">int</span> vexnum, arcnum;<span class="comment">//图的当前点数和边数</span></span><br><span class="line">}AMGraph; <span class="comment">// Adjacency Matrix Graph</span></span><br></pre></td></tr></table></figure>
<h5 id="2-采用邻接矩阵表示法创建无向网"><a href="#2-采用邻接矩阵表示法创建无向网" class="headerlink" title="2.采用邻接矩阵表示法创建无向网"></a>2.采用邻接矩阵表示法创建无向网</h5><h6 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h6><p>​    (1)输入总顶点数和总边数。</p>
<p>   (2)依次输点的信息存人顶点表中。</p>
<p>（3）初始化邻接矩阵，使每个权值初始化为极大值。</p>
<p>（4）构造邻接矩阵</p>
<p>代码先欠着</p>
<h5 id="3-邻接矩阵的好处和坏处"><a href="#3-邻接矩阵的好处和坏处" class="headerlink" title="3.邻接矩阵的好处和坏处"></a>3.邻接矩阵的好处和坏处</h5><h6 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h6><ul>
<li>直观、简单、好理解</li>
<li>方便检查任意一对顶点间是否存在边</li>
<li>方便找任一顶点的所有“邻接点”(有边直接相连的顶点)</li>
<li>方便计算任一顶点的“度”(从该点发出的边数为“出度”，指向该点的边数为“入度”)·无向图:对应行（或列)非O元素的个数·有向图:对应行非0元素的个数是“出度”;对应列非0元素的个数是“入度”</li>
</ul>
<h6 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h6><ul>
<li>不便于增加和删除顶点</li>
<li><p>浪费空间——传稀疏图人点很多而边很少）有大量无效元素</p>
</li>
<li><p>​           对稠密图（特别是完全图)还是很合算的</p>
</li>
<li><p>浪费时间——统计稀疏图中一共有多少条边</p>
</li>
</ul>
<h4 id="3-邻接表表示法（链式）"><a href="#3-邻接表表示法（链式）" class="headerlink" title="3.邻接表表示法（链式）"></a>3.邻接表表示法（链式）</h4><h5 id="1-无向图的邻接表"><a href="#1-无向图的邻接表" class="headerlink" title="1.无向图的邻接表"></a>1.无向图的邻接表</h5><ul>
<li>·顶点:</li>
</ul>
<p>​             ·按编号顺序将顶点数据存储在一维数组中;·</p>
<ul>
<li><p>关联同一顶点的边(以顶点为尾的弧)︰</p>
<p>​      ·用线性链表存储</p>
</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/67879431dfaa6.png" alt></p>
<p>data表示顶点本身，firstarc表示第一条边的指针（以v1为例子，下标为3或为1的元素的指针）adjvex表示邻接的顶点，nextarc表示下一元素的指针</p>
<h6 id="特点-3"><a href="#特点-3" class="headerlink" title="特点:"></a>特点:</h6><ul>
<li>·邻接表不唯一</li>
<li>·若无向图中有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个顶点、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></svg></mjx-container>条边，则其邻接表需<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个头结点和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.186ex" height="1.532ex" role="img" focusable="false" viewbox="0 -666 966 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></svg></mjx-container> 个表结点。适宜存储稀疏图。</li>
<li>无向图中顶点v的度为第i个单链表中的结点数。</li>
</ul>
<h5 id="2-有向图"><a href="#2-有向图" class="headerlink" title="2.有向图"></a>2.有向图</h5><p><img src="https://bu.dusays.com/2025/01/15/67879433da3c4.png" alt></p>
<h6 id="特点-4"><a href="#特点-4" class="headerlink" title="特点:"></a>特点:</h6><blockquote>
<p>顶点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.059ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 910 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>的<strong>出度</strong>为第i个单链表中的结点个数。<br>顶点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.059ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 910 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>的<strong>入度</strong>为整个单链表中邻接点域值是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.677ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2067.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>的结点个数。</p>
</blockquote>
<p><img src="https://bu.dusays.com/2025/01/15/678794361386e.png" alt></p>
<h5 id="3-链式代码"><a href="#3-链式代码" class="headerlink" title="3.链式代码"></a>3.链式代码</h5><h6 id="1-定义代码"><a href="#1-定义代码" class="headerlink" title="1.定义代码"></a>1.定义代码</h6><p>顶点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>{</span></span><br><span class="line">    </span><br><span class="line">    VerTexType data;<span class="comment">//顶点信息--类型自义定</span></span><br><span class="line">    ArcNode * firstarc;<span class="comment">//指向第一条依附该顶点的边的指针</span></span><br><span class="line">    </span><br><span class="line">}VNode,AdjList[MVNum]; <span class="comment">//AdjList表示邻接表类型,MVNUM为最大数组数</span></span><br></pre></td></tr></table></figure>
<p>边结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum 100<span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>{</span><span class="comment">//边结点</span></span><br><span class="line"><span class="type">int</span> adjvex;<span class="comment">//该边所指向的顶点的位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span><span class="comment">//指向下一条边的指针</span></span><br><span class="line">OtherInfo info;<span class="comment">//和边相关的信息</span></span><br><span class="line">}ArcNode;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/678794396b6bc.png" alt></p>
<p>图结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">     AdjList vertices;<span class="comment">//vertices--vertex的复数顶点数组</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;<span class="comment">//图的当前顶点数和弧数</span></span><br><span class="line">} ALGraph;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787943ca4c9e.png" alt></p>
<h6 id="2-采用邻接表表示法创建无向网的算法思想"><a href="#2-采用邻接表表示法创建无向网的算法思想" class="headerlink" title="2.采用邻接表表示法创建无向网的算法思想"></a>2.采用邻接表表示法创建无向网的算法思想</h6><p>【算法思想】</p>
<ol>
<li>输入总顶点数和总边数。</li>
<li>建立顶点表<br>依次输入点的信息存入顶点表中<br>使每个表头结点的指针域初始化为NULL</li>
<li>创建邻接表<br>依次输入每条边依附的两个顶点确定两个顶点的序号i和j，建立边结点<br>将此边结点分别插入到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.059ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 910 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.166ex" height="2.211ex" role="img" focusable="false" viewbox="0 -683 957.3 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container>对应的两个边链表的头部</li>
</ol>
<h4 id="5-邻接表的特点"><a href="#5-邻接表的特点" class="headerlink" title="5.邻接表的特点"></a>5.邻接表的特点</h4><h5 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h5><ul>
<li><p>·方便找任一顶点的所有“邻接点”</p>
</li>
<li><p>·节约稀疏图的空间</p>
<p>​    需要N个头指针＋2E个结点(每个结点至少2个域)·</p>
</li>
<li><p>方便计算任一顶点的“度”?</p>
<pre><code>对无向图:是的
</code></pre><p>   对有向图:只能计算“出度”;需要构造“逆邻接表”(存指向自己的边)来方便计算入度”</p>
</li>
<li><p>·不方便检查任意、对顶点间是否存在边</p>
</li>
</ul>
<h4 id="4-邻接矩阵与邻接表表示方法的关系"><a href="#4-邻接矩阵与邻接表表示方法的关系" class="headerlink" title="4.邻接矩阵与邻接表表示方法的关系"></a>4.邻接矩阵与邻接表表示方法的关系</h4><p><img src="https://bu.dusays.com/2025/01/15/6787943e9e6a3.png" alt></p>
<h5 id="2-联系"><a href="#2-联系" class="headerlink" title="2.联系:"></a>2.<strong>联系:</strong></h5><p>邻接表中每个链表对应于邻接矩阵中的一行，链表中结点个数等于一行中非零元素的个数。</p>
<h5 id="2-区别"><a href="#2-区别" class="headerlink" title="2.区别:"></a>2.区别:</h5><p>对于任一确定的无向图，邻接矩阵是唯一的(行列号与顶点编号一致)，但邻接表不唯一（链接次序与顶点编号无关）。</p>
<p>邻接矩阵的空间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>,而邻接表的空间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.664ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3829.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1974.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2974.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(3440.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<h5 id="3-用途"><a href="#3-用途" class="headerlink" title="3.用途:"></a>3.用途:</h5><p>邻接矩阵多用于榈密图;而邻接表多用于稀疏图</p>
<h4 id="5-十字链表"><a href="#5-十字链表" class="headerlink" title="5.十字链表"></a>5.十字链表</h4><p><img src="https://bu.dusays.com/2025/01/15/67879441e942a.png" alt></p>
<h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><p><strong>十字链表</strong>(Orthogonal List)是<strong>有向图</strong>的另一种链式存储结构。我们也可以把它看成是将有向图的邻接表和逆邻接表结合起来形成的一种链表。<br>有向图中的每一条弧对应十字链表中的一个<strong>弧结点</strong>，同时有向图中的每个顶点在十字链表中对应有一个结点，叫做<strong>顶点结点。</strong></p>
<h5 id="2-具体"><a href="#2-具体" class="headerlink" title="2.具体"></a>2.具体</h5><p>data:数据</p>
<p>firstin:第一个入度边</p>
<p>firstout:第一个出度边</p>
<p>tailvex:弧尾位置</p>
<p>headvex:弧头位置</p>
<p>hlink:弧头相同的下一条弧</p>
<p>tlink:弧尾相同的下一条弧</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794454f6ba.png" alt></p>
<h4 id="6-邻接多重表"><a href="#6-邻接多重表" class="headerlink" title="6.邻接多重表"></a>6.邻接多重表</h4><p>  <img src="https://bu.dusays.com/2025/01/15/67879446783fd.png" alt></p>
<p> <img src="https://bu.dusays.com/2025/01/15/67879428ca77f.png" alt></p>
<h3 id="4-图的遍历"><a href="#4-图的遍历" class="headerlink" title="4.图的遍历"></a>4.图的遍历</h3><h4 id="1-定义-7"><a href="#1-定义-7" class="headerlink" title="1.定义"></a>1.定义</h4><p><strong>遍历定义:</strong></p>
<p>从已给的连通图中某一顶点出发，沿着一些边访遍图中所有的顶点，且使每个顶点仅被访问一次，就叫做<strong>图的遍历</strong>，它是图的基本运算</p>
<p><strong>遍历实质</strong>:找每个顶点的邻接点的过程。</p>
<p><strong>图的特点</strong>:<br>图中可能存在<strong>回路</strong>，且图的任一顶点都可能与其它顶点相通在访问完某个顶点之后可能会沿着某些边<strong>又回到了曾经访问过的顶点。</strong></p>
<p><strong>如何避免回路</strong>:</p>
<p>解决思路:设置<strong>辅助数组</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.382ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4147 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1644,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(2005,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2471,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(2991,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(3269,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3869,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>，用来标记每个被访问过的顶点。</p>
<ul>
<li>初始状态<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.805ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3892 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1644,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(2005,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2471,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(2991,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(3269,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>为0</li>
<li>·顶点i被访问，改<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.805ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3892 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1644,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(2005,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2471,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(2991,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(3269,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>为1，防止被多次访问</li>
</ul>
<h4 id="2-深度优先-DFS"><a href="#2-深度优先-DFS" class="headerlink" title="2.深度优先(DFS)"></a>2.深度优先(DFS)</h4><h5 id="1-连通图的遍历"><a href="#1-连通图的遍历" class="headerlink" title="1.连通图的遍历"></a>1.连通图的遍历</h5><h6 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h6><ul>
<li>在访问图中某一起始顶点v后，由v出发，访问它的任一邻接顶点w1</li>
<li>再从w出发，访问与w邻接但还未被访问过的顶点W2;</li>
<li>然后再从w出发，进行类似的访问，…</li>
<li>如此进行下去，直至到达所有的邻接顶点都被访问过的顶点u为止。接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。</li>
<li>如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问;</li>
<li>如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/6787943315a1d.png" alt></p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><p><img src="https://bu.dusays.com/2025/01/15/67879434eaab8.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//王道代码</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM];<span class="comment">//访问标记数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(Graph G)</span><span class="comment">//对图G进行深度优先遍历</span></span><br><span class="line">{</span><br><span class="line">   <span class="type">int</span> v;</span><br><span class="line">   <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G;v++)</span><br><span class="line">   {</span><br><span class="line">       visited[v]=<span class="literal">false</span>;<span class="comment">//初始化已访问数组</span></span><br><span class="line">       <span class="keyword">for</span> ( v = <span class="number">0</span>; v &lt; G; ++v) {<span class="comment">//从v0开始遍历</span></span><br><span class="line">           <span class="keyword">if</span>(!visited[v])</span><br><span class="line">           {</span><br><span class="line">               DFS(G,v);</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(Grap G,<span class="type">int</span> V)</span><span class="comment">//从顶点v出发，深度遍历图G</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    visit(v);<span class="comment">//访问顶点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//设已访问标记</span></span><br><span class="line">    <span class="keyword">for</span> (w=FirstNeighbor(G,v);w&gt;=<span class="number">0</span>;w=NextNeighbor(G,v,w))<span class="comment">//依次检查邻接矩阵v所在的行 </span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v还没访问的邻接顶点</span></span><br><span class="line">        {</span><br><span class="line">            DFS(G,w);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h6><p>用邻接矩阵来表示图，遍历图中每一个顶点都要从头扫描该顶点所在的行，时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2577.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</p>
<p>用邻接表来表示图，虽然有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.186ex" height="1.532ex" role="img" focusable="false" viewbox="0 -666 966 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></svg></mjx-container>个表结点，但只需扫描e个结点即可完成遍历，加上访问n个头结点的时间，时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.664ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3829.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1974.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2974.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(3440.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>.</p>
<h6 id="结论"><a href="#结论" class="headerlink" title="结论:"></a><strong>结论</strong>:</h6><ul>
<li><strong>稠密图</strong>适于在邻接矩阵上进行深度遍历;</li>
<li><strong>稀疏图</strong>通于在邻接表上进行深度遍历。</li>
</ul>
<h4 id="2-广度优先遍历"><a href="#2-广度优先遍历" class="headerlink" title="2.广度优先遍历"></a>2.广度优先遍历</h4><h5 id="1-方法-1"><a href="#1-方法-1" class="headerlink" title="1.方法"></a>1.方法</h5><p>方法:从图的某一结点出发，首先依次访问该结点的所有邻接点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.127ex" height="1.984ex" role="img" focusable="false" viewbox="0 -683 5802 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1019.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1464.2,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2483.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2928.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4267.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4711.8,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>,再按这些顶点被访问的先后次序依次访问与它们相邻接的所有未被访问的顶点<br>重复此过程，直至所有顶点均被访问为止。</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879439013da.png" alt></p>
<h5 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2.实现"></a>2.实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//王道代码</span></span><br><span class="line"><span class="type">bool</span> visited [Max_VERTEX_NUM];<span class="comment">//访问标记数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTraverse</span><span class="params">(Grap G)</span>{<span class="comment">//对图G进行广度优先遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; ++i) {</span><br><span class="line">        visited[i]=<span class="literal">false</span>;<span class="comment">//访问标记数组初始化</span></span><br><span class="line">    }</span><br><span class="line">    InitQueue(Q);<span class="comment">//初始化辅助队列Q</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;G.vexnum ; ++i) {<span class="comment">//从0号顶点开始遍历</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[i]){<span class="comment">//对每个连通分量调用一次BFS</span></span><br><span class="line">            BFS(G,i);<span class="comment">//vi未访问过，从vi开始BFS</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span>{<span class="comment">//从顶点v出发，广度优先遍历图G</span></span><br><span class="line">    visit(v);<span class="comment">//访问初始顶点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//对v做以访问标志</span></span><br><span class="line">    Enqueue(Q,v);<span class="comment">//顶点v入队列Q</span></span><br><span class="line">    <span class="keyword">while</span> (!isEmpty(Q)){</span><br><span class="line">        DeQueue(Q,v);<span class="comment">//顶点v出队列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = FirstNeighbor(G,v); w&gt;<span class="number">0</span> ; w=NextNeighbor(G,v,w)) {</span><br><span class="line">                                           <span class="comment">//检测到v的所有邻接点</span></span><br><span class="line">            <span class="keyword">if</span>(!visited[w]){<span class="comment">//w为v未访问的邻接顶点</span></span><br><span class="line">                visit(w);<span class="comment">//访问顶点w</span></span><br><span class="line">                visited[w]=<span class="literal">true</span>;<span class="comment">//对w做以访问标记</span></span><br><span class="line">                Enqueue(Q,w);<span class="comment">//顶点w入队列</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-效率分析"><a href="#3-效率分析" class="headerlink" title="3.效率分析"></a>3.效率分析</h5><ul>
<li>如果使用邻接矩阵，则BFS对于每一个被访问到的顶点，都要<br>循环检测矩阵中的整整一行（ n个元素)，总的时间代价为O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 1036.6 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container>)。</li>
<li>用邻接表来表示图，虽然有2e个表结点，但只需扫描e个结点即可完成遍历，加上访问n个头结点的时间，时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.664ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3829.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1974.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2974.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(3440.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</li>
</ul>
<h5 id="4-效率比较"><a href="#4-效率比较" class="headerlink" title="4.效率比较"></a>4.效率比较</h5><ul>
<li>·空间复杂度相同，都是O(n)(借用了堆栈或队列) ;</li>
<li>·时间复杂度只与存储结构,(邻接矩阵或邻接表)有关，而与搜索路径无关。</li>
</ul>
<h3 id="5-图的应用"><a href="#5-图的应用" class="headerlink" title="5.图的应用"></a>5.图的应用</h3><h4 id="1-最小生成树"><a href="#1-最小生成树" class="headerlink" title="1.最小生成树"></a>1.最小生成树</h4><h5 id="1-生成树的简介"><a href="#1-生成树的简介" class="headerlink" title="1.生成树的简介"></a>1.生成树的简介</h5><p><strong>生成树</strong>：所有顶点均由边连接在一起，但不存在回路</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787943a92ab9.png" alt></p>
<blockquote>
<p>一个图可以有许多棵不同的生成树</p>
<p>所有生成树具有以下共同特点</p>
<ul>
<li>生成树的顶点个数与图的<strong>顶点个数相同;</strong></li>
<li>生成树是图的<strong>极小连通子图</strong>，去掉一条边则非连通;·</li>
<li>一个有n个顶点的连通图的生成树有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>条边;</li>
<li><strong>·在生成树中再加一条边必然形成回路。</strong></li>
<li>生成树中任意两个顶点间的<strong>路径是唯一</strong>的;</li>
</ul>
<p>含有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>条边的图不一定是最小生成树</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787943d83d9a.png" alt></p>
</blockquote>
<h5 id="2-无向图的生成树"><a href="#2-无向图的生成树" class="headerlink" title="2.无向图的生成树"></a>2.无向图的生成树</h5><p><img src="https://bu.dusays.com/2025/01/15/6787944158d73.png" alt></p>
<h5 id="3-最小生成树"><a href="#3-最小生成树" class="headerlink" title="3.最小生成树"></a>3.最小生成树</h5><p><strong>最小生成树</strong>:给定一个无向网络在该网的所有生成树中，使得各边权值之和最小的那棵生成树称为该网的最小生成树，也叫最小代价生成树。</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794449832b.png" alt></p>
<h6 id="构造最小生成树"><a href="#构造最小生成树" class="headerlink" title="构造最小生成树"></a>构造最小生成树</h6><p>构造最小生成树的算法很多，其中多数算法都利用了<strong>MST</strong>的性质。</p>
<p><strong>MST性质</strong>:设N =(V, E)是一个连通网,U是顶点集V的一个非空子集。若边(u, v)是一条具有最小权值的边，其中u∈u,v∈V-U,则必存<br>在一棵包含边(u, v)的最小生成树。</p>
<h6 id="Prim-普里姆算法"><a href="#Prim-普里姆算法" class="headerlink" title="Prim-普里姆算法"></a>Prim-普里姆算法</h6><p>算法思想</p>
<blockquote>
<p>设<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.229ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4963.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2221.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2610.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3379.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3824.2,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(4574.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>是连通网，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.321ex" height="1.538ex" role="img" focusable="false" viewbox="0 -680 1468 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g></g></g></svg></mjx-container>是N上最小生成树中边的集合。</p>
<p>初 始 令<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="7.01ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 3098.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mo" transform="translate(1044.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2100.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g></g></g></svg></mjx-container>,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.025ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3989.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1675.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">∊</text></g><g data-mml-node="mi" transform="translate(2553.1,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3322.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3711.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container>TE=${ }。</p>
<p>在所有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="5.644ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 2494.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(849.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">∊</text></g><g data-mml-node="mi" transform="translate(1727.6,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g></g></g></svg></mjx-container>,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="9.952ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4399 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(762.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">∊</text></g><g data-mml-node="mi" transform="translate(1640.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(2631.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(3632,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g></g></g></svg></mjx-container>的边<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.501ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4199.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1405.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(1890.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2557.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">∊</text></g><g data-mml-node="mi" transform="translate(3435.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g></g></g></svg></mjx-container>中，找一条代价最小的边<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.133ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3152.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1397.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1842.2,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(2763.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</p>
<p>将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.133ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3152.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1397.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1842.2,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(2763.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>并入集合<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.321ex" height="1.538ex" role="img" focusable="false" viewbox="0 -680 1468 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g></g></g></svg></mjx-container>，同时<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 910.9 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g></g></svg></mjx-container>并入U</p>
<p>重复上述操作直至<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.492ex" height="1.731ex" role="img" focusable="false" viewbox="0 -683 2869.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mo" transform="translate(1044.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2100.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g></g></g></svg></mjx-container>，则<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.437ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5497.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(981.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2037.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2426.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3195.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3640.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(4344.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(5108.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g></g></svg></mjx-container>的最小生成树。</p>
</blockquote>
<p>从顶点往下找最小的权</p>
<h6 id="Kruskal-克鲁斯卡尔算法"><a href="#Kruskal-克鲁斯卡尔算法" class="headerlink" title="Kruskal-克鲁斯卡尔算法"></a>Kruskal-克鲁斯卡尔算法</h6><p>所有边按权值排序,然后选择最小的</p>
<p>当有循环时舍弃这条边</p>
<p>当所有边连通时结束</p>
<p>与prim算法不同的是他是按排序来找最小,prim是依次选最小</p>
<blockquote>
<p>设连通网<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.261ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4977.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2221.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2610.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3379.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3824.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(4588.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，令最小生D树初始状态为只有n个顶点而无边的非连通图<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.116ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4029.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(981.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2037.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2426.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3195.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3640.2,0)"/><g data-mml-node="mo" transform="translate(3640.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>,每个顶点自成一个连通分量。</p>
<p>在E中选取代价最小的边，若该边依附的顶点落在T中不同的连通分量上(即:不能形成环)，则将此边加入到T中;否则，舍去此边，选取下一条代价最小的边。</p>
<p>依此类推，直至T中所有顶点都在同一连通分量上为止。</p>
</blockquote>
<p>最小生成树可能不唯一</p>
<h6 id="两种比较"><a href="#两种比较" class="headerlink" title="两种比较"></a>两种比较</h6><p><img src="https://bu.dusays.com/2025/01/15/678794300e5fe.png" alt></p>
<h4 id="2-最短路径"><a href="#2-最短路径" class="headerlink" title="2.最短路径"></a>2.最短路径</h4><h5 id="1-定义-8"><a href="#1-定义-8" class="headerlink" title="1.定义"></a>1.定义</h5><p><strong>最短路径与最小生成树不同</strong>，路径上不一定包含n个顶点，也不一定包含n-1条边。</p>
<p>单源最短路径-Dijkstra迪杰斯特拉算法</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787943a49d87.png" alt></p>
<p>所有顶点间的最短路径—Floyd弗洛伊德算法</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787943d6e333.png" alt></p>
<h5 id="2-Dijkstra算法"><a href="#2-Dijkstra算法" class="headerlink" title="2.Dijkstra算法"></a>2.Dijkstra算法</h5><h6 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h6><blockquote>
<p>1.初始化:先找出从源点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.307ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 1019.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>到各终点v的直达路径<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.413ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3276.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1408.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1853.2,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(2887.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, 即通过一条弧到达的路径。</p>
<p>2选择:从这些路径中找出一条长度最短的路径<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.121ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2705.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g><g data-mml-node="mo" transform="translate(1299.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1744.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2316.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</p>
<p>3.更新:然后对其余各条路径进行适当调整:</p>
<p>​          若在图中存在弧<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.401ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2829.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1405.7,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(2440.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> ，且<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="25.029ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 11062.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g><g data-mml-node="mo" transform="translate(1299.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1744.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2316.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2927.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mo" transform="translate(3928.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4317.1,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4889.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(5333.7,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(6270.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6936.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mo" transform="translate(7992.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(8381.7,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g><g data-mml-node="mo" transform="translate(9292.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(9737.3,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(10673.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>则以路径<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.689ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4282.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g><g data-mml-node="mo" transform="translate(1397.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1842.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2414.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(2859.3,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(3893.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>代替<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.348ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3247.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g><g data-mml-node="mo" transform="translate(1299.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1744.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(2513.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2858.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</p>
<p>在调整后的各条路径中，再找长度最短的路径)依此类推。</p>
<p>(先找出直达的,然后与不直达的比较,有小的就更新被比较的)</p>
</blockquote>
<h6 id="具体-按路径长度递增次序产生最短路径"><a href="#具体-按路径长度递增次序产生最短路径" class="headerlink" title="具体-按路径长度递增次序产生最短路径"></a>具体-按路径长度递增次序产生最短路径</h6><blockquote>
<p>1、把V分成两组:辅助数组D存放。<br>       (1) S:已求出最短路径的顶点的集合。<br>       (2)T=V -s∶尚未确定最短路径的顶点集合。</p>
<p>2、将T中顶点按最短路径递增的次序加入到S中，</p>
<p>保证:(1）从源点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 910.9 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g></g></svg></mjx-container>到S中各顶点的最短路径长度都不大于从<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.307ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 1019.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>到T中任何顶点的最短路径长度。</p>
<p>(2)每个顶点对应一个距离值:<br>   S中顶点:从<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 910.9 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g></g></svg></mjx-container>到此顶点的最短路径长度。</p>
<p>​    T中顶点:从<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 910.9 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g></g></svg></mjx-container>到此顶点的只包括S中顶点作中间顶点的最短路径长度。</p>
</blockquote>
<p><img src="https://bu.dusays.com/2025/01/15/67879440514d7.png" alt></p>
<h5 id="3-Floyd-弗洛伊德算法"><a href="#3-Floyd-弗洛伊德算法" class="headerlink" title="3.Floyd 弗洛伊德算法"></a>3.Floyd 弗洛伊德算法</h5><h6 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h6><ul>
<li>·逐个顶点试探</li>
<li>·从到v,的所有可能存在的路径中·</li>
<li><p>选出一条长度最短的路径</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794435647b.png" alt></p>
</li>
</ul>
<h4 id="3-拓扑排序"><a href="#3-拓扑排序" class="headerlink" title="3.拓扑排序"></a>3.拓扑排序</h4><p>有向无环图：无环的有向图，简称DAG</p>
<p><img src="https://bu.dusays.com/2025/01/15/67879445bb557.png" alt></p>
<p>一个结点可能有多个前驱，但是没有回路</p>
<h5 id="1-AOV网"><a href="#1-AOV网" class="headerlink" title="1.AOV网"></a>1.AOV网</h5><h6 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h6><p>用一个有向图表示一个工程的各子工程及其相冥制约的关系，其中<strong>以顶点表示活动</strong>，<strong>弧表示活动之间的优先制约关系</strong>，称这种有向图为<strong>顶点表示活动的网</strong>，简称AOV网(Activity On Vertex network)</p>
<h6 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h6><ul>
<li>若从i到j有一条有向路径，则i是j的前驱;j是i的后继。</li>
<li>若<i,j>是网中有向边，则i是j的直接前驱;j是i的直接后继</i,j></li>
<li>AOV网中不允许有回路，因为如果有回路存在，则表明某项活动以自己为先决条件，显然这是荒谬的。</li>
</ul>
<h6 id="检测AOV-网中是否存在环方法"><a href="#检测AOV-网中是否存在环方法" class="headerlink" title="检测AOV 网中是否存在环方法:"></a>检测AOV 网中是否存在环方法:</h6><p>对有向图构造其顶点的拓扑有序序列，若网中所有顶点都在它的拓扑有序序列中，则该AOV 网必定不存在环。</p>
<h5 id="2-AOE网"><a href="#2-AOE网" class="headerlink" title="2.AOE网"></a>2.AOE网</h5><p>用一个有向图表承一个工程的各子工程及其相互制约的关系,以<strong>弧表示活动</strong>，以<strong>顶点表示活动的开始或结束事件</strong>，称这种有向图为<strong>边表示活动的网</strong>，简称为AOE网(Activity On Edge)。</p>
<h5 id="3-拓扑排序-1"><a href="#3-拓扑排序-1" class="headerlink" title="3.拓扑排序"></a>3.拓扑排序</h5><p>在AOV网没有回路的前提下，我们将全部活动排列成一个线性序列，使得若AOV网中有弧<i,j>存在，则在这个序列甲，I一疋排仕J的前面，具有这种性质的线性序列称为<strong>拓扑有序序列</strong>，相应的拓扑有序排序的算法称为<strong>拓扑排序。</strong></i,j></p>
<p><img src="https://bu.dusays.com/2025/01/15/67879447897b0.png" alt></p>
<h4 id="4-关键路径"><a href="#4-关键路径" class="headerlink" title="4.关键路径"></a>4.关键路径</h4><p><img src="https://bu.dusays.com/2025/01/15/67879448cf99e.png" alt></p>
<p>对于AOE网，我们关心两个问题:</p>
<p>(1)完成整项工程至少需要多少时间?</p>
<p>(2)哪些活动是影响工程进度的关键?</p>
<p>关键路径 ：路径长度最长的路径。<br>路径长度：路径上各活动持续时间之和。</p>
<p>———&gt;求解关键路径问题</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787944a28050.png" alt></p>
<p>由若干个关键活动组成的就是关键路径</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787944b6b543.png" alt></p>
<p>ve(j)最早开始时间：从原点开始找到权的最大值</p>
<p> vl(n)最迟发生时间：从汇点向前，找到最小值</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787944d1e382.png" alt></p>
<p> 具体计算</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787944e77dc7.png" alt></p>
<p>e(i)就是弧尾的长度</p>
<p>​        eg: v5就是6（v5连接的是v2，只用算v2），</p>
<p>l(i)就是vl-路径上的权值</p>
<p>​       eg: v5就是7-a4的权=7-1=6</p>
<p><img src="https://bu.dusays.com/2025/01/15/678794379647b.png" alt></p>
<h5 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h5><p>1、若网中有几条关键路径,则需加快同时在几条关键路径上的关键活动。<br>           如: a11、a10、a8、a7。</p>
<p>2、如果一个活动处于所有的关键路径上，那么提高这个活动的速度，就能缩短整个工程的完成时间。如: a1、a4。</p>
<p>3、处于所有的关键路径上的活动完成时间不能缩短太多)，否则会使原来的关键路径变成不是关键路径。这时，必须重新寻找关键路径。      </p>
<p>​         如:a1由6天变成3天，就会改变关键路径。</p>
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/posts/51917/</url>
    <content><![CDATA[<blockquote>
<p> 有志者，事竟成，破釜沉舟，百二秦关终属楚；</p>
<p> 苦心人，天不负，卧薪尝胆，三千越甲可吞吴；</p>
</blockquote>
<hr>
<blockquote>
<h3 id="一、计算机系统概述"><a href="#一、计算机系统概述" class="headerlink" title="一、计算机系统概述"></a>一、计算机系统概述</h3><p>（一）计算机系统层次结构</p>
<ul>
<li><p>1．计算机系统的基本组成</p>
</li>
<li><p>2．计算机硬件的基本组成</p>
</li>
<li><p>3．计算机软件和硬件的关系</p>
</li>
<li><p>4．计算机系统的工作原理</p>
</li>
<li><p>​         “存储程序”工作方式，</p>
</li>
<li>​           高级语言程序与机器语言程序之间的转换，</li>
<li>​           程序和指令的执行过程。</li>
</ul>
<p>（二）计算机性能指标</p>
<ul>
<li>吞吐最、响应时间；</li>
<li>CPU 时钟周期、主频、CPI ,CPU执行时间</li>
<li>MIPS， MFLOPS,GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS。；</li>
</ul>
</blockquote>
<h1 id="一、计算机系统层次结构"><a href="#一、计算机系统层次结构" class="headerlink" title="一、计算机系统层次结构"></a>一、计算机系统层次结构</h1><h2 id="1、计算机系统的组成"><a href="#1、计算机系统的组成" class="headerlink" title="1、计算机系统的组成"></a>1、计算机系统的组成</h2><p>硬件系统和软件系统共同构成了一个完整的计算机系统，</p>
<p><span class="p cyan">硬件</span>是指有形的网络设备，是计算机系统中实际物理装置的总称<br><span class="p blue">软件</span>是指硬盘上运行的程序相关的数据及文档<br></p>
<h2 id="2、计算机硬件的基本组成"><a href="#2、计算机硬件的基本组成" class="headerlink" title="2、计算机硬件的基本组成"></a>2、计算机硬件的基本组成</h2><p><img src="https://bu.dusays.com/2025/02/27/67c000ff015fc.png" alt="image-20250227140652882"></p>
<h3 id="2-1-早期冯诺依曼机的结构"><a href="#2-1-早期冯诺依曼机的结构" class="headerlink" title="2.1 早期冯诺依曼机的结构"></a>2.1 早期冯诺依曼机的结构</h3><h4 id="2-1-1-存储程序"><a href="#2-1-1-存储程序" class="headerlink" title="2.1.1 存储程序"></a>2.1.1 存储程序</h4><p><code>“存储程序”</code>的概念是指将指令以二进制代码的形式事先输入计算机的主存储器然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。</p>
<h4 id="2-1-2-早期冯诺依曼机"><a href="#2-1-2-早期冯诺依曼机" class="headerlink" title="2.1.2 早期冯诺依曼机"></a>2.1.2 早期冯诺依曼机</h4><p><img src="https://bu.dusays.com/2025/02/27/67bfe0f16a410.png" alt="image-20250227115007275"></p>
<h5 id="2-1-2-1-冯·诺依曼计算机特点"><a href="#2-1-2-1-冯·诺依曼计算机特点" class="headerlink" title="2.1.2.1 冯·诺依曼计算机特点"></a>2.1.2.1 冯·诺依曼计算机特点</h5><ol>
<li>计算机由五大部件组成</li>
<li>指令和数据以同等地位存于存储器，可按地址寻访</li>
<li>指令和数据用二进制表示</li>
<li>指令由操作码和地址码组成</li>
<li>存储程序</li>
<li>以运算器为中心</li>
</ol>
<h3 id="2-2-现代计算机的结构"><a href="#2-2-现代计算机的结构" class="headerlink" title="2.2 现代计算机的结构"></a>2.2 现代计算机的结构</h3><p><img src="https://bu.dusays.com/2025/02/27/67bfffd1d496a.png" alt="image-20250227140152003"></p>
<p>CPU=运算器+控制器+寄存器</p>
<h2 id="3-各个硬件的工作原理"><a href="#3-各个硬件的工作原理" class="headerlink" title="3.各个硬件的工作原理"></a>3.各个硬件的工作原理</h2><p><img src="https://bu.dusays.com/2025/02/27/67c05dda0d684.png" alt="image-20250227204304749"></p>
<h3 id="3-1主存储器的组成"><a href="#3-1主存储器的组成" class="headerlink" title="3.1主存储器的组成"></a>3.1主存储器的组成</h3><p><img src="https://bu.dusays.com/2025/02/27/67c00584ef755.png" alt="image-20250227142602350"></p>
<p><code>存储体</code>存放二进制信息</p>
<p><code>存储器地址寄存器（MAR）</code>存放访存地址，经过地址译码后找到所选的存储单元。</p>
<p><code>存储器数据寄存器（MDR）</code>用于暂存要从存储器中读或写的信息，时序控制逻辑用于产生存储器操作所需的各种时序信号。</p>
<ol>
<li>CPU提供了一个他想要的数据存放地址，由MAR向存储体中寻找数据，再由存储体将信息写入MDR中，最后CPU就可以通过线路从MDR中读取数据</li>
<li>CPU向MAR指明他想要写入存储体中的位置（地址），数据存放在MDR中，最后CPU会通过控制总线告诉主存储器说我是想要写入数据，主存储器会根据CPU发来的信息（地址，数据和写入信号），来往存储体中写入信息</li>
</ol>
<p><code>存储单元</code>:每个存储单元存放一串二进制代码</p>
<p><code>存储字(word)</code>:存储单元中二进制代码的组合</p>
<p><code>存储字长</code>:存储单元中二进制代码的位数</p>
<p><code>存储元</code>:即存储二进制的电子元件，每个存储元可存1bit</p>
<p><img src="https://bu.dusays.com/2025/02/27/67c00b231b766.png" alt="image-20250227145009300"></p>
<h3 id="3-2-运算器的组成"><a href="#3-2-运算器的组成" class="headerlink" title="3.2 运算器的组成"></a>3.2 运算器的组成</h3><p><code>运算器</code>:用于实现算术运算（如:加减乘除）、逻辑运算（如:与或非)</p>
<ul>
<li>ACC:累加器，用于存放操作数，或运算结果。</li>
<li>MQ:乘商寄存器，在乘、除运算时，用于存放操作数或运算结果。</li>
<li>X:通用的操作数寄存器，用于存放操作数</li>
<li><strong>ALU</strong>:算术逻辑单元，通过内部复杂的电路实现算数运算、逻辑运算</li>
</ul>
<p><img src="https://bu.dusays.com/2025/02/27/67c035289a30d.png" alt="image-20250227174926947"></p>
<h3 id="3-3-控制器的基本组成"><a href="#3-3-控制器的基本组成" class="headerlink" title="3.3 控制器的基本组成"></a>3.3 控制器的基本组成</h3><ul>
<li><strong>CU</strong>:控制单元，分析指令，给出控制信号</li>
<li>IR:指令寄存器，存放当前执行的指令</li>
<li>PC:程序计数器，存放下一条指令地址，有自动加1功能</li>
</ul>
<p><img src="https://bu.dusays.com/2025/02/27/67c0381f6a075.png" alt="image-20250227180205956"></p>
<h3 id="3-4-工作流程"><a href="#3-4-工作流程" class="headerlink" title="3.4 工作流程"></a>3.4 工作流程</h3><p><img src="https://bu.dusays.com/2025/02/27/67c0438dbd692.png" alt="image-20250227185051920"></p>
<p>好乱好乱好乱 ，我们现在来梳理一下</p>
<blockquote>
<p>取指令（1-4）</p>
<p>分析指令（5）</p>
<p>执行取数指令（6-9）</p>
</blockquote>
<ol>
<li>程序计数器（PC）的值为 0，指向主存中第一条指令的存储地址 ，即地址 0 处的指令。</li>
<li>(PC) 的值被送到主存地址寄存器（MAR），此时 (MAR)=0 ，这一步是为了告诉主存要读取哪个地址的内容。</li>
<li>根据 (MAR) 中的地址 0，从主存中读取相应的指令数据到主存数据寄存器（MDR），此时 (MDR) = 000001 0000000101，这里的数据包含操作码和地址码。</li>
<li>(MDR) 中的指令数据被传送到指令寄存器（IR），(IR)=000001 0000000101，指令被暂存以便后续分析和执行。(此时PC会自动+1，由0变成1)</li>
<li>指令寄存器（IR）中的操作码部分 OP (IR) 被送到控制单元（CU） ，CU 分析操作码 000001，得知这是一条 “取数” 指令。</li>
<li>指令寄存器（IR）中的地址码部分 Ad (IR) 被送到主存地址寄存器（MAR），(MAR)=5，确定要取数的主存地址。（0000000101对应的二进制转10进制是5），而5所对应的数字就是a存放的位置</li>
<li>根据 (MAR) 中的地址 5，从主存中读取数据到主存数据寄存器（MDR），(MDR)=0000000000000010 （即十进制的 2）。</li>
<li>MDR) 中的数据被传送到累加器（ACC），(ACC)=0000000000000010 ，即将数值 2 取到了 ACC 中，完成取数操作。</li>
<li>后续的指令执行过程类似，依次完成乘法、加法、存储结果和停机等操作。整个流程体现了计算机按照程序预先存储的指令，自动、有序地进行数据处理的基本原理 。</li>
</ol>
<p>明白了吗嘿嘿</p>
<p>下面我们来看第二步</p>
<p><img src="https://bu.dusays.com/2025/02/27/67c0576a65705.png" alt="image-20250227201536689"></p>
<ol>
<li>上一条指令执行后，程序计数器 (PC) 自动加 1 变为 1，指向主存地址 1 处的指令，累加器 (ACC) 中存储的值为 2。</li>
<li>(PC) 的值 1 被送到主存地址寄存器 (MAR)，即 (MAR)=1。</li>
<li>根据 (MAR) 中的地址 1，从主存读取指令数据到主存数据寄存器 (MDR)，此时 (MDR)=000100 0000000110 。</li>
<li>(MDR) 中的指令数据传送到指令寄存器 (IR)，(IR)= 000100 0000000110。</li>
<li>指令寄存器 (IR) 中的操作码部分 OP (IR) 被送到控制单元 (CU)，CU 分析操作码 000100，得知这是一条 “乘法” 指令。</li>
<li>指令寄存器 (IR) 中的地址码部分 Ad (IR) 被送到主存地址寄存器 (MAR)，(MAR)=6。</li>
<li>根据 (MAR) 中的地址 6，从主存读取数据到主存数据寄存器 (MDR)，(MDR)=0000000000000011（即十进制的 3） 。</li>
<li>(MDR) 中的数据传送到乘商寄存器 (MQ)，(MQ)=3。</li>
<li>(ACC) 中的值 2 传送到 X 寄存器，(X)=2。</li>
<li>(MQ) 和 (X) 中的值通过算术逻辑单元 (ALU) 进行乘法运算，结果存到 (ACC) 中，即 2×3 = 6，(ACC)=6 。若乘积太大，需要 MQ 辅助存储。</li>
</ol>
<p>芜湖呜呼芜湖 我听明白了</p>
<p><img src="https://bu.dusays.com/2025/02/27/67c05d7c43cb1.png" alt="image-20250227204130818"></p>
<h2 id="4-计算机软件"><a href="#4-计算机软件" class="headerlink" title="4.计算机软件"></a>4.计算机软件</h2><p><img src="https://bu.dusays.com/2025/02/27/67c063bbe071e.png" alt="image-20250227210810532"></p>
<p><strong>应用软件</strong>：是为了解决某个应用领域的问题而编制的程序（eg:抖音，QQ…）</p>
<p><strong>系统软件</strong>：负责管理硬件资源，并向上层应用程序提供基础服务(操作系统，数据库管理系统，语言处理系统，分布式软件系统，网络软件系统，标准库程序，服务性程序)</p>
<p><strong>编译程序</strong>：将高级语言编写的源程序全部语句一次全部翻译成机器语言程序，而后再执行机器语言程序（只需翻译一次)</p>
<p><strong>解释程序</strong>：将源程序的一条语句翻译成对应于机器语言的语句，并立即执行。紧接着再翻译下一句（每次执行都要翻译）</p>
<p><strong>软件和硬件的逻辑功能等价性</strong>:同一个功能，既可以用硬件实现（性能高成本高），也可以用软件实现（性能低成本也低）</p>
<p><strong>指令集体系结构(ISA)</strong>:软件和硬件之间的界面。设计计算机系统的ISA，就是要定义一台计算机可以支持哪些指令，以及每条指令的作用是什么、每条指令的用法是什么。</p>
<h2 id="5-计算机系统的层次结构"><a href="#5-计算机系统的层次结构" class="headerlink" title="5. 计算机系统的层次结构"></a>5. 计算机系统的层次结构</h2><p><img src="https://bu.dusays.com/2025/03/03/67c5124475c8f.png" alt="image-20250303102148586"></p>
<p><img src="https://bu.dusays.com/2025/03/03/67c513c53ee91.png" alt="image-20250303102820672"></p>
<h2 id="6-计算机系统的工作原理"><a href="#6-计算机系统的工作原理" class="headerlink" title="6 计算机系统的工作原理"></a>6 计算机系统的工作原理</h2><p><img src="https://bu.dusays.com/2025/03/03/67c5153c0f02b.png" alt="image-20250303103435496"></p>
<p>程序执行前，先将程序第一条指令的地址存放到PC中，取指令时，将PC的内容作为地址访问主存储器。在每条指令执行过程中，都需要计算下一条将执行指令的地址，并送至PC。若当前指令为顺序型指令，则下一条指令地址为PC的内容加上当前指令的长度；若当前指令为跳转型指令，则下一条指令地址为指令中指定的目标地址。当前指令执行完后，根据PC的内容到主存储器中取出的是下一条将要执行的指令，因而计算机能周而复始地自动取出并执行一条一条的指令。</p>
<h2 id="7-计算机性能指标"><a href="#7-计算机性能指标" class="headerlink" title="7.计算机性能指标"></a>7.计算机性能指标</h2><blockquote>
<p>（二）计算机性能指标</p>
<ul>
<li>吞吐最、响应时间；</li>
<li>CPU 时钟周期、主频、CPI ,CPU执行时间</li>
<li>MIPS， MFLOPS,GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS。；</li>
</ul>
</blockquote>
<p><img src="https://bu.dusays.com/2025/03/03/67c53e6dc60e8.png" alt="image-20250303133020163"></p>
<h3 id="7-1-存储器的性能指标"><a href="#7-1-存储器的性能指标" class="headerlink" title="7.1 存储器的性能指标"></a>7.1 存储器的性能指标</h3><p><img src="https://bu.dusays.com/2025/03/03/67c518d61ddad.png" alt="image-20250303104957574"></p>
<h3 id="7-2-CPU-性能指标"><a href="#7-2-CPU-性能指标" class="headerlink" title="7.2 CPU 性能指标"></a>7.2 CPU 性能指标</h3><p><img src="https://bu.dusays.com/2025/03/03/67c5234f35ba9.png" alt="image-20250303113431165"></p>
<p>CPU主频:CPU内数字脉冲信号振荡的频率。单位微妙，纳秒</p>
<p>CPU主频（时钟频率） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="11.039ex" height="3.115ex" role="img" focusable="false" viewbox="0 -864.9 4879.2 1376.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(2262.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(2278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(4278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(5278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g></g><rect width="4639.2" height="60" x="120" y="220"/></g></g></g></svg></mjx-container>单位Hz</p>
<p>CPI：执行一条指令所需要的时钟周期数（不同的指令，CPI不同。甚至相同的指令，CPI也可能有变化</p>
<p>CPU执行时间（整个程序的耗时）=CPU时钟周期数/主频=(指令条数*CPI)/主频</p>
<p>IPS：每秒执行多少条指令  IPS=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="7.419ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 3279 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(932.4,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">主</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">频</text></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">均</text></g><g data-mml-node="mi" transform="translate(2000,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(2760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(3511,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g><rect width="3039" height="60" x="120" y="220"/></g></g></g></svg></mjx-container>，单位KIPS，MIPS</p>
<blockquote>
<p>一秒钟有多少个时钟周期/一条指令需要多少个时钟周期，得出一秒可以执行多少指令</p>
<p>eg: 一秒吃10个鸡蛋，一口可以吃3个，问一秒能吃几口</p>
<p>​      母鸡一天生产10个鸡蛋，一顿鸡蛋汤需要5个鸡蛋，问一天能吃几顿鸡蛋汤</p>
</blockquote>
<p>FLOPS：每秒钟执行多少次浮点运算，单位KFLOPS，MFLOPS，GFLOPS，TFLOPS</p>
<p>注意：此处K，M，G，T为数量单位</p>
<p>K=Kilo=千=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.003ex" role="img" focusable="false" viewbox="0 -863.3 1436.6 885.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g></g></g></g></svg></mjx-container>,M=Million=百万=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g></g></g></g></svg></mjx-container>,G=Giga=十亿=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/></g></g></g></g></g></svg></mjx-container>，T=Tera=万亿=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g></g></g></g></g></svg></mjx-container></p>
<p>MIPS=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="57.353ex" height="2.52ex" role="img" focusable="false" viewbox="0 -864 25350.1 1114"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">指</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">令</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">条</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(4000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">执</text></g><g data-mml-node="mi" transform="translate(5389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(6389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(8389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8778,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(9278,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9667,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">执</text></g><g data-mml-node="mi" transform="translate(10667,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(11667,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(12667,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(13667,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="msup" transform="translate(14239,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g></g><g data-mml-node="mo" transform="translate(15675.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16342.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(17398.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">主</text></g><g data-mml-node="mi" transform="translate(18398.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">频</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(19398.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(19898.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(20287.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(21047.1,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(21551.1,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(22524.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="msup" transform="translate(23524.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g></g><g data-mml-node="mo" transform="translate(24961.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<ul>
<li>MFLOPS（每秒百万次<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g></g></g></g></svg></mjx-container>浮点运算）</li>
<li>GFLOPS（每秒十亿次<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/></g></g></g></g></g></svg></mjx-container>浮点运算）</li>
<li>TFLOPS（每秒万亿次<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g></g></g></svg></mjx-container>浮点运算）</li>
<li>PFLOPS（每秒千万亿<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g></g></g></g></g></svg></mjx-container>次浮点运算）</li>
<li>EFLOPS（每秒百京次<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"/></g></g></g></g></g></svg></mjx-container>浮点运算）</li>
<li>ZFLOPS（每秒十万京<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g></g></g></g></g></svg></mjx-container>次浮点运算）</li>
</ul>
<h3 id="7-3-系统整体的性能指标"><a href="#7-3-系统整体的性能指标" class="headerlink" title="7.3 系统整体的性能指标"></a>7.3 系统整体的性能指标</h3><p>数据通路带宽：数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）</p>
<p><strong>吞吐量</strong>：指系统在单位时间内处理请求的数量。</p>
<p>它取决于信息能多快地输入内存，CPU能多快地取指令，数据能多快地从内存取出或存入，以及所得结果能多快地从内存送给一台外部设备。这些步骤中的每一步都关系到主存，因此，系统吞吐量主要取决于主存的存取周期。</p>
<p><strong>响应时间</strong>: 指从用户向计算机发送一个请求，到系统对该请求做出响应并获得它所需要的结果的等待时间。</p>
<h1 id="二、数据的表示和运算"><a href="#二、数据的表示和运算" class="headerlink" title="二、数据的表示和运算"></a>二、数据的表示和运算</h1><blockquote>
<p>（一）数制与编码</p>
<ul>
<li><p>进位计数制及其数据之间的相互转换</p>
</li>
<li><p>2． 定点数的编码表示</p>
</li>
</ul>
<p>（二）运算方法和运算电路</p>
<ul>
<li>1 基本运算部件: 加法器，算术逻辑部件（ALU）</li>
<li><p>加 ／ 减运算: 补码加 ／ 减运算器，标志位的生成。</p>
</li>
<li><p>3 乘 ／ 除运算: 乘 ／ 除法运算的基本原理，乘法电路和除法电路的基本结构。</p>
</li>
</ul>
<p>（三）整数的表示和运算</p>
<ul>
<li><p>1 无符号整数的表示和运算</p>
</li>
<li><p>2． 带符号整数的表示和运算</p>
</li>
</ul>
<p>（四）浮点数的表示和运算</p>
<ul>
<li>1． 浮点数的表示: IEEE 754 标准</li>
<li>2． 浮点数的加 ／ 减运算</li>
</ul>
</blockquote>
<h2 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1.进制转换"></a>1.进制转换</h2><p>这我会，不写了</p>
<h2 id="2-定点数的表示"><a href="#2-定点数的表示" class="headerlink" title="2.定点数的表示"></a>2.定点数的表示</h2><p>注:可用原码、反码、补码三种方式来表示定点整数和定点小数。还可用移码表示定点整数。</p>
<p><img src="https://bu.dusays.com/2025/03/03/67c563ae567e1.png" alt="image-20250303160917410"></p>
<h3 id="2-1-原码"><a href="#2-1-原码" class="headerlink" title="2.1 原码"></a>2.1 原码</h3><p>原码:用尾数表示真值的绝对值，符号位“0/1”对应“正/负”</p>
<h3 id="2-2-反码"><a href="#2-2-反码" class="headerlink" title="2.2 反码"></a>2.2 反码</h3><p>反码:若符号位为0，则反码与原码相同<br>         若符号位为1，则数值位全部取反</p>
<p><img src="https://bu.dusays.com/2025/03/03/67c55a9c168b2.png" alt="image-20250303153035196"></p>
<h3 id="2-3-补码"><a href="#2-3-补码" class="headerlink" title="2.3 补码"></a>2.3 补码</h3><p>补码:正数的补码=原码<br>      (负数的补码=反码末位+1（要考虑进位)</p>
<p><img src="https://bu.dusays.com/2025/03/03/67c55c8ee239e.png" alt="image-20250303153854227"></p>
<h3 id="2-4-移码"><a href="#2-4-移码" class="headerlink" title="2.4 移码"></a>2.4 移码</h3><p>移码:补码的基础上将符易位取反。注意:移码只能用于表示整数</p>
<p><img src="https://bu.dusays.com/2025/03/03/67c55df1bf435.png" alt="image-20250303154448831"></p>
<hr>
<p><img src="https://bu.dusays.com/2025/03/03/67c56d0354455.png" alt="image-20250303164906805"></p>
<h3 id="3-各种码的作用"><a href="#3-各种码的作用" class="headerlink" title="3.各种码的作用"></a>3.各种码的作用</h3>]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/posts/e255a10a/</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><blockquote>
<p><strong>合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。</strong></p>
<p>​                                                                                             ——《老子·德经·第六十四章》                                                                                           </p>
</blockquote>
<p>写在前面：</p>
<p>本来打算写一篇最详细的计算机网络知识点，后来发现打字太累了，所以我都记书上了，这篇笔记只会更新书上写不下的笔记</p>
<hr>
<h1 id="一、计算机网络体系结构"><a href="#一、计算机网络体系结构" class="headerlink" title="一、计算机网络体系结构"></a>一、计算机网络体系结构</h1><p>本章主要考察选择题与简单计算题</p>
<blockquote>
<p>408要求</p>
<h3 id="一）计算机网络基本概念"><a href="#一）计算机网络基本概念" class="headerlink" title="(一）计算机网络基本概念"></a>(一）计算机网络基本概念</h3><p>1．计算机网络的定义、组成及功能</p>
<p>2．计算机网络的分类</p>
<p>3．计算机网络主要性能指标（速率，带宽，吞吐量…)</p>
<h3 id="（二）计算机网络体系结构"><a href="#（二）计算机网络体系结构" class="headerlink" title="（二）计算机网络体系结构"></a>（二）计算机网络体系结构</h3><p>1．计算机网络分层结构</p>
<p>2.计算机网络协议、接口、服务等概念</p>
<p>3.ISO ／OSI参考模型和 TCP／IP 模型</p>
</blockquote>
<h2 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1.计算机网络概述"></a>1.计算机网络概述</h2><h3 id="王道书中零散概念"><a href="#王道书中零散概念" class="headerlink" title="王道书中零散概念"></a>王道书中零散概念</h3><h4 id="书上知识点"><a href="#书上知识点" class="headerlink" title="书上知识点"></a>书上知识点</h4><h5 id="1-什么是计算机网络"><a href="#1-什么是计算机网络" class="headerlink" title="1.什么是计算机网络"></a>1.什么是计算机网络</h5><p>计算机网络(Computer networking）是一个将众多<strong>分散的</strong>、<strong>自治的</strong>计算机系统通过通信设备与线路连接起来，由功能完善的软件实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统</p>
<p>简而言之：计算机网络就是一些互联的、自治的计算机系统集合</p>
<p>计算机网络由若干个结点和连接这些结点的链路组成（结点可以是计算机，集线器，交换机，路由器等）</p>
<h5 id="2-计算机网络的功能"><a href="#2-计算机网络的功能" class="headerlink" title="2.计算机网络的功能"></a>2.计算机网络的功能</h5><p>计算机网络功能包括数据通信，资源共享，分布式处理，信息综合处理，负载均衡，提高可靠性等，但其中最基本的功能是数据通信功能，数据通信功能也是实现其他功能的基础</p>
<h5 id="3-计算机网络的组成"><a href="#3-计算机网络的组成" class="headerlink" title="3.计算机网络的组成"></a>3.计算机网络的组成</h5><ol>
<li><p>从组成部分来看</p>
<p>一个完整的计算机网络主要由硬件，软件，协议三大部分组成缺一不可</p>
<p>硬件：主要由主机（端系统），通讯链路（双绞线，光纤）交换设备（路由器交换机）和通信处理机（网卡）组成</p>
<p>软件：主要包括各种实现资源，共享的软件和</p>
</li>
<li><p>从工作方式来看</p>
</li>
<li><p>从功能组成来看</p>
</li>
</ol>
<h4 id="选择题知识点"><a href="#选择题知识点" class="headerlink" title="选择题知识点"></a>选择题知识点</h4><h5 id="1-3计网三大功能"><a href="#1-3计网三大功能" class="headerlink" title="1.3计网三大功能"></a>1.3计网三大功能</h5><p>数据通信，资源共享，分布式处理</p>
<h5 id="1-4逻辑功能划分"><a href="#1-4逻辑功能划分" class="headerlink" title="1.4逻辑功能划分"></a>1.4逻辑功能划分</h5><p>计算机网络从逻辑上可分为资源子网（软件），通信子网（硬件）</p>
<h5 id="1-5网络资源"><a href="#1-5网络资源" class="headerlink" title="1.5网络资源"></a>1.5网络资源</h5><p>网络资源包括硬件资源，软件资源，数据资源</p>
<h5 id="1-6资源子网与通信子网"><a href="#1-6资源子网与通信子网" class="headerlink" title="1.6资源子网与通信子网"></a>1.6资源子网与通信子网</h5><p><strong>资源子网</strong>主要由计算机系统，终端，联网外部设备，各种软件资源和信息资源等组成。资源子网负责全网的数据处理业务，负责向网络用户提供各种网络资源与网络服务</p>
<p><strong>通信子网</strong>只要由通信处理机，通信线路，和其他通信设备组成。其任务是完成网络数据传输，转发等。</p>
<p>通信子网对应OSI参考模型的下三层，包括物理层，数据链路层和网络层。通过通信子网连接在一起的计算机负责运行对信息处理的应用程序，他们是网络中信息流动源和宿，向网络用户提供可共享的硬件、软件和信息资源，构成资源子网。网桥，交换机，路由器都属于通信子网中的硬件设施</p>
<h5 id="1-7计网分类"><a href="#1-7计网分类" class="headerlink" title="1.7计网分类"></a>1.7计网分类</h5><ul>
<li>按分布范围分类：广域网、城域网、局域网、个人区域网。</li>
<li>按拓扑结构分类：星形网络、总线形网络、环形网络、网状网络。</li>
<li>按传输技术分类：广播式网络、点对点网络。</li>
<li>按使用者分类：公用网、专用网。</li>
<li>按数据交换技术分类：电路交换网、报文交换网、分组交换网。</li>
</ul>
<h5 id="1-8广域网城域网"><a href="#1-8广域网城域网" class="headerlink" title="1.8广域网城域网"></a>1.8广域网城域网</h5><p>广域网和局域网之间的差异不仅在于它们所覆盖范围的不同，还在于它们所采用的协议和网络技术的不同，广域网使用点对点等技术（交换技术），局域网使用广播技术。</p>
<p>目前局域网接入广域网主要是通过称为路由器的互联设备来实现的。</p>
<p>广域网覆盖范围较广、结点较多，为了保证可靠性和可扩展性，通常需采用网状结构</p>
<h5 id="1-9广播式网络"><a href="#1-9广播式网络" class="headerlink" title="1.9广播式网络"></a>1.9广播式网络</h5><p>广播式网络共享广播信道（如总线），通常是局域网的一种通信方式（局域网工作在数据链路层），因此不需要网络层，因而也不存在路由选择问题。但数据链路层使用物理层的服务必须通过服务访问点实现。</p>
<h5 id="1-10分组交换"><a href="#1-10分组交换" class="headerlink" title="1.10分组交换"></a>1.10分组交换</h5><p>分组交换要求把数据分成大小相当的小数据片，每片都要加上控制信息（如目的地址），因而传送数据的总开销较大。相比其他交换方式，分组交换信道利用率高。传播时延取决于传播介质及收发双方的距离。对各种交换方式，不同规格的终端都很难相互通信，因此它不是分组交换的缺点。</p>
<h5 id="1-11"><a href="#1-11" class="headerlink" title="1.11"></a>1.11</h5><p>ARPANet是最早的计算机网络，它是因特网（Internet）的前身。</p>
<h4 id><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络期末版</title>
    <url>/posts/fc2c180e/</url>
    <content><![CDATA[<h1 id="计算机网络期末考试版"><a href="#计算机网络期末考试版" class="headerlink" title="计算机网络期末考试版"></a>计算机网络期末考试版</h1><p>————————————————————-参考b站《网络工程师学长》</p>
<blockquote>
<p><strong>千淘万漉虽辛苦，吹尽狂沙始到金</strong>。</p>
<p>​                                      ——刘禹锡《浪淘沙九首》</p>
</blockquote>
<h2 id="一、计算机网络概述"><a href="#一、计算机网络概述" class="headerlink" title="一、计算机网络概述"></a>一、计算机网络概述</h2><h3 id="1-计网定义-重要"><a href="#1-计网定义-重要" class="headerlink" title="1.计网定义(重要)"></a>1.计网定义(重要)</h3><p>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路链接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>
<h3 id="2-计网组成"><a href="#2-计网组成" class="headerlink" title="2.计网组成"></a>2.计网组成</h3><ul>
<li>终端系统/资源子网：提供共享的软件资源和硬件资源</li>
<li>通信子网：提供信息交换的网络结点和通信线路。</li>
</ul>
<h3 id="3-计网类型"><a href="#3-计网类型" class="headerlink" title="3.计网类型"></a>3.计网类型</h3><ul>
<li>按照拓朴分类： 星型结构 树形结构 总线型结构 环形结构 网状结构</li>
<li>按照范围分类：局域网LAN 城域网MAN 广域网 WAN 补充：个人区域网PAN 互联网Internet</li>
<li>按照传输方式分类：有线网络（IEEE802.3） 无线网络：（ IEEE802.11 WLAN无线局域网（wireless） WPAN无线个域网）</li>
</ul>
<h3 id="4-传输方式"><a href="#4-传输方式" class="headerlink" title="4.传输方式"></a>4.传输方式</h3><ul>
<li>按照传输的方向分：<ul>
<li>单工：只能单方向传输的工作模式</li>
<li>双工：在同一时间，线路上只能允许一个方向的数据通过</li>
<li>全双工：双方可以同时进行数据通信</li>
</ul>
</li>
<li>按照传输对象（方式）分：<ul>
<li>单播： 1对1</li>
<li>多播：1对多</li>
<li>广播：1对all</li>
</ul>
</li>
</ul>
<h3 id="5-数据交换"><a href="#5-数据交换" class="headerlink" title="5.数据交换"></a>5.数据交换</h3><ul>
<li>电路交换：整个报文从源头到终点连续的传输</li>
<li>报文交换：整个报文先传达到相邻节点，全部存储下来查找转发表，再转发到下一个节点</li>
<li>分组交换：将一个报文分成多个分组，传送到相邻结点，在查找转发表，在转发到下一个结点</li>
</ul>
<h3 id="6-通信协议和体系结构："><a href="#6-通信协议和体系结构：" class="headerlink" title="6.通信协议和体系结构："></a>6.通信协议和体系结构：</h3><h4 id="1-网络协议三要素："><a href="#1-网络协议三要素：" class="headerlink" title="1.网络协议三要素："></a>1.网络协议三要素：</h4><p>语法 语义 时序</p>
<h4 id="2-OSI参考模型：-重要"><a href="#2-OSI参考模型：-重要" class="headerlink" title="2.OSI参考模型：(重要)"></a>2.OSI参考模型：(重要)</h4><ul>
<li><p>应用层：使用应用程序通过网络服务。</p>
</li>
<li><p>表示层：表示层用于处理交互数据的表示方式，例如格式转换，数据的加密和解密，数据压缩和回复等功能</p>
</li>
<li>会话层：负责维护通信中两个结点之间的会话建立维护和断开，以及数据的交换</li>
<li>传输层：提供端到端之间的数据传输服务，实现对数据进行控制和操作的功能。</li>
<li>网络层：单位 分组，在数据链路层的基础之上，提供点到点之间的通信，提供路由功能，实现拥塞控制，网络互联等功能。</li>
<li>数据链路层：单位 帧，在物理层的基础之上，提供结点到结点之间的服务，采取差错控制和流量控制的方法实现网路互联</li>
<li>物理层：单位bit，利用传输介质为通信的网络节点之间的建立</li>
</ul>
<h4 id="3-TCP-IP参考模型："><a href="#3-TCP-IP参考模型：" class="headerlink" title="3.TCP/IP参考模型："></a>3.TCP/IP参考模型：</h4><ul>
<li><p>网络接口层：物理层和数据链路层</p>
</li>
<li><p>网际层：网络层</p>
</li>
<li>传输层</li>
<li>应用层：会话层，表示层，应用层</li>
</ul>
<h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><h3 id="1-物理层的基本概念："><a href="#1-物理层的基本概念：" class="headerlink" title="1.物理层的基本概念："></a>1.物理层的基本概念：</h3><h4 id="1-四大特征"><a href="#1-四大特征" class="headerlink" title="1.四大特征"></a>1.四大特征</h4><ul>
<li>机械特性：接口是怎么样的</li>
<li>电气特性：用多少伏的电</li>
<li>功能特性：线路上电平电压的特性</li>
<li>过程特性：实现不同功能所发射信号的顺序</li>
</ul>
<h4 id="2-两种信号"><a href="#2-两种信号" class="headerlink" title="2.两种信号"></a>2.两种信号</h4><ul>
<li>模拟信号—特定频段的信号—有更加丰富的表现形式———抗干扰能力弱</li>
<li>数字信号—不是1就是0————抗干扰能力强</li>
</ul>
<h4 id="3-调制和编码"><a href="#3-调制和编码" class="headerlink" title="3.调制和编码"></a>3.调制和编码</h4><ol>
<li><p>调制：模拟信号转换</p>
</li>
<li><p>编码：</p>
<p>   数字信号转换</p>
<p>   编码的步骤：采样 量化 编码</p>
</li>
<li><p>区别：</p>
<p>数据可以通过编码手段转成数字信号，也可以通过调制手段将数据转成模拟型号。</p>
<p>数字数据可以通过数字发送器转化为数字信号（编码），也可以通过调制器转化为模拟信号。</p>
<p>模拟信号可以通过PCM编码器转化为数字信号（编码），也可以通过放大器调制器转化为模拟型号（调制）。</p>
</li>
</ol>
<h4 id="4-传输介质"><a href="#4-传输介质" class="headerlink" title="4.传输介质"></a>4.传输介质</h4><p>1.双绞线：传输距离100-500（中继器 最多四个，超过就失真了）</p>
<ul>
<li><p>屏蔽双绞线STP：抗干扰强，贵一些</p>
</li>
<li><p>非屏蔽双绞线：便宜，抗干扰差</p>
</li>
<li><p>制作标准：</p>
<p>568B：橙白，橙，绿白，蓝，蓝白，绿，棕白，棕 ：八种</p>
<p>568A: 13，26调换—绿白，绿，绿白，蓝，蓝白，橙，棕白，棕</p>
</li>
</ul>
<p>2.光纤：</p>
<ul>
<li>多模光纤：</li>
</ul>
<p>​      芯较粗（50或62.5）。可以传多种模式的光。但其模间色散较大，这就限制了传输数字信号的频率，而且随距离的增加会更加的严重。例如：600MB/KM的光纤在2KM时只有300MB的宽带了。因此多模光纤传输距离就比较的近，一般只有几公里。</p>
<p>   距离：2KM</p>
<ul>
<li>单模光纤：</li>
</ul>
<p>​        单模光纤：中间纤芯很细（芯径一般是8-10），只能传一种模式的光，因此。其模间色散很小，适合语远程通讯，但还存在着材料色散和波导色散，这样单模光纤对光源的谱宽和稳定性有较高的要求，即谱宽要窄。稳定性要好。</p>
<p>​     距离：100KM</p>
<p>3.同轴电缆：淘汰了</p>
<p>4.无线：无线信号频率 IEEE802.11</p>
<h4 id="5-三大部分"><a href="#5-三大部分" class="headerlink" title="5.三大部分"></a>5.三大部分</h4><ul>
<li>源系统：发送数据的一端</li>
<li>传输系统：传输过程中的各种传输介质</li>
<li>目的系统：接收数据的电脑</li>
</ul>
<h3 id="2-物理层的基本通讯技术"><a href="#2-物理层的基本通讯技术" class="headerlink" title="2.物理层的基本通讯技术"></a>2.物理层的基本通讯技术</h3><h4 id="1-四种信道复用技术"><a href="#1-四种信道复用技术" class="headerlink" title="1.四种信道复用技术"></a>1.四种信道复用技术</h4><h5 id="复用技术"><a href="#复用技术" class="headerlink" title="复用技术"></a>复用技术</h5><ul>
<li>复用技术是指一种在传输路径上综合多路道信道，然后恢复原机制或则解除终端各信道复用技术的过程</li>
<li>将多种不同的信号在同一信道上进行传输，复用技术主要是用来解决不同信号传输时应该如何区分。</li>
</ul>
<h5 id="1-频分复用FDM"><a href="#1-频分复用FDM" class="headerlink" title="1.频分复用FDM"></a>1.频分复用FDM</h5><ul>
<li>频分多路复用，是在适于某种传输媒介的传输频带内，若干个频谱互不重叠的信号一并传输的方式，简称FDM。在每路信号进入传输频带前，先要以此搬移频率（调制），而在接收端，在搬回到原来的频段，恢复每路的原信号，从而使传输频带得到多路信号的复用。</li>
<li>划分不同频率来并行传输信号</li>
</ul>
<h5 id="2-时分复用TDM"><a href="#2-时分复用TDM" class="headerlink" title="2.时分复用TDM"></a>2.时分复用TDM</h5><ul>
<li><p>时分复用TDM是采用同一物理连接的不同时段来传输不同的信号，也能达到多路传输的此目的。时分多路复用以时间作为信号分割的参量，故必须使各路信号在时间轴上互不重叠。时分复用TDM就是将提供给整个信道传输信息的时间划分为若干时间片（简称时隙），并将这些时隙分给每一个信号源使用</p>
</li>
<li><p>划分不同的时间段来传输信号</p>
</li>
</ul>
<h5 id="3-波分复用WDM（波）"><a href="#3-波分复用WDM（波）" class="headerlink" title="3.波分复用WDM（波）"></a>3.波分复用WDM（波）</h5><ul>
<li>是将两种或多种不i同波长的光载波信号（携带各种信息）在发送端经复用器（亦称合波器）汇合在一起，并耦合到光线路的同一根光纤中进行传输技术</li>
<li>根据光波的波长进行传输（合波器耦合）</li>
</ul>
<h5 id="4-码分复用-CDM"><a href="#4-码分复用-CDM" class="headerlink" title="4.码分复用 CDM"></a>4.码分复用 CDM</h5><ul>
<li>码分复用CDM是靠不同的编码来区分各路原始信号的一种复用方式，主要和各种多址技术结合产生了各种接入技术，包括无线和有线接入。</li>
<li>在同一时间同一频率根据传输的数据码进行区分</li>
</ul>
<h4 id="2-数据传输方式"><a href="#2-数据传输方式" class="headerlink" title="2.数据传输方式"></a>2.数据传输方式</h4><h5 id="1-通过同时间传输数量分为"><a href="#1-通过同时间传输数量分为" class="headerlink" title="1.通过同时间传输数量分为"></a>1.通过同时间传输数量分为</h5><ul>
<li><p>串行传输</p>
<p>使用一条数据线，将数据一位一位的依次输入，每一位数据占据一个固定的时间长度。只需要少数几条先就可以在系统间交换信息，特别适用于计算机语计算机，外设之间的远距离通信。</p>
</li>
<li><p>并行传输</p>
<p>并行传输指的是数据以成组的方式，在多条并行信道上同时进行传输，是在传输中有多个数据位同时在设备之间进行的传输。</p>
</li>
</ul>
<h5 id="2-通过数据报文的双方的行为分为"><a href="#2-通过数据报文的双方的行为分为" class="headerlink" title="2.通过数据报文的双方的行为分为"></a>2.通过数据报文的双方的行为分为</h5><ul>
<li><p>同步传输</p>
<p>同步：在计算机网络中，定时的因素称为位同步。同步是要接收按照发送放放送的每个位的起止时刻和速率来接受数据，否则会产生误差。</p>
<p>同步传输的比特分组要大得多。他不会独立的发送每个字符，每个字符都有自己的开始位和停止位，而是把他们组合起来发送。我们将这些组合称为数据帧，或简称帧</p>
</li>
<li><p>异步传输：</p>
<p>异步传输将比特分成小组进行传输，小组可以是8位的1个字符或更长。发送方可以在任何时刻发送这些比特组，而接受方从不知道它们会在什么时候到达。</p>
</li>
</ul>
<p><strong>3.过传输的信号分</strong></p>
<ul>
<li>基带传输：传输数字信号叫做基带传输</li>
<li>频带传输：传输模拟信号叫做频带传输（300-3400HZ）</li>
</ul>
<h5 id="4-提高传输方向分"><a href="#4-提高传输方向分" class="headerlink" title="4.提高传输方向分"></a>4.提高传输方向分</h5><ul>
<li>单工 半双工 全双工</li>
</ul>
<h5 id="5-通过传输对象分"><a href="#5-通过传输对象分" class="headerlink" title="5.通过传输对象分"></a>5.通过传输对象分</h5><ul>
<li>单播 组播 广播</li>
</ul>
<h2 id="三-数据链路层"><a href="#三-数据链路层" class="headerlink" title="三.数据链路层"></a>三.数据链路层</h2><h3 id="1-数据链路层的基础概念"><a href="#1-数据链路层的基础概念" class="headerlink" title="1.数据链路层的基础概念"></a>1.数据链路层的基础概念</h3><h4 id="1-1数据链路层的概念"><a href="#1-1数据链路层的概念" class="headerlink" title="1.1数据链路层的概念"></a>1.1数据链路层的概念</h4><p>​      数据链路层是在物理层和网际层之间的协议，提供相邻结点的可靠数据传输</p>
<h4 id="1-2帧的概念"><a href="#1-2帧的概念" class="headerlink" title="1.2帧的概念"></a>1.2帧的概念</h4><ul>
<li><p>数据链路层的协议数据单元</p>
</li>
<li><p>组成：</p>
<p>帧头：源MAC地址，目的MAC地址，类型（MAC地址用于在网络中唯一标示一个网卡，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址）</p>
<p>数据</p>
<p>帧尾：校验</p>
</li>
</ul>
<h4 id="1-3以太网数据帧中的MAC和LLC"><a href="#1-3以太网数据帧中的MAC和LLC" class="headerlink" title="1.3以太网数据帧中的MAC和LLC"></a>1.3以太网数据帧中的MAC和LLC</h4><ul>
<li><p>MAC（一种协议，对接物理层）</p>
<p>   MAC介质控制访问</p>
<p>​    作用：数据帧的封装/卸载，帧的寻址和识别，帧的接收语发送，链路的管理，帧的差错控制等。MAC子层的存在屏蔽了不同的物理链路层种类的差异性</p>
</li>
<li><p>LLC（对接网络层）</p>
<p>LLC逻辑控制访问</p>
<p>作用：LLC子层的主要功能为传输可靠性保障和控制，数据包的分段与重组。数据包的顺序传播。</p>
</li>
<li><p>注解：</p>
<p>该协议位于OSI七层协议中数据链路层，数据链路层分为上层LLC（逻辑链路控制），和下层的MAC（媒体访问控制），MAC主要负责控制与链接物理层的物理介质。在发送数据的时候，MAC协议可以事先判断是否发送数据，如果可以发送将给数据加上一些控制信息，最终将数据以及控制信息以规定的格式发送到物理层；在接收数据的时候，MAC协议首先判断输入的信息并是否发生传输错误，如果没有错误，则去掉控制信息发送至LLC（逻辑链路控制）层。</p>
</li>
</ul>
<h4 id="1-4数据链路层的两种传输方式"><a href="#1-4数据链路层的两种传输方式" class="headerlink" title="1.4数据链路层的两种传输方式"></a>1.4数据链路层的两种传输方式</h4><p>单播 广播</p>
<h4 id="1-5数据链路层的三个基本问题（-）"><a href="#1-5数据链路层的三个基本问题（-）" class="headerlink" title="1.5数据链路层的三个基本问题（*）"></a>1.5数据链路层的三个基本问题（<em>*</em>）</h4><ul>
<li><p>封装成帧（PPP）</p>
<p>封装成帧就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧，接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p>
</li>
<li><p>透明传输</p>
<p>透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传输</p>
</li>
<li><p>差错检测（奇数校验 偶数校验 CRC：需要计算）</p>
<p>收到正确的帧就要向发送端发送确认，发送算在一定的期限内若没有收到对方的确认，就认为出现了差错，因而就进行重传，直到收到对方的确认为止，</p>
</li>
</ul>
<h4 id="1-6局域网中的设备"><a href="#1-6局域网中的设备" class="headerlink" title="1.6局域网中的设备"></a>1.6局域网中的设备</h4><ul>
<li>网桥（在物理层和数据链路层之间）</li>
</ul>
<p>​       两个端口的交换机</p>
<ul>
<li>集线器（在物理层 共享带宽）</li>
</ul>
<p>​           集线器的英文为：“HUB”是“中心”的意思，集线器的主要功能是对接受的信号进行再生整形放大，以扩大网络的传输距离，同时把所有结点集中在以它为中心的结点上。</p>
<ul>
<li>交换机（数据链路层 独享带宽）</li>
</ul>
<p>​         交换机（Switch）意为“开关”是一种用于电（光）信号转发的网络设备。它可以为接入交换机的任意两个网络结点提供独享的电信号通路。最常见的交换机式以太网交换机。</p>
<h3 id="2数据链路层的通信协议"><a href="#2数据链路层的通信协议" class="headerlink" title="2数据链路层的通信协议"></a>2数据链路层的通信协议</h3><h4 id="2-1冲突域和广播域（-）"><a href="#2-1冲突域和广播域（-）" class="headerlink" title="2.1冲突域和广播域（*）"></a>2.1冲突域和广播域（*）</h4><ul>
<li><p>冲突域</p>
<p>交换机的每一个端口都是一个冲突域；冲突域只能发生在一个网段</p>
</li>
<li><p>广播域</p>
<p>交换机的所有端口都在一个广播域；广播域在一个或多个网段内发生</p>
</li>
<li><p>区别</p>
<ol>
<li><p>广播域可以跨网段</p>
</li>
<li><p>冲突域是基于第一层（物理层），而广播域是基于第二层（数据链路层）</p>
</li>
<li><p>HUB所有端口都在同一个广播域，冲突域内，Switch所有端口都在同意广播域内，而每一个端口就是一个冲突域。</p>
</li>
<li><p>同一冲突域共享宽带</p>
</li>
</ol>
</li>
</ul>
<h4 id="2-2虚拟局域网（实验）VLAN（-）"><a href="#2-2虚拟局域网（实验）VLAN（-）" class="headerlink" title="2.2虚拟局域网（实验）VLAN（***）"></a>2.2虚拟局域网（实验）VLAN（***）</h4><ul>
<li><p>VLAN（Virtual local Area Network）即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。VLAN间不能直接通信，而VLAN间不能直接通信，从而将广播报文限制在一个VLAN内。</p>
</li>
<li><p>优点和目的</p>
<ol>
<li><p>划分广播域：减少垃圾数据</p>
</li>
<li><p>增强局域网的安全性</p>
</li>
<li><p>提高健壮性</p>
</li>
<li><p>灵活构建工作组</p>
</li>
</ol>
</li>
<li><p>划分VLAN的方式</p>
<ol>
<li><strong>基于端口</strong></li>
</ol>
<p>​           给交换机的每个接口配置不同的PVID，当一个数据帧进入交换机接口时，如果没有带VLAN标签，且该接口上配置了PVID。如果进入的帧已经带有VLAN标签，那么交换机不会在增加VLAN标签，即使接口已经配置了PVID</p>
<p>​          Access：只允许通过一个VLAN</p>
<p>​          Trunk：允许通过多个VLAN</p>
<p>​          Hybird</p>
<ol>
<li><strong>基于子网</strong></li>
</ol>
<p>​          配置好子网域VLAN映射表，如果交换设备收到的是untagged（不带VLAN标签）帧，交换设备根据报文中的源IP地址信息，确认添加的VLAN iD。将指定网段或IP地址发出的报文在指定的VLAN中传输，减轻了网络管理着的任务量，且有利于管理</p>
<ol>
<li><strong>基于MAC地址</strong></li>
</ol>
<p>​       先配置好MAC地址和VLAN映射关系表，当终端用户的物理位置发生改变，不需要重新配置VLAN。提高了终端用户的安全性和接入的灵活性</p>
<ol>
<li><strong>基于协议</strong></li>
</ol>
<p>​        将网络中提供的服务类型域VLAN相绑定，方便管理和维护。需要对网络中所有的协议类型和VLAN ID 的映射关系表进行初始配置。需要分析各种协议的地址格式并进行相应的转换，消耗交换机较多的资源，速度上稍具劣势。</p>
<ol>
<li><strong>基于匹配策略</strong></li>
</ol>
<p>​      先在交换机上配置好终端的MAC地址和IP地址，并与VLAN 并联。只有符合条件的终端才能加入指定VLAN。符合策略的终端加入指定VLAN后，严禁修改IP地址和MAC地址，否则会导致终端从指定VLAN中退出。</p>
</li>
</ul>
<h4 id="2-3-CSMA-CD（总线型）（-）"><a href="#2-3-CSMA-CD（总线型）（-）" class="headerlink" title="2.3: CSMA/CD（总线型）（*）"></a>2.3: CSMA/CD（总线型）（<em>*</em>）</h4><ul>
<li>CSDN/CD即载波侦听多路访问/冲突检测，是广播信道中采用一种随机访问技术的竞争型访问方法，具有多目标地址的特点，总线型网络传输数据</li>
<li>四大特点（重要）</li>
</ul>
<p>​         先听再发<br>​         边听边发<br>​         冲突停止<br>​          延迟后发</p>
<h4 id="2-4-PPP（单播）"><a href="#2-4-PPP（单播）" class="headerlink" title="2.4: PPP（单播）"></a>2.4: PPP（单播）</h4><ul>
<li>点对点通信是一对一通道，因此不会发生碰撞，因此比较简单，采用PPP协议；其中PPP协议就是用户计算机和ISP（互联网服务提供商）进行通信时使用的数据链路层的协议</li>
<li>PPP最初设计是为两个对等节点之间的IP流量传输提供一种封装协议。</li>
</ul>
<h4 id="2-5-CRC（需要单独的深入学习）"><a href="#2-5-CRC（需要单独的深入学习）" class="headerlink" title="2.5: CRC（需要单独的深入学习）"></a>2.5: CRC（需要单独的深入学习）</h4><ul>
<li>循环冗余校验</li>
<li><p>是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。循环冗余检查（CRC）是一种数据传输检错功能。l</p>
</li>
<li><p>例题：要发送的数据为1101011011，采用CRC的生成多项式是P（x）=x^4+x+1.求余数。</p>
</li>
</ul>
<h2 id="四-网络层"><a href="#四-网络层" class="headerlink" title="四.网络层"></a>四.网络层</h2><h3 id="1-网络层的作用"><a href="#1-网络层的作用" class="headerlink" title="1.网络层的作用"></a>1.网络层的作用</h3><ul>
<li>提供点到点的服务 单位：分组</li>
<li>网络层的目的是实现两个端系统之间的数据透明传输，具体功能包括寻址和路由选择，连接的建立，保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。</li>
</ul>
<h3 id="2-网际层协议IP"><a href="#2-网际层协议IP" class="headerlink" title="2.网际层协议IP"></a>2.网际层协议IP</h3><ul>
<li><p>ARP地址解析协议</p>
<p>根据IP地址获取物理地址</p>
</li>
<li><p>RARP反地址解析协议</p>
</li>
<li><p>ICMP网际控制报文协议</p>
<p>通过ICMP传输控制消息，控制消息是指网络通不通，主机是否可达，路由是否可用等网络本身的消息。</p>
</li>
<li><p>IGMP网际组管理协议</p>
<p>适用于管理协议多播组成员的一种通信协议。IP主机和相邻路由器利用IGMP来创建多播组的组成员。组播方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费</p>
</li>
</ul>
<h3 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3.IP地址"></a>3.IP地址</h3><h4 id="3-1IP地址的概念"><a href="#3-1IP地址的概念" class="headerlink" title="3.1IP地址的概念"></a>3.1IP地址的概念</h4><ul>
<li><p>IP地址使IP协议提供的一种统一的地址格式，他为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p>
</li>
<li><p>组成：一个IP地址由4个字节，32位组成，一般用点分十进制的方式表现，</p>
</li>
<li><p>IP地址和MAC地址的区别</p>
<ol>
<li><p>IP地址是一个逻辑地址，MAC地址是物理地址</p>
</li>
<li><p>MAC地址是唯一的但是IP地址不受唯一的</p>
</li>
<li><p>MAC地址主要是工作在第二层，IP地址在网际层</p>
</li>
<li><p>MAC地址是48位，IP地址一般是32位（v6是128位）</p>
</li>
<li><p>IP地址的分配取决于网络拓扑，MAC地址分配取决于制造商</p>
</li>
</ol>
</li>
</ul>
<h4 id="3-2IP地址的组成"><a href="#3-2IP地址的组成" class="headerlink" title="3.2IP地址的组成"></a>3.2IP地址的组成</h4><ul>
<li><p>主机地址和网络地址组成的</p>
</li>
<li><p>主机地址/主机号</p>
<p>   标识某一台设备的地址</p>
</li>
<li><p>网络地址/网络号</p>
<p>   标识某一网段的地址</p>
</li>
<li><p>子网掩码</p>
<p>子网掩码用于区分网络号和主机号</p>
<p>它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只能有一个作用，就是将某一个IP地址划分成为网络地址和主机地址两部分</p>
</li>
</ul>
<h4 id="3-3IP地址的分类"><a href="#3-3IP地址的分类" class="headerlink" title="3.3IP地址的分类"></a>3.3IP地址的分类</h4><h5 id="3-3-1A类"><a href="#3-3-1A类" class="headerlink" title="3.3.1A类"></a>3.3.1A类</h5><ul>
<li>一个A类IP地址是指，在IP地址的四段号码中，第一段号为网络号码，剩下的三段号码为本地计算机的号码。A类IP地址中网络的标识长度为8位，主机标识的长度为24位，A类网络地址数量较少，有126个网络，每一个网络可以容纳主机数量高达1600多万台. A类IP地址 地址范围1.0.0.1到127.255.255.254</li>
<li>第一个字节为网络号，第一个字节第一位为0</li>
</ul>
<h5 id="3-3-2B类"><a href="#3-3-2B类" class="headerlink" title="3.3.2B类"></a>3.3.2B类</h5><ul>
<li>一个B类地址是指，在IP地址的四段号码中，前两段号码为网络号码。B类IP地址中网络的标识长度为16位，主机标识的长度为16位，B类网络地址适用于中等规模的网络，有16384个网络，每个网络所能容纳的计算机数6万多台。 B类IP地址 地址范围128.0.01-191.255.255.254</li>
<li>前两个字节为网络号，第一个字节前两位是10</li>
</ul>
<h5 id="3-3-3C类"><a href="#3-3-3C类" class="headerlink" title="3.3.3C类"></a>3.3.3C类</h5><ul>
<li>一个C类IP地址是指，在IP地址的四段号码中，前三段号码为网络号码，剩下的一段号码为本地计算机的号码。C类IP地址中网络的标识长度为24位，主机标识的长度为8位，C网络地址数量较多，有209万余个网络。适用于小规模的局域网络，每个网络最多只能包含254台计算机。C类IP地址范围192.0.0.1-223.255.255.254</li>
<li>前三个字节为网络号，第一个字节前两位是110</li>
</ul>
<h5 id="3-3-4D类"><a href="#3-3-4D类" class="headerlink" title="3.3.4D类"></a>3.3.4D类</h5><ul>
<li>D类IP地址在历史上呗叫做多播地址，及组播地址。在以太网中，多播地址命名了一组应该在这个网络中应用接收到一个分组的站点。多播地址的最高位必须是“1110”，范围从224.0.0.0到239.255.255.255</li>
</ul>
<h5 id="3-3-5E类"><a href="#3-3-5E类" class="headerlink" title="3.3.5E类"></a>3.3.5E类</h5><ul>
<li>保留</li>
</ul>
<h5 id="3-3-6特殊地址"><a href="#3-3-6特殊地址" class="headerlink" title="3.3.6特殊地址"></a>3.3.6特殊地址</h5><ul>
<li>网络地址：主机号全为0的地址不可用</li>
<li>广播地址：主机号全为1的地址不可用</li>
<li>回环地址：127.0.0.0 测试使用</li>
</ul>
<h4 id="4-IPv6"><a href="#4-IPv6" class="headerlink" title="4.IPv6"></a>4.IPv6</h4><p>​          因为IPv4地址满足不了需求，出现匮乏的情况，所以就诞生了IPv6地址继续使用。v6地址由128位，16字节组成，一般表现形式为十六进制。</p>
<h3 id="4-网络层的路由"><a href="#4-网络层的路由" class="headerlink" title="4.网络层的路由"></a>4.网络层的路由</h3><h4 id="4-1路由"><a href="#4-1路由" class="headerlink" title="4.1路由"></a>4.1路由</h4><p>路由是什么？</p>
<p>路由是指分组从源到目的地时，决定端到端路径的网络范围的进程。路由是指导报文转发的路径信息，通过路由可以确认转发IP报文的路径</p>
<p>路由是网络层最主要的工作任务</p>
<p>路由器</p>
<p>网络层的基础设备</p>
<p>数据转发</p>
<p>一个端口代表一个网段，路由器中存放着通往各个网段的表格，叫做路由表</p>
<p>路由表</p>
<p>又称路由择域信息库，是一个存储在路由器或者联网计算机中的电子表格（文件）或者类数据库。路由表存储着指向特定网络地址的路径</p>
<p>网关</p>
<p>又称网间连接器，协议转换器。用于两个高层协议不同的网络互连。网关既可以用于广域网互连，也可以用于局域网互连</p>
<p>路由获取方式</p>
<p>直连路由</p>
<p>静态路由</p>
<p>动态路由</p>
<h4 id="4-2路由的配置方式"><a href="#4-2路由的配置方式" class="headerlink" title="4.2路由的配置方式"></a>4.2路由的配置方式</h4><ul>
<li><p>静态路由</p>
<p>静态路由：由管理员手工配置，配置方便，对系统要求低，适用于拓扑结构简单稳定的小型网络</p>
<p>缺省路由：是一种特殊的路由，当报文没有在路由表中找到匹配的具体表项时才能使用的路由</p>
</li>
<li><p>动态路由</p>
<ol>
<li>动态路由</li>
</ol>
<p>​         通过动态路由协议来实现不同网段的路由互通</p>
<p>​          动态路由协议有自己的路由算法，能够自动适应网络拓扑的变化，适用于具有一定数量的三层设备的网络</p>
<ol>
<li>动态路由协议</li>
</ol>
<p>​       RPI：路由信息协议</p>
<p>​                基于矢量的动态路由协议</p>
<p>​                适用于中小规模的网络拓扑，最大跳数为15</p>
<p>​       OSPF开放式最短路径优先</p>
<p>​                 基于链路状态的路由</p>
<p>​                 使用SPF算法，计算最短路径。树形协议</p>
<p>​        BGP是自治系统间的路由协议。自治系统之间的路由协议</p>
<p>​                 自治系统间的路由协议</p>
<p>​        IS-IS：中间系统到中间系统</p>
<p>​                 与OSPF类似，IS-IS是基于路由路划分区域，OSPF                       利用接口划分</p>
<p>​                 内部网关协议</p>
</li>
<li><p>RIP和OSPF的区别</p>
<p>RIP是基于矢量的协议，OSPF是基于链路状态</p>
<p>RIP适用于中小型网络拓扑，OSPF适用于较大规模的网络</p>
<p>OSPF支持可变长度子网掩码（VLSM）。RIP不支持</p>
<p>ODPF的收敛速度比RIP更加的迅速</p>
</li>
</ul>
<h2 id="五-传输层"><a href="#五-传输层" class="headerlink" title="五.传输层"></a>五.传输层</h2><h3 id="1-传输层概念"><a href="#1-传输层概念" class="headerlink" title="1.传输层概念"></a>1.传输层概念</h3><h4 id="1-1传输层"><a href="#1-1传输层" class="headerlink" title="1.1传输层"></a>1.1传输层</h4><ul>
<li>传输层提供端到端服务</li>
<li>从通信和信息处理的角度看，传输层向上层应用层提供通信服务</li>
<li>所谓的端口，就好像是门牌号一样，客户端可以通过IP地址找到对应的服务器端，但是服务器端是有很多的端口的，每个应用程序对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口号进行区分，将每个端口进行编号，这就是端口号</li>
</ul>
<h4 id="1-2端口号"><a href="#1-2端口号" class="headerlink" title="1.2端口号"></a>1.2端口号</h4><ul>
<li><p>FTP: 21（20）*</p>
<p>FTP（文件传输协议）</p>
<p>21连接；20传输数据</p>
</li>
<li><p>TELNET: 23*：TELNET(远程登录)</p>
</li>
<li><p>SMTP: 25*</p>
<p>SMTP(电子邮件传输协议)</p>
<p>POP3（邮局协议版本3）：110</p>
</li>
<li><p>DNS: 53*：DNS（域名系统）</p>
</li>
<li><p>TFTP: 69: TFTP（简单文件传输协议）</p>
</li>
<li><p>HTTP: 80*：HTTP（超文本传输协议）</p>
</li>
<li><p>SNMP: 161: SNMP（简单网络管理协议）</p>
</li>
<li><p>HTTPS: 443*：HTTPS（超文本传输安全协议）</p>
</li>
</ul>
<h3 id="2-传输层的两个重要协议"><a href="#2-传输层的两个重要协议" class="headerlink" title="2.传输层的两个重要协议"></a>2.传输层的两个重要协议</h3><h4 id="2-1-TCP"><a href="#2-1-TCP" class="headerlink" title="2.1 TCP"></a>2.1 TCP</h4><p>传输控制协议：TCP</p>
<p>TCP是TCP/IP体系中较为复杂的协议，是传输层中最重要的协议</p>
<p>TCP的主要特点是：</p>
<ul>
<li>TCP是面向连接的传输层协议</li>
<li>TCP提供可靠的交付服务</li>
<li>TCP提供全双工通信</li>
<li>TCP是面向字节流</li>
</ul>
<p>窗口</p>
<ul>
<li><p>固定窗口：如果窗口过小，当传输比较大的数据的时候需要不停的对数据进行确认，这个时候就会造成很大的延迟</p>
</li>
<li><p>滑动窗口：滑动窗口通俗的讲就是一种流量控制技术。它本质上是描述接收方TCP数据报缓冲区大小的数据，发送根据这个数据来计算自己最多能发送所长的数据，如果发送方收到接收方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接受方发送窗口大小不为0的数据报的到来</p>
</li>
<li>拥塞处理和流量控制</li>
</ul>
<p>TCP的三次握手和流量控制</p>
<h4 id="3-2-UDP"><a href="#3-2-UDP" class="headerlink" title="3.2 UDP"></a>3.2 UDP</h4><ul>
<li><p>用户数据报协议：UDP</p>
</li>
<li><p>UDP是在IP数据报服务之上增加了一些功能，增加了复用和分用的功能以及差错检测的功能</p>
</li>
<li><p>UDP的主要特点是：</p>
<p>UDP是无连接的</p>
<p>UDP尽最大努力交付</p>
<p>UDP面向报文且没有拥塞控制</p>
<p>UDP开销较小传输效率较高</p>
</li>
<li><p>UDP首部的概念</p>
</li>
</ul>
<h2 id="六-应用层"><a href="#六-应用层" class="headerlink" title="六.应用层"></a>六.应用层</h2><h3 id="1-应用层的作用"><a href="#1-应用层的作用" class="headerlink" title="1.应用层的作用"></a>1.应用层的作用</h3><p>​        通过位于不同主机中的多个应用进程之间的通信和协同工作来完成，应用层的内容就是具体定义通信规则</p>
<h3 id="2-应用层中常见的协议"><a href="#2-应用层中常见的协议" class="headerlink" title="2.应用层中常见的协议"></a>2.应用层中常见的协议</h3><ul>
<li><p>域名系统DNS</p>
<p>域名结构：每一个域名用标号隔开。 mail.cctv.com (三级域名.二级域名.顶级域名)</p>
<p>域名服务器：迭代 递归</p>
</li>
<li><p>文件传输协议FTP</p>
<p>使用TCP连接，传输数据</p>
<p>端口号是21（20） 20发送数据</p>
</li>
<li><p>远程终端协议TELNET</p>
<p>使用TCP连接，远程登录到远地的另外一台主机上</p>
<p>端口号是23</p>
</li>
<li><p>万维网和HTTP协议</p>
<p>超文本传输协议，是一个简单的请求-响应协议</p>
<p>端口号是80</p>
</li>
<li><p>电子邮件协议</p>
<p>SMTP电子邮件传输协议：端口号25</p>
<p>POP3邮局协议版本3：端口号110</p>
</li>
<li><p>DHCP动态主机配置协议</p>
<p>指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p>
</li>
</ul>
<p>​        端口号68</p>
<h2 id="七-网络安全"><a href="#七-网络安全" class="headerlink" title="七.网络安全"></a>七.网络安全</h2><h3 id="1-网络安全概论"><a href="#1-网络安全概论" class="headerlink" title="1.网络安全概论"></a>1.网络安全概论</h3><h4 id="1-1网络安全"><a href="#1-1网络安全" class="headerlink" title="1.1网络安全"></a>1.1网络安全</h4><p>​      网络安全（Cyber Security）是指网络系统的硬件，软件及其系统中的数据受到保护，不因偶然的或者恶意的原因而遭到破坏，更改，泄露。系统连续可靠正常的运行，网络服务不中断。</p>
<h5 id="1-2计算机网络面临的威胁主要分为两类"><a href="#1-2计算机网络面临的威胁主要分为两类" class="headerlink" title="1.2计算机网络面临的威胁主要分为两类"></a>1.2计算机网络面临的威胁主要分为两类</h5><h6 id="1-2-1主动攻击"><a href="#1-2-1主动攻击" class="headerlink" title="1.2.1主动攻击"></a>1.2.1主动攻击</h6><ul>
<li>主动的去做一些在网络基础上的恶意行为。恶意串改信息数据，发布恶意程序脚本等</li>
<li>篡改</li>
<li>恶意程序</li>
<li>拒绝服务</li>
</ul>
<h6 id="1-2-2被动攻击"><a href="#1-2-2被动攻击" class="headerlink" title="1.2.2被动攻击"></a>1.2.2被动攻击</h6><p>被动攻击主要是收集信息而不是进行访问，不改变数据本身的结构，也不对软硬件数据造成影响<br>截取<br>窃听<br>流量分析</p>
<h4 id="1-2网络系统特性"><a href="#1-2网络系统特性" class="headerlink" title="1.2网络系统特性"></a>1.2网络系统特性</h4><ul>
<li>保密性：信息不泄露给非授权用户，实体或过程，或供其利用的特性</li>
<li>完整性：数据未经授权不能进行改变的特性，即信息在存储或传输过程中保持不被修改，不被破坏和丢失的特性</li>
<li>可用性：可被授权实体访问并按需求使用的特性。即当需要时能否存取所需信息。例如网络环境下拒绝服务，破坏网络和有关系统的正常运行等后属于对可用性的攻击</li>
<li>可靠性：对信息的传播及内容具有控制能力</li>
<li>不可抵赖性：出现安全问题时提供依据与手段</li>
</ul>
<h3 id="2-加密和交互"><a href="#2-加密和交互" class="headerlink" title="2.加密和交互"></a>2.加密和交互</h3><h4 id="2-1加密和解密"><a href="#2-1加密和解密" class="headerlink" title="2.1加密和解密"></a>2.1加密和解密</h4><h5 id="2-1-1加密"><a href="#2-1-1加密" class="headerlink" title="2.1.1加密"></a>2.1.1加密</h5><ul>
<li>是以某种特殊的算法改变原有的信息数据，使得未授权的用户即即使获得了已加密的信息，但因不知解密的方法，仍然无法了解信息的内容</li>
<li>加密手段</li>
</ul>
<p>​                MD5加密（信息-摘要算法）：128位<br>​                AES加密（称秘钥加密）：128,192,256位<br>​                SHAI加密（安全哈希算法）：160位<br>​                RSA加密：公钥加密，私钥解密：1204位</p>
<h5 id="2-1-2解密"><a href="#2-1-2解密" class="headerlink" title="2.1.2解密"></a>2.1.2解密</h5><p>加密的逆过程就是解密</p>
<h5 id="2-2公钥和私钥"><a href="#2-2公钥和私钥" class="headerlink" title="2.2公钥和私钥"></a>2.2公钥和私钥</h5><h6 id="2-2-1对称加密"><a href="#2-2-1对称加密" class="headerlink" title="2.2.1对称加密"></a>2.2.1对称加密</h6><ul>
<li>采用单钥密码系统的加密方式，同一个秘钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单秘钥加密。</li>
</ul>
<h6 id="2-2-2非对称加密"><a href="#2-2-2非对称加密" class="headerlink" title="2.2.2非对称加密"></a>2.2.2非对称加密</h6><ul>
<li>使用非对称的加密方式时，会产生两把钥匙。发送方利用自己的公钥加密，接收方利用自己的私钥解密</li>
<li>数字签名的四大特点</li>
</ul>
<p>​      1. 防止重放攻击：攻击者利用网络监听或则其他方式盗取认证凭据，之后再把它重新发给认证服务器。在数字签名中，如果采用了对签名报文加盖时间戳等或添加流水号等技术，就可以有效防止重放攻击</p>
<ol>
<li>防止数据伪造：其他人不能伪造对消息的签名，因为私有秘钥只能签名者自己知道，所有其他人不可以构造出正确的签名结果数据</li>
<li>防止数据篡改：数字签名与原始文件或摘要一起发送给接受者，一旦信息被篡改，接受者可以通过计算摘要和验证签名来判断该文件无效，从而保证了文件的完整性</li>
<li>防止数据抵赖：数字签名既可以作为身份认证的依据，也可以作为签名者签名操作的证据。要防止接受者抵赖，可以在数字签名系统中要求接收者返回一个自己的签名的表示收到报文，给发送者或者信任第三方。如果接受者不返回任何信息，此次通信可终止或重新的开始，签名方也没有任何的损失，由此双方均不可抵赖。</li>
</ol>
<h5 id="2-3防火墙"><a href="#2-3防火墙" class="headerlink" title="2.3防火墙"></a>2.3防火墙</h5><p>防火墙是一种访问控制技术，可以严格控制进出网络边界的分组，禁止任何不必要的通信，来减少潜在入侵的发生</p>
<p><strong>防火墙的区域们</strong></p>
<ul>
<li><p>Local本地区域</p>
<p>顶级安全区域，安全优先级为100</p>
<p>local就是防火墙本身的区域比如ping指令等网际控制协议的回复，需要local域的权限凡是由防火墙主动发出的报文均可认为是从local区域中发出是需要防火墙响应并处理（而不是转发）的报文均可认为是Local区域接收</p>
</li>
<li><p>Trust受信区</p>
<p>高级安全区域，安全优先级为85</p>
<p>通常用来定义内部用户所在的网络，也可以理解为应该是防护最严密的地区</p>
</li>
<li><p>DMZ非军事化区</p>
<p>中级安全区域，安全优先级50</p>
<p>通常用来定义内部服务器坐在网络</p>
<p>作用是把WEB。E-mail等允许外部访问的服务器单独接在该区域端口，使整个需要访问，实现内外网分离，达到用户需求。DMZ可以理解为一个不同于外网或内网的特殊网络区域，DMZ内通常放置一些不含机密信息的公用服务器，比如Web，Mail，FTP中的服务。这样来自外网的访问者可以访问DMZ中服务，但不可能接触到存放在内网中的公司机密或私人信息等，及时DMZ中服务器受到破坏，也不会对内网中的机密信造成影响</p>
</li>
<li><p>Untrust非受信区</p>
<p>低级安全区域，安全优先级为5</p>
<p>通常用来定义Internet等不安全的网络，用于网络入口线的接入。</p>
</li>
</ul>
<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="1-报文交换，电路交换，分组交换"><a href="#1-报文交换，电路交换，分组交换" class="headerlink" title="1.报文交换，电路交换，分组交换"></a>1.报文交换，电路交换，分组交换</h2><p>场景：</p>
<p>电路：电话网络</p>
<p>报文：用于电报网络</p>
<p>分组：现代计算机</p>
<h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>通信前从主叫端到被叫端建立一条专用的物理通路，在通信的全部时间内，两个用户始终占用端到端的线路资源。数据直送，传输速率高（适合低频次、大量的传输数据） </li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>建立/释放连接，需要额外的时间开销</li>
<li>线路被通信双方占用，利用率低</li>
<li>交换结点不自持差错控制</li>
</ul>
<h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>通信前无需建立连接</li>
<li>数据以“报文”为单位被交换节点间“存储转发”，通信线路可以灵活分配</li>
<li>在通信时间内，两个用户无需独占一整条物理线路。相比于电路交换，线路利用率高</li>
<li>交换节点支持“差错控制”(通过校验技术)</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>报文不定长，不方便存储转发管理</li>
<li>长报文的存储转发时间开销大、缓存开销大·</li>
<li>长报文容易出错，重传代价高</li>
</ul>
<h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>·通信前无需建立连接</li>
<li>·数据以“分组为单位被交换节点间“存储转发”，通信线路可以灵活分配</li>
<li>·在通信时间内，两个用户无需独占一整条物理线路。相比于电路交换，线路利用率高·</li>
<li>交换节点支持“差错控制”（通过校验技术)</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>·相比于报文交换，控制信息占比增加·</li>
<li>相比于电路交换，依然存在存储转发时延</li>
<li><p>·报文被拆分为多个分组，传输过程中可能出现失序、丢失等问题，增加处理的复杂度</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787828769a05.png" alt="1736934017228.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计与体系结构</title>
    <url>/posts/e2e289e8/</url>
    <content><![CDATA[<blockquote>
<p>期末考试78分完美上岸！</p>
<p>后序有时间再慢慢更新嘿嘿      </p>
</blockquote>
<p>​                       </p>
<h1 id="软件设计与体系结构"><a href="#软件设计与体系结构" class="headerlink" title="软件设计与体系结构"></a>软件设计与体系结构</h1><blockquote>
<p><strong>逆水行舟用力撑，一篙松劲退千寻</strong></p>
<p>​                                             ——-董必武《题赠送中学生》</p>
</blockquote>
<p>这里暂时就不更新了，等我如果挂科了我在更新！</p>
<h1 id="第一章-软件设计模式相关内容介绍"><a href="#第一章-软件设计模式相关内容介绍" class="headerlink" title="第一章 软件设计模式相关内容介绍"></a>第一章 软件设计模式相关内容介绍</h1><h2 id="1-设计模式概述"><a href="#1-设计模式概述" class="headerlink" title="1.设计模式概述"></a>1.设计模式概述</h2><h3 id="1-1产生背景"><a href="#1-1产生背景" class="headerlink" title="1.1产生背景"></a>1.1产生背景</h3><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马(EichGamma).理查德·海尔姆(Richard Helm)、拉尔夫·约翰森(Ralph Johnson)、约翰·威利斯迪斯（John Vlissides)等4位作者合作出版了《设计模式:可复用面向对象软件的基础》一书，在此书中收录了23个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这4位作者在软件开发领域里也以他们的”四人组”(Gang of Four，GoF）著称。</p>
<h3 id="1-2软件设计模式概念"><a href="#1-2软件设计模式概念" class="headerlink" title="1.2软件设计模式概念"></a>1.2软件设计模式概念</h3><p>软件设计模式(Software Design Pattern)，又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>
<h3 id="1-3学习软件设计的必要性"><a href="#1-3学习软件设计的必要性" class="headerlink" title="1.3学习软件设计的必要性"></a>1.3学习软件设计的必要性</h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>
<h4 id="1-4正确使用设计模式具有以下优点。"><a href="#1-4正确使用设计模式具有以下优点。" class="headerlink" title="1.4正确使用设计模式具有以下优点。"></a>1.4<strong>正确使用设计模式具有以下优点。</strong></h4><ul>
<li>·可以提高程序员的思维能力、编程能力和设计能力。</li>
<li>·使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。·</li>
<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>
</ul>
<h3 id="1-5设计模式分类"><a href="#1-5设计模式分类" class="headerlink" title="1.5设计模式分类"></a>1.5设计模式分类</h3><ul>
<li><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><strong>创建型模式</strong></h4><p>用于描述”怎样创建对象”，它的主要特点是”将对象的创建与使用分离。GoF(四人组)书中提供了<strong>单例、原型、工厂方法、抽象工厂、建造者</strong>等5种创建型模式。</p>
</li>
<li><h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a><strong>结构型模式</strong></h4><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF(四人组)书中提供了<strong>代理、适配器、桥接、装饰、外观、享元、组合</strong>等7种结构型模式。</p>
</li>
<li><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a><strong>行为型模式</strong></h4><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF(四人组)书中提供了<strong>模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等</strong> 11种行为型模式。</p>
</li>
</ul>
<h1 id="2-UML"><a href="#2-UML" class="headerlink" title="2.UML"></a>2.UML</h1><p>统一建模语言(Unified Modeling Language，UML)是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p>
<p>UML从目标系统的不同角度出发，定义了用<strong>例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图</strong>等9种图。</p>
<ul>
<li>2)静态结构图类图、对象图、包图、组件图、部署图</li>
<li>3)动态行为图:交互图（时序图与协作图)、状态图、活动图</li>
</ul>
<h2 id="2-1类图概述"><a href="#2-1类图概述" class="headerlink" title="2.1类图概述"></a>2.1类图概述</h2><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>
<h2 id="2-2类图作用"><a href="#2-2类图作用" class="headerlink" title="2.2类图作用"></a>2.2类图作用</h2><ul>
<li>·在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解;</li>
<li>·类图是系统分析和<strong>设计阶段</strong>的重要产物，是系统编码和测试的重要模型。</li>
</ul>
<h2 id="2-3类图表示法"><a href="#2-3类图表示法" class="headerlink" title="2.3类图表示法"></a>2.3类图表示法</h2><h3 id="2-3-1类图表示方式"><a href="#2-3-1类图表示方式" class="headerlink" title="2.3.1类图表示方式"></a>2.3.1类图表示方式</h3><p>属性/方法名称前加的加号和减号表示了这个属性/方法的见性，UML类图中表示可见性的符号有三种:。</p>
<ul>
<li>+:表示public</li>
<li>-:表示private。</li>
<li>#:表示protected</li>
</ul>
<p>属性的完整表示方式是:<strong>可见性   名称∶类型   [=缺省值]</strong><br>方法的完整表示方式是:<strong>可见性：名称(参数列表)[ ︰返回类型]</strong></p>
<h3 id="2-3-2类与类之间的表示方式"><a href="#2-3-2类与类之间的表示方式" class="headerlink" title="2.3.2类与类之间的表示方式"></a>2.3.2类与类之间的表示方式</h3><p><img src="https://bu.dusays.com/2025/01/15/678787104b795.png" alt></p>
<h4 id="2-3-2-1关联联系"><a href="#2-3-2-1关联联系" class="headerlink" title="2.3.2.1关联联系"></a>2.3.2.1关联联系</h4><blockquote>
<p>关联关系实际上就是<strong>类与类之间的联系</strong>，他是<strong>依赖关系的特例</strong></p>
<p>关联具有<strong>导航性</strong>:即双向关系或单向姜系<br>关系具有多重性:如“1”(表示有且仅有一个)，“0…”(表示0个或者多个），“0，1”（表示0个或者一个),“n..m”(表示n到m个都可以),，”m.….*””(表示至少m个)。</p>
</blockquote>
<p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为<strong>一般关联关系、聚合关系和组合关系</strong>。</p>
<h5 id="2-3-2-1-1单向关联"><a href="#2-3-2-1-1单向关联" class="headerlink" title="2.3.2.1.1单向关联"></a>2.3.2.1.1单向关联</h5><p><img src="https://bu.dusays.com/2025/01/15/678786d1aac73.png" alt></p>
<p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让customer类持有一个类型为Address的成员变量类实现。(指向的是Address类型的)</p>
<p>小德莫😍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/11:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard1 idCard1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard1</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>我们的Person1里面有IDCard1，但是我们的IDCard1没有Person1</p>
<h5 id="2-3-2-1-2双向关联"><a href="#2-3-2-1-2双向关联" class="headerlink" title="2.3.2.1.2双向关联"></a>2.3.2.1.2双向关联</h5><p><img src="https://bu.dusays.com/2025/01/15/678786d2b6162.png" alt></p>
<p>双方各持有对方类型的成员变量</p>
<p>（这里一个顾客可购买多个商品，一个商品也可以指定被哪个顾客购买）</p>
<p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在customer类中维护一个List\<Product>，表示一个顾客可以购买多个商品;在Product类中维护一个customer类型的成员变量表示这个产品被哪个顾客所购买。</Product></p>
<p>小德莫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/11:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard1 idCard1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard1</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person1 person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你中有我 我中有你</p>
<p>你我如同并蒂莲，共沐风雨心相连</p>
<h5 id="2-3-2-1-3自关联（链表）"><a href="#2-3-2-1-3自关联（链表）" class="headerlink" title="2.3.2.1.3自关联（链表）"></a>2.3.2.1.3自关联（链表）</h5><p><img src="https://bu.dusays.com/2025/01/15/678786d3a2733.png" alt="image-20241213105854430"></p>
<p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是”自己包含自己”。</p>
<h4 id="2-3-2-2聚合关系"><a href="#2-3-2-2聚合关系" class="headerlink" title="2.3.2.2聚合关系"></a>2.3.2.2聚合关系</h4><blockquote>
<p>聚合关系(Aggregation）表示的是整体和部分的关系，整体与部分可以分开。</p>
<p>聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。</p>
<p>如:一台电脑由键盘(keyboard)、显示器(monitor)，’鼠标等组成;组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示:</p>
<p>如果他们的关系可以分开就是聚合关系，不可分开就是组合关系</p>
</blockquote>
<p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p>
<p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。（公司倒闭了，但是程序员还可以去其他公司找工作）</p>
<p>在UML类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图:</p>
<p><img src="https://bu.dusays.com/2025/01/15/678786d498e73.png" alt></p>
<p>大学是整体，老师是部分（成员对象是整体对象的一部分，但是成员变量可以脱离整体存在）</p>
<p>这里没有小德莫 我懒得写了</p>
<p>算辽算辽 以防我自己后面看不懂我还是写吧</p>
<p>李阳！你可不能做一个懒惰的人！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/11:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Mouse mouse;</span><br><span class="line">    <span class="keyword">private</span> Monitor monitor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonitor</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monitor = monitor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monitor</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787871a8addb.png" alt></p>
<p>over!</p>
<h4 id="2-3-2-3组合关系"><a href="#2-3-2-3组合关系" class="headerlink" title="2.3.2.3组合关系"></a>2.3.2.3组合关系</h4><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p>
<p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，身体和头的关系，身体没了，头也不存在了。（皮之不存毛将附焉）</p>
<p>在UML类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图:</p>
<p><img src="https://bu.dusays.com/2025/01/15/678786d5a0e86.png" alt></p>
<p>小德莫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/11:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Mouse mouse=<span class="keyword">new</span> <span class="title class_">Mouse</span>();</span><br><span class="line">    <span class="keyword">private</span> Monitor monitor=<span class="keyword">new</span> <span class="title class_">Monitor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonitor</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monitor = monitor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monitor</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Computer c=<span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787871b8ecbc.png" alt></p>
<p>当我们创建computer对象的时候，mouse和monitor都会自动new对象，他们是共生的</p>
<p>我泥中有尔，尔泥中有我【我侬词】</p>
<h4 id="2-3-2-4依赖关系"><a href="#2-3-2-4依赖关系" class="headerlink" title="2.3.2.4依赖关系"></a>2.3.2.4依赖关系</h4><p><strong>（耦合最小的）</strong></p>
<blockquote>
<p>只要是在类中用到了对方，那他们就存在依赖关系</p>
<ul>
<li>1)类中用到了对方</li>
<li>2)如果是类的成员属性</li>
<li>3)如果是方法的返回类型</li>
<li>4)是方法接收的参数类型</li>
<li>5)方法中使用到</li>
</ul>
</blockquote>
<p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类)中的某些方法来完成一些职责。</p>
<p>在UML类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车:</p>
<p><img src="https://bu.dusays.com/2025/01/15/678786d6a4c4e.png" alt></p>
<p>在一个方法中创建了另外一个对象，通过那个对象来调用方法</p>
<p>（这里的Driver创建了一个Car类型的形参，通过形参调用Car里面的方法）</p>
<p>我们来用非常非常简单的代码来演示吧！( •̀ ω •́ )✧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/10:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PerSonDao perSonDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> IDCard <span class="title function_">getIDCard</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PerSonDao</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>好啦！接下来聪明的你猜一猜哪里是有依赖的呢？</p>
<p><img src="https://bu.dusays.com/2025/01/15/67878711628a3.png" alt></p>
<p>答案是全都有哈哈，这几个都有用到哦</p>
<h4 id="2-3-2-5泛化-继承关系"><a href="#2-3-2-5泛化-继承关系" class="headerlink" title="2.3.2.5泛化/继承关系"></a>2.3.2.5泛化/继承关系</h4><p><strong>（耦合最大的）-泛化关系</strong></p>
<blockquote>
<p>泛化就是继承</p>
</blockquote>
<p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系工是一种继承关系。</p>
<p>在UML类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student类和Teacher类都是Person类的子类，其类图如下图所示:</p>
<p><img src="https://bu.dusays.com/2025/01/15/678786fb0a164.png" alt></p>
<p>我们来看一个非常非常简单的小demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/11:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DaoSupport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Object o)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Object o)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonServiceBean1</span> <span class="keyword">extends</span> <span class="title class_">DaoSupport</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787ad621ebee.png" alt="image-20241220111928040.png"></p>
<p>哇，这就是继承，不过是箭头表示，虽然很简单但是不要忘记哦</p>
<h4 id="2-3-2-6实现关系"><a href="#2-3-2-6实现关系" class="headerlink" title="2.3.2.6实现关系"></a>2.3.2.6实现关系</h4><blockquote>
<p>实际上就是A类实现B，他是依赖关系的特例（比如接口被类实现了 ）</p>
</blockquote>
<p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p>
<p>在UML类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，</p>
<p><img src="https://bu.dusays.com/2025/01/15/678786fc086cb.png" alt></p>
<p>实现了接口</p>
<p>小小的德莫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.UML;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/11:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonServiceBean2</span> <span class="keyword">implements</span> <span class="title class_">PersonService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787ad9de9ea1.png" alt="image-20241220112759125.png"></p>
<p>很简单吧嘻嘻</p>
<h1 id="3-软件设计原则"><a href="#3-软件设计原则" class="headerlink" title="3.软件设计原则"></a>3.软件设计原则</h1><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则采开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p>
<h2 id="3-1设计模式目的"><a href="#3-1设计模式目的" class="headerlink" title="3.1设计模式目的"></a>3.1设计模式目的</h2><p>编写软件过程中，程序员面临着来(耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序(软件)，具有更好</p>
<p>1)代码重用性(即相同功能的代码不用多次编写)</p>
<p>2)可读性</p>
<p>3)可扩展性</p>
<p>4)可靠性</p>
<p>5)使程序呈现高内聚，低耦合的特性</p>
<hr>
<h2 id="3-2七大原则"><a href="#3-2七大原则" class="headerlink" title="3.2七大原则"></a>3.2<strong>七大原则</strong></h2><p>单一职责原则 SRP</p>
<p>接口隔离原则 ISP</p>
<p>依赖倒转原则 DIP</p>
<p>里氏替换原则 LSP</p>
<p>开闭原则 OCP</p>
<p>迪米特法则 （最少知道原则） LoD</p>
<p>合成复用原则CARP</p>
<hr>
<h3 id="3-2-1单一职责-SRP—一个类一个方法"><a href="#3-2-1单一职责-SRP—一个类一个方法" class="headerlink" title="3.2.1单一职责 SRP—一个类一个方法"></a>3.2.1单一职责 SRP—一个类一个方法</h3><p>一个类一个方法</p>
<p>对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责:职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2</p>
<p>eg：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在公路上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个方法中违反了单一设计原则，这个类既要负责公路上的车辆还要负责天上飞的（飞机）</p>
<p>我们可以根据交通工具运行的方法不同，分解为不同的类即可</p>
<hr>
<p>解决办法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RoadVehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoadVehicle</span>();</span><br><span class="line">        vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        <span class="type">AirVehicle</span> <span class="variable">airVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirVehicle</span>();</span><br><span class="line">        airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoadVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在公路上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在天上上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在水里上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遵守了单一原则</p>
<p>但是这样做改动太大了，即要将代码修改，还需要修改客户端</p>
<hr>
<p>改进：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.runAir(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在公路上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runAir</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在天上上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runWater</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">&quot;在水里上运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里虽然没有在类上遵循单一设计原则，但是在方法级别上任然是遵守单一设计原则</p>
<p>（这不就是加方法嘛，小小单一设计原则拿下拿下）</p>
<h4 id="单一设计原则注意事项和细节"><a href="#单一设计原则注意事项和细节" class="headerlink" title="单一设计原则注意事项和细节"></a>单一设计原则注意事项和细节</h4><ul>
<li>1)降低类的复杂度，一个类只负责一项职责。</li>
<li>2)提高类的可读性，可维护性</li>
<li>3)降低变更引起的风险</li>
<li>4)通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则;只有类中方法数量足够少，可以在方法级别保持单一职责原则</li>
</ul>
<h3 id="3-2-2接口隔离原则ISP—最小接口"><a href="#3-2-2接口隔离原则ISP—最小接口" class="headerlink" title="3.2.2接口隔离原则ISP—最小接口"></a>3.2.2接口隔离原则ISP—最小接口</h3><p>最小接口</p>
<p>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</p>
<p><img src="https://bu.dusays.com/2025/01/15/678787029114d.png" alt></p>
<p>A通过接口会使用到B，但是他只会使用到123的方法，但是b实现了接口，所以他必须要实现接口的所有的功能，照成结果方法使用不了导致浪费（我瞎编的，不过大概可能就是这个意思）</p>
<p>我们来看代码吧，可能会好理解一点！</p>
<hr>
<p>一个接口里面5个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion3</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion5</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>B实现了接口里的5个功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>D也实现了接口的5个功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>现在我们的A依赖B但是只需要1 2 3个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用A类通过接口Interface1使用了B类123的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>那劳资的B里面的剩下俩方法不就白写了，rnm退钱</p>
<p>现在我们的C依赖D但是只需要14 5方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>啊你玩我呢，那我D还写这么多干嘛</p>
<p>没错，这样我们就很好的解释了为什么需要接口隔离原则，你明白了吗(●’◡’●)</p>
<p>（这里还有一个小小的疑问，我们的A和C是怎么依赖B和D的呢？Interface1 i 这里的i可以经行替换为我们的B和D）</p>
<ul>
<li><p>类A通过接lnterface1依赖类B,类c通过接口Interface1依赖类D，如果接口lnterface1对于类A和类c来说不是最小接口那么类B和类D必须去实现他们不需要的方法。</p>
</li>
<li><p>按隔离原则应当这样处理:</p>
<p>将接口Interface1拆分为独立的几个接口，类A和类c分别衔他们需要的接口建立依赖关系。也就是采用接口隔离原则</p>
</li>
</ul>
<p>所以这些接口要以最小接口原则经行拆分</p>
<hr>
<p>现在我们要经行改进，变得爸爸妈妈都不认识你</p>
<ol>
<li><p>将接口lnterface1拆分为独立的几个接口，类A和类c分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p>
</li>
<li><p>接口Interface1中出现的方法，根据实际情况拆分为三个接口</p>
<p>代码实现</p>
</li>
</ol>
<p><img src="https://bu.dusays.com/2025/01/15/67878703b3507.png" alt></p>
<p>这就是接口隔离（感觉代码量变好高）</p>
<p>我们来看看代码</p>
<p>首先是3个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interface2</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interface3</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">opeartion5</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>B和D两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>,Interface2 &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是B方法3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>,Interface3&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">opeartion5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;这是D的方法5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>A和C两个依赖类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用A类通过接口Interface1使用了B类123的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface2 i)</span>&#123;</span><br><span class="line">        i.opeartion2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface2 i)</span>&#123;</span><br><span class="line">        i.opeartion3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span>&#123;</span><br><span class="line">        i.opeartion1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface3 i)</span>&#123;</span><br><span class="line">        i.opeartion4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface3 i)</span>&#123;</span><br><span class="line">        i.opeartion5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>嘿嘿嘿嘿嘿… 这样我们就避免了资源浪费，不过感觉程序会很庞大</p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());<span class="comment">//a类通过接口依赖B类</span></span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787ade12eb89.png" alt="image-20241218090500296.png"></p>
<p>安全下车 咕噜拜</p>
<h3 id="3-2-3依赖倒转原则-DIP—依赖接口和抽象"><a href="#3-2-3依赖倒转原则-DIP—依赖接口和抽象" class="headerlink" title="3.2.3依赖倒转原则 DIP—依赖接口和抽象"></a>3.2.3依赖倒转原则 DIP—依赖接口和抽象</h3><p>依赖接口和抽象</p>
<ul>
<li><p>1)高层模块不应该依赖低层模块，二者都应该依赖其抽象</p>
</li>
<li><p>2)抽象不应该依赖细节，细节应该依颗抽象</p>
</li>
<li><p>3)依赖倒转(倒置)的中心思想是面向接口编程</p>
</li>
<li><p>4)依赖倒转原则是基于这样的设计理念:相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</p>
</li>
<li><p>5)使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</p>
</li>
</ul>
<p>…你有没有一点点蒙 反正我先蒙了</p>
<p>那么我们一起来看一个小案例吧(●’◡’●)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/09:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:依赖倒置演示案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependecyInversion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//电子邮件类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电子邮件信息：hello liyang&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成Person接收信息的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Email email)</span>&#123;</span><br><span class="line">    System.out.println(email.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种比较简单且容易实现</p>
<p>但是如果我们需要获取其他途径的信息，比如微信…等，则新增加类Perons也要增加相应的接收方法</p>
<p>哎你别说 你还真别说 好像是感觉不太好，那我们一起来看看怎么修改的吧</p>
<hr>
<p>解决思路：</p>
<ol>
<li>引用抽象的接口IReceive，表示接收者，这样Person类与接口IRceive发生依赖</li>
<li>因为Email，Weixing等等都属于接收范围，他们各自实现IReceive接口就ok了，这样我们就符合了依赖倒转原则了</li>
</ol>
<p>废话不多说我们直接上代码！干就完了</p>
<p>首先定义一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/09:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:定义接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再来一个Email</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/09:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:电子邮件类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电子邮件信息:hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一个人员去实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/09:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:人员类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(IReceiver receiver)</span> &#123;</span><br><span class="line">        <span class="comment">//这里面你传给我的是谁我就依赖谁</span></span><br><span class="line">        System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后再来一个测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/09:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:依赖倒置演示案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependecyInversion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line">       persion.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>神奇的事情发生了</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787ae0ecdca4.png" alt="image-20241218095449738.png"></p>
<p>结果居然和之前是一样的</p>
<p>太奇妙了神奇</p>
<p>我们在仔细的看一下人员类的方法，因为就这个改变最大</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(IReceiver receiver)</span> &#123;</span><br><span class="line">        <span class="comment">//这里面你传给我的是谁我就依赖谁</span></span><br><span class="line">                  System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>首先我们创建了一个Person的对象，然后传入了一个Email的对象 然后调用</p>
<p>这样，如果我们在加一个微信类，只需要在主方法里面new就可以了 </p>
<p>好像明白了依赖倒置原则了，之前需要在Persion里面重新写实例化方法，现在都不需要变更了</p>
<h4 id="依赖关系传递的三种方式（看懂即可）"><a href="#依赖关系传递的三种方式（看懂即可）" class="headerlink" title="依赖关系传递的三种方式（看懂即可）"></a>依赖关系传递的三种方式（看懂即可）</h4><p>这里微微有点绕（我又迷糊了）</p>
<ol>
<li>接口传递</li>
<li>构造方法传递</li>
<li>setter传递</li>
</ol>
<hr>
<h5 id="方式一-接口传递"><a href="#方式一-接口传递" class="headerlink" title="方式一 接口传递"></a>方式一 接口传递</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3.DemoTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/10:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:方式1，通过接口实现依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HarErTV</span> <span class="variable">harErTV</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HarErTV</span>();</span><br><span class="line">        <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>();</span><br><span class="line">        openAndClose.open(harErTV);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HarErTV</span> <span class="keyword">implements</span> <span class="title class_">ITV</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;海尔电视TV就是吊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看不懂看不懂完全看不懂-这种耦合度还是有点高的，下面两种方式更好</p>
<p>哦哦我看明白了，先别着急放弃，我给你慢慢讲：</p>
<ul>
<li>首先呢我们创建了两个接口一个电视接口ITV，一个关闭某个电视的接口IOpenAndClose（关键字某个）我们要关闭哪个电视就往里面传入哪个接口就可以了，</li>
<li>然后呢我们定义了一个海尔电视去实现这个接口，</li>
<li>重点来啦OpenAndClose类去实现上面的IOpenAndClose接口 当我们创建这个对象的时候，我们只需要往里面传入我们的接口类型的，我们就能调用哪个play方法。ITV是一个接口，所以我们传入的是接口</li>
<li>然后我们实例化HarErTV harErTV = new HarErTV();重点是后面的 OpenAndClose openAndClose = new OpenAndClose();openAndClose.open(harErTV);</li>
<li>这里我们实例化之后，openAndClose里面有一个open方法，open方法里面是一个接口类型，因为我们传入的是harErTV，所以我们会调用HarErTV里面的play方法</li>
<li>我懵懵懂懂不知道什么是爱，也不知道该该如何表达，不过大概是这个意思，不太明白的可以补一下面向对象的知识，相信会有更大收获</li>
</ul>
<hr>
<h5 id="方式二-构造方法传递"><a href="#方式二-构造方法传递" class="headerlink" title="方式二 构造方法传递"></a>方式二 构造方法传递</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3.DemoTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/10:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:方式二 构造方法传递</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChangHong</span> <span class="variable">changHong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangHong</span>();</span><br><span class="line"></span><br><span class="line">        OpenAndClose2 openAndClose2=<span class="keyword">new</span> <span class="title class_">OpenAndClose2</span>(changHong);</span><br><span class="line">        openAndClose2.open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose2</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV2</span>&#123;</span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose2</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ITV2 itv2;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">OpenAndClose2</span><span class="params">(ITV2 itv2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itv2 = itv2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.itv2.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV2</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长虹电视不太吊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我又来啦，我们一起来看下这段代码吧，别放弃别放弃别放弃求求你了！</p>
<ul>
<li>首先还是两个接口(先不要看main方法)</li>
<li>然后呢我们的OpenAndClose2 实现了IOpenAndClose2那么我们是不是要实现接口里面的方法，定义了一个接口类型变量，然后传入一个带参数的构造器，将我们传入的变量给了这个临时变量，然后定义一个方法open通过临时变量来获取这个play方法（很巧妙，但是我写不出来）</li>
<li>然后下面的changhong实现接口里面有一个play方法</li>
<li>最后我们经行调用：我们的是一个带参数的构造器，然后这个传入的类里面有一个play方法，这时候我们调用open方法就会自动执行this.itv2.play();也就是相当于调用changhong.play();</li>
<li>不过大致是这个意思</li>
</ul>
<p>妙妙妙🐱🐱</p>
<hr>
<h5 id="方法三-setter传递"><a href="#方法三-setter传递" class="headerlink" title="方法三 setter传递"></a>方法三 setter传递</h5><p>这个比较常用 我见过这个代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class3.DemoTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/11:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Geli</span> <span class="variable">geli</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Geli</span>();</span><br><span class="line">        <span class="comment">//通过setter方法经行依赖传递</span></span><br><span class="line">        <span class="type">OpenAndClose3</span> <span class="variable">openAndClose3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose3</span>();</span><br><span class="line">        openAndClose3.setTv(geli);</span><br><span class="line">        openAndClose3.open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose3</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV3 tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV3</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose3</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose3</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ITV3 tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV3 tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Geli</span> <span class="keyword">implements</span> <span class="title class_">ITV3</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;格力电视我没见过&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>enn…我该怎么编给你听，不对是讲给你听</p>
<p>我看明白了，这个就和上面方法二差不多，就多了一个设置方法</p>
<ul>
<li>首先接口的定义IOpenAndClose3 open()：表示开启某个设备（如电视）。setTv(ITV3 tv)：这个方法用于依赖注入，将一个实现了 ITV3 接口的对象（即电视）传递给当前类。接口 ITV3就不重复了</li>
<li><p>类 OpenAndClose3实现了 IOpenAndClose3 接口它有一个字段 tv，类型是 ITV3，用于存储一个具体的电视实例。setTv(ITV3 tv) 方法是一个 setter 方法，通过它可以将一个实现了 ITV3 接口的对象（例如 Geli 类的实例）注入到 OpenAndClose3 类中。open() 方法调用了 tv.play()，启动电视播放内容。</p>
</li>
<li><p>主程序逻辑 ：使用 openAndClose3.setTv(geli) 方法将 Geli 对象（电视）注入到 OpenAndClose3 类中。也就是说，OpenAndClose3 类现在持有了 Geli 类的引用。最后，调用 openAndClose3.open()，它会调用 Geli 的 play() 方法，输出 “格力电视我没见过”。</p>
</li>
<li>总结：依赖注入（Dependency Injection）：OpenAndClose3 类通过 setTv() 方法依赖注入了一个 ITV3 类型的对象（这里是 Geli），实现了类之间的松耦合。这使得 OpenAndClose3 类不需要关心具体的电视类型，只要是实现了 ITV3 接口的类，它都能正常工作。<br>接口的作用：IOpenAndClose3 和 ITV3 接口分别定义了开关操作和电视播放的行为。通过接口，程序的各个部分可以独立开发和扩展，比如你可以轻松添加新的电视品牌（例如 Sony），只需要让新的品牌类实现 ITV3 接口，而不需要修改 OpenAndClose3 类。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.</li>
<li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</li>
<li>继承时遵循里氏替换原则</li>
</ul>
<p>有点类似需要第三方的感觉，比如说我是小学生我喜欢玩王者荣耀，但是我每天只能玩一个小时的游戏，我想上最强王者，那么我可以联系代练，让代练去操控我的号，解决防沉迷顺便帮我上最强王者比我自己玩要好的多，我损失了钱（大量类）但是我成功上了王者（方便了功能操作）总体来说利大于弊。因此需要一个缓冲</p>
<hr>
<h3 id="3-2-4里氏替换原则LSP—继承"><a href="#3-2-4里氏替换原则LSP—继承" class="headerlink" title="3.2.4里氏替换原则LSP—继承"></a>3.2.4里氏替换原则LSP—继承</h3><p>继承</p>
<h4 id="oo中的基础性的思考和说明"><a href="#oo中的基础性的思考和说明" class="headerlink" title="oo中的基础性的思考和说明"></a>oo中的基础性的思考和说明</h4><ul>
<li>1)继承包含这样一层含义:父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li>
<li>2)继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，<strong>如果一个类被其他的类所继承,则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障</strong></li>
<li>3)问题提出:在编程中，如何正确的使用继承?=&gt;里氏替换原则</li>
</ul>
<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul>
<li>1)里氏替换原则(Liskov Substitution Principle)在1988年，由麻省理工学院的以为姓里的女士提出的。</li>
<li>2)如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</li>
<li>3)在使用继承时，遵循里氏替换原则，<strong>在子类中尽量不要重写父类的方法</strong>（迫不得已也不可以，那你可以用聚合,组合,依赖来解决问题。）</li>
<li>4)里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过<strong>聚合,组合,依赖</strong>来解决问题。.</li>
</ul>
<p>突突突说一堆，不过说白了就是子类替换父类对之前的父类的地方没有影响，子类可以扩展父类功能但不能改变父类原有功能</p>
<h4 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h4><p>这里例子不太好—建议参考一下正方形不是长方形，以及鸵鸟不是鸟等案例</p>
<h5 id="我决定要做一个违背祖宗的决定！"><a href="#我决定要做一个违背祖宗的决定！" class="headerlink" title="我决定要做一个违背祖宗的决定！"></a>我决定要做一个违背祖宗的决定！</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/14:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3 = &quot;</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8 = &quot;</span>+a.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3 = &quot;</span>+b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8 = &quot;</span>+b.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9 = &quot;</span>+b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回两个数的差</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1-num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完成两个数相加，然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;<span class="comment">//这里重写了父类方法</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a,b)+<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787ae442d51f.png" alt="image-20241218141144793.png"></p>
<p>这里因为重写了父类的方法，所以结果会不一样，子类重写了父类，但是造成了影响—-重写违反了里氏替换原则</p>
<p>所以到底是故意的还是不小心的</p>
<ul>
<li><p>1)我们发现原来运行正常的相减功能发生了错误。原因就是类B无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候</p>
</li>
<li><p>2)通用的做法是:<strong>原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉,采用依赖，聚合，组合等关系代替</strong>.</p>
</li>
</ul>
<h5 id="改写案例"><a href="#改写案例" class="headerlink" title="改写案例"></a>改写案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.class4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/14:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3 = &quot;</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8 = &quot;</span>+a.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3 = &quot;</span>+b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1+8 = &quot;</span>+b.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9 = &quot;</span>+b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用组合任然可以使用到A类相关方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11-3 = &quot;</span>+b.func3(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="comment">//把更基础的方法和成员写到Base里面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回两个数的差</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1-num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完成两个数相加，然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果B需要使用A类的方法，使用组合关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里我们重写了A类的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;<span class="comment">//这里重写了父类方法</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a,b)+<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a.func1(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-2-5-开闭原则OCP（特别重要）"><a href="#3-2-5-开闭原则OCP（特别重要）" class="headerlink" title="3.2.5 开闭原则OCP（特别重要）"></a>3.2.5 开闭原则OCP（特别重要）</h3><p>不能修改源代码，只能进行功能增加</p>
<ul>
<li><p>1)开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</p>
</li>
<li><p>2)一个软件实体如类，模块和函数应该<strong>对扩展开放，对修改关闭</strong>。(对提供方扩展开放，对使用方修改关闭)用抽象构建框架，用实现扩展细节。</p>
</li>
<li><p>3)当软件需要变化时，尽量<strong>通过扩展</strong>软件实体的行为来实现变化，而<strong>不是</strong>通过修改已有的代码来实现变化。</p>
</li>
<li><p>4)）编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</p>
<p>就是比方我们在玩王者荣耀的时候，我们可以打开王者荣耀快乐的玩游戏，腾讯公司(提供商)可以对王者荣耀里面的功能扩充，但是呢我们玩家(使用方)不能经行修改(比如开挂等等)</p>
</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="我决定…"><a href="#我决定…" class="headerlink" title="我决定…"></a>我决定…</h5><p><img src="https://bu.dusays.com/2025/01/15/6787ae8a9cf41.png" alt="image-20241218150537200.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.principle.OCP;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/15:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个绘图类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shape</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape shape)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(shape.m_type==<span class="number">1</span>)</span><br><span class="line">            drawRectangle(shape);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(shape.m_type==<span class="number">2</span>)</span><br><span class="line">                drawCircle(shape);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;画矩形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;画圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shape类，基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    Rectangle()&#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span>&#123;</span><br><span class="line">    Circle()&#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>1)优点是比较好理解，简单易操作。</li>
<li>2)缺点是违反了设计模式的ocp原则，即对扩展开放()。对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</li>
<li>3)比如我们这时要新增加一个图形种类，我们需要做如下修改，修改的地方较多</li>
<li>比如新加三角形，需要创建类，然后修改GraphicEditor（使用方）代码添加三角形的功能</li>
</ul>
<p>好像有点道理，改动地方确实比较多</p>
<h5 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h5><p>思路:把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承Shape，并实现draw方法即可</p>
<p>使用方代码就不需要修-&gt;满足了开闭原则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.principle.OCP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个绘图类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shape</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shape类，基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"> <span class="comment">//一个抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>啊他是怎么运行的啊</p>
<p>好像有点点头绪了，这是抽象的知识</p>
<p>定义一个抽象方法，然后实现，再用一个类传一个方法类型的方法</p>
<p>emmm… 假设我们再新建一个类，只需要创建类，不需要修改实现类GraphicEditor里面的东西</p>
<p>妙妙喵🐱🐱</p>
<hr>
<h3 id="3-2-6迪米特法则LoD"><a href="#3-2-6迪米特法则LoD" class="headerlink" title="3.2.6迪米特法则LoD"></a>3.2.6迪米特法则LoD</h3><p>米莱迪法则 (•_•)</p>
<p>陌生的类不要以局部变量的形式出现在类的内部</p>
<h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul>
<li>1)一个对象应该对其他对象保持最少的了解</li>
<li>2)类与类关系越密切，耦合度越大</li>
<li>3)迪米特法则(Demeter Principle)又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息</li>
<li>4)迪米特法则还有个更简单的定义:<strong>只与直接的朋友通信</strong></li>
<li>5)<strong>直接的朋友</strong>:每个对象都会与其他对象由耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li>
</ul>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><h5 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.principle.LoD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/16:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:迪米特法则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dmt</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SChoolManner</span> <span class="variable">sChoolManner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SChoolManner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出学院员工ID，和学院总部id</span></span><br><span class="line">        sChoolManner.printALlEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManner</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学院员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManner</span>&#123;</span><br><span class="line">    <span class="comment">//返回学院所以员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getCollegeEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//创建10个员工，</span></span><br><span class="line">            <span class="type">CollegeEmployee</span> <span class="variable">collegeEmployee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">            collegeEmployee.setId(<span class="string">&quot;学院ID： &quot;</span>+String.valueOf(i));</span><br><span class="line">            list.add(collegeEmployee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SChoolManner</span>&#123;</span><br><span class="line">    <span class="comment">//返回学校总部所以员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getCollegeEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">           employee.setId(<span class="string">&quot;学校总部员工： &quot;</span>+String.valueOf(i));</span><br><span class="line">           list.add(employee);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printALlEmployee</span><span class="params">(CollegeManner sub)</span>&#123;</span><br><span class="line">       <span class="comment">//获取学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1=sub.getCollegeEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分公司--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee collegeEmployee : list1) &#123;</span><br><span class="line">            System.out.println(collegeEmployee.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2=<span class="built_in">this</span>.getCollegeEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------总部--------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : list2) &#123;</span><br><span class="line">            System.out.println(employee.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787ae8a9cf41.png" alt="image-20241218150537200.png"></p>
<p>我有点累了有点不太想说话了</p>
<p>不许累！！！！！！！！！！！！！</p>
<p>哎学吧学吧 不学干嘛呢</p>
<p>我们来分析一下直接朋友间接朋友吧！</p>
<p>以SchoolManager为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SChoolManner</span>&#123;</span><br><span class="line">    <span class="comment">//返回学校总部所以员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getCollegeEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">           employee.setId(<span class="string">&quot;学校总部员工： &quot;</span>+String.valueOf(i));</span><br><span class="line">           list.add(employee);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printALlEmployee</span><span class="params">(CollegeManner sub)</span>&#123;</span><br><span class="line">       <span class="comment">//获取学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1=sub.getCollegeEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分公司--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee collegeEmployee : list1) &#123;</span><br><span class="line">            System.out.println(collegeEmployee.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2=<span class="built_in">this</span>.getCollegeEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------总部--------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : list2) &#123;</span><br><span class="line">            System.out.println(employee.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先Employee是直接朋友（出现在成员变量，方法参数，方法返回值中的类为直接朋友）这里是方法参数</li>
<li>CollegeManager也是直接朋友，他是方法参数</li>
<li>CollegeEmployee 对应for循环的，他不是成员变量，方法参数，方法返回值中的类，所以是间接朋友，违背了迪米特法则，以局部变量的形式出现的</li>
</ul>
<h6 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h6><p>比如说你天天用你室友的水卡洗澡（在学校总部类中打印学院人数），虽然洗干净澡的目的都达到了（结果正确输出了），不过水卡毕竟是人家的（类是学校总部类），人情比钱更加难以偿还，为了避免这种情况，我们要使用自己的水卡（在学院类中打印输出）我是天才🐱</p>
<p>这里我们打印学院人员的代码出现在了管理学校总部人员的类之中了，因此需要改进</p>
<h5 id="改版"><a href="#改版" class="headerlink" title="改版"></a>改版</h5><ul>
<li>1)前面设计的问题在于SchoolManager中，CollegeEmployee类并不是SchoolManager类的直接朋友(分析)</li>
<li>2)按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.principle.LoD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/18/16:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:迪米特法则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dmt</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SChoolManner</span> <span class="variable">sChoolManner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SChoolManner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出学院员工ID，和学院总部id</span></span><br><span class="line">        sChoolManner.printALlEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManner</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学院员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManner</span>&#123;</span><br><span class="line">    <span class="comment">//返回学院所以员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getCollegeEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//创建10个员工，</span></span><br><span class="line">            <span class="type">CollegeEmployee</span> <span class="variable">collegeEmployee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">            collegeEmployee.setId(<span class="string">&quot;学院ID： &quot;</span>+String.valueOf(i));</span><br><span class="line">            list.add(collegeEmployee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEmployee</span><span class="params">( )</span>&#123;</span><br><span class="line">        <span class="comment">//获取学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1=getCollegeEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分公司--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee collegeEmployee : list1) &#123;</span><br><span class="line">            System.out.println(collegeEmployee.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SChoolManner</span>&#123;</span><br><span class="line">    <span class="comment">//返回学校总部所以员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getCollegeEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">           employee.setId(<span class="string">&quot;学校总部员工： &quot;</span>+String.valueOf(i));</span><br><span class="line">           list.add(employee);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printALlEmployee</span><span class="params">(CollegeManner sub)</span>&#123;</span><br><span class="line">         sub.printEmployee();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2=<span class="built_in">this</span>.getCollegeEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------总部--------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : list2) &#123;</span><br><span class="line">            System.out.println(employee.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>卧槽，好厉害，原来这就是软件设计</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li>1)迪米特法则的核心是降低类之间的耦合</li>
<li>2)但是注意:由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系，并不是要求完全没有依赖天系</li>
</ul>
<hr>
<h3 id="3-2-7-合成复用原则-CARP"><a href="#3-2-7-合成复用原则-CARP" class="headerlink" title="3.2.7 合成复用原则 CARP"></a>3.2.7 合成复用原则 CARP</h3><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>原则是尽量使用合成/聚合的方式，而不是继承</p>
<h4 id="案例引用"><a href="#案例引用" class="headerlink" title="案例引用"></a>案例引用</h4><p>我们假设有一个什么呢我想想…假设我们村里有一个乒乓球室（一个类A），我想去里面打乒乓球(一个类B想要实现A里面的方法)，然后我就直接去那里天天打乒乓球（最简单的方法就是我们直接继承），可是有一天乒乓球馆扩建了（A类添加了很多B类不需要的功能，所以耦合性就变高了很多），里面建了篮球场，羽毛球，排球…，突然间体育馆人变多了很多，可我只想要打乒乓球，我还是喜欢安静一点的地方</p>
<p>那么我们该如何解决呢？(⊙_⊙)？</p>
<p>对啦聪明的你肯定想到了，我们前面有讲依赖传递的三种方式，这里无论用那种都可以将A与B的关系分开来</p>
<hr>
<h2 id="3-3设计原则的核心思想"><a href="#3-3设计原则的核心思想" class="headerlink" title="3.3设计原则的核心思想"></a>3.3设计原则的核心思想</h2><ul>
<li>1)找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</li>
<li>2)针对<strong>接口编程</strong>，而不是针对实现编程。</li>
<li>3)为了交互对象之间的松耦合设计而努力</li>
</ul>
<p>我们的七大设计原则就到这里啦，要及时复习哦还是很容易混的，加油加油加油你一定可以的！( •̀ ω •́ )✧</p>
<hr>
<h1 id="4-23种设计模式"><a href="#4-23种设计模式" class="headerlink" title="4. 23种设计模式"></a>4. 23种设计模式</h1><p>woc！</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>1)设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是某类问题的<strong>通用解决方案</strong>，设计模式(Design pattern)代表了<strong>最佳的实践</strong>。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</li>
<li>2)设计模式的本质提高软件的维护性，通用性和扩展性，并降低软件的复杂</li>
</ul>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol>
<li>创建型模式:<strong>单例摸式</strong>、抽象工厂模式、原型模式、建造者模式、<strong>工厂模式</strong>。</li>
<li>结构型模式:适配器模式、桥接模式、<strong>装饰模式</strong>、组合模式、外观模式、享元模式、代理模式。</li>
<li>行为型模式:模版方法模式、命令模式、访问者模式、迭代器模式、<strong>观察者模式</strong>、中介者模式、备忘录模式、解释器模式(Interpreter模式）、状态模式、策略模式、职责链模式(责任链模式)。</li>
</ol>
<p>反正我是先爆炸了</p>
<hr>
<h2 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p>
<h4 id="单例模式的八种方式"><a href="#单例模式的八种方式" class="headerlink" title="单例模式的八种方式"></a>单例模式的八种方式</h4><ul>
<li>1)<strong>饿汉式(静态常量)</strong></li>
<li>2<strong>)饿汉式（静态代码块)</strong></li>
<li>3)懒汉式(线程不安全)</li>
<li>4)懒汉式(线程安全，同步方法)</li>
<li>5)懒汉式(线程安全，同步代码块)</li>
<li><strong>6)双重检查</strong></li>
<li><strong>7)静态内部类</strong></li>
<li><strong>8枚举</strong></li>
</ul>
<p>woc太多了不学了</p>
<h5 id="1-饿汉式-静态常量"><a href="#1-饿汉式-静态常量" class="headerlink" title="1.饿汉式(静态常量)"></a>1.饿汉式(静态常量)</h5><ol>
<li>构造器私有化（防止通过new创建实例）</li>
<li>类的内部创建对象</li>
<li>向外暴露一个静态的公共方法。getInstance（返回实例）</li>
<li>代码实现</li>
</ol>
<h6 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/13:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:饿汉式(静态常量)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode() == instance2.hashCode());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这两个实例是同一个实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态变量饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有化 外部不能new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>嗨嗨嗨，准备好要听李师傅瞎编了没呢，我们来一起解释一下代码吧</p>
</li>
<li><p>首先我们先来看Singleton类，这里将构造器私有化，也就是我们不能在外部写：</p>
</li>
<li><p>```java<br>Singleton singleton = new Singleton();</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 然后呢我们在本类中创建一个实例， private final static 私有，不可更改，且唯一的实例化（static）</span><br><span class="line"></span><br><span class="line">- 欸，我们现在将这个实例给私有了，那别人怎么用呢，我们再给他一个静态方法，让外部只能调用这个方法才能有返回</span><br><span class="line"></span><br><span class="line">- 同时呢，我们的单例模式的宗旨就是一个类只能存在一个对象实例，所以我们要使用静态来修饰</span><br><span class="line"></span><br><span class="line">###### 优缺点</span><br><span class="line"></span><br><span class="line">优缺点说明:</span><br><span class="line"></span><br><span class="line">- 1)优点:这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</span><br><span class="line">- 2)缺点:在类装载的时候就完成实例化，没有达到Lazy Loading（满加载）的效果。**如果从始至终从未使用过这个实例，则会造成内存的浪费**</span><br><span class="line">- 3)这种方式基于classloder（类装载）机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</span><br><span class="line">- 4)结论:这种单例模式可用，**可能造成内存浪费**</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">##### 2.饿汉式（静态代码块)</span><br><span class="line"></span><br><span class="line">我们来看代码吧☀️</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.sgg.design.singleton;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * @Author: 李阳</span><br><span class="line"> * @Date: 2024/12/20/13:47</span><br><span class="line"> * @Description: 饿汉式（静态代码块）</span><br><span class="line"> */</span><br><span class="line">public class type2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Singleton2 instance3 = Singleton2.getInstance();</span><br><span class="line">        Singleton2 instance4 = Singleton2.getInstance();</span><br><span class="line"></span><br><span class="line">        // 检查两个实例是否相等，结果应为true</span><br><span class="line">        System.out.println(instance3 == instance4);  // true</span><br><span class="line"></span><br><span class="line">        // 检查两个实例的 hashCode 是否相等，结果应为true</span><br><span class="line">        System.out.println(instance3.hashCode() == instance4.hashCode());  // true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Singleton2 &#123;</span><br><span class="line">    // 构造器私有化，外部不能直接 new</span><br><span class="line">    private Singleton2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 本类内部创建单例对象</span><br><span class="line">    private static Singleton2 INSTANCE;</span><br><span class="line"></span><br><span class="line">    // 在静态代码块中创建单例对象</span><br><span class="line">    static &#123;</span><br><span class="line">        INSTANCE = new Singleton2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提供一个公有的静态方法，返回实例对象</span><br><span class="line">    public static Singleton2 getInstance() &#123;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>准备好了吗，我又要开始瞎编啦</p>
<ul>
<li>还是一样的我们私有化构造器 (单例类的构造器被私有化，意味着外部无法直接通过 <code>new</code> 关键字创建该类的实例。这是为了防止在外部代码中实例化多个 <code>Singleton2</code> 对象，从而违反单例模式的原则。)</li>
<li><code>INSTANCE</code>是一个 <code>private static</code> 类型的变量。它用来存储单例对象。<code>static</code> 表示这个变量属于类本身，而不是某个实例，也就是说，类加载时这个变量就会被分配内存空间。</li>
<li><code>static</code> 静态代码块用于在类加载时初始化 <code>INSTANCE</code> 对象。静态代码块在类被加载到 JVM 中时只执行一次，因此这里创建的 <code>INSTANCE</code> 对象也只会存在一个实例。这样就实现了单例模式的特性，保证了 <code>Singleton2</code> 只有一个实例。</li>
<li>由于 <code>INSTANCE</code> 是 <code>static</code> 的，所以即使 <code>Singleton2</code> 类没有被实例化，<code>INSTANCE</code> 仍然可以通过类名直接访问。</li>
</ul>
<p>什么？你还是听不懂?听不懂就对了，这是ai写的不是我说的，我也还没看懂</p>
<p>emm 不过这是一个因为我们先创建了一个私有变量<code>instace</code> 会在内存中开辟一段空间，这个空间是在类加载中就加载，我们传统的是实例化的时候加载，所以我们用的还是同一个实例化的对象满足了单例模式。</p>
<p>那么为什么我们要写成静态代码块的样子呢就很好解释了，就是想要在类加载的时候就加载这个对象，这种与上面那种其实是一样的只是写法不太一样。第二种相对比较动态</p>
<h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>1）这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</li>
<li>2)结论:这种单例模式可用，但是可能造成内存浪费</li>
</ul>
<h5 id="3-懒汉式-线程不安全"><a href="#3-懒汉式-线程不安全" class="headerlink" title="3.懒汉式(线程不安全)"></a>3.懒汉式(线程不安全)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.singleton.Type03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/14:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:懒汉式(线程不安全)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode() == instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">// 本类内部创建单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//防止new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的工友方法，当使用到该方法时候才去创建instance</span></span><br><span class="line">    <span class="comment">//即懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="comment">//如果没有创建，则就创建</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">              instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嘿嘿嘿，有没有突然明白懒汉与饿汉的区别呢</p>
<p>懒汉很懒，饿的时候再吃饭</p>
<p>饿汉饿怕了，先把饭做好，还不饿我就已经准备吃饭了</p>
<h6 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>1)起到了Lazy Loading的效果，但是只能在单线程下使用。</li>
<li>2）如果在多线程下，一个线程进入_了if (singleton ==null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</li>
<li>3）结论:<strong>在实际开发中，不要使用这种方式.</strong></li>
</ul>
<h5 id="4-懒汉式-线程安全，同步方法"><a href="#4-懒汉式-线程安全，同步方法" class="headerlink" title="4.懒汉式(线程安全，同步方法)"></a>4.懒汉式(线程安全，同步方法)</h5><p> <code>synchronized</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.singleton.Type04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/15:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:懒汉式(线程安全 ， 同步方法)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode() == instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">// 本类内部创建单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//防止new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的工友方法，加入同步处理方法</span></span><br><span class="line">    <span class="comment">//即懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果没有创建，则就创建</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>1)解决了线程不安全问题</li>
<li>2)效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低</li>
<li>3)结论:<strong>在实际开发中，不推荐使用这种方式</strong></li>
</ul>
<h5 id="5-懒汉式-线程安全，同步代码块"><a href="#5-懒汉式-线程安全，同步代码块" class="headerlink" title="5.懒汉式(线程安全，同步代码块)"></a>5.懒汉式(线程安全，同步代码块)</h5><p><img src="https://bu.dusays.com/2025/01/15/6787af3cb1214.png" alt="image-20241220150913821.png">、</p>
<h6 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>1）这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，改为同步产生实例化的的代码块</li>
<li>2)但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton+== null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例</li>
<li>3）结论:在实际开发中，不能使用这种方式</li>
</ul>
<h5 id="6-双重检查（推荐）"><a href="#6-双重检查（推荐）" class="headerlink" title="6.双重检查（推荐）"></a>6.双重检查（推荐）</h5><p>保证一个线程在执行</p>
<p>我好累有点不太想说话了</p>
<p>凑合着看代码吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.singleton.Type06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/15:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 双重检查（推荐）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode() == instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">// 本类内部创建单例对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * volatile 共享，可见性，禁止指令重排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="comment">//防止new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的工友方法，加入双重检查代码，解决懒加载与线程安全</span></span><br><span class="line">    <span class="comment">//即懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果没有创建，则就创建</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来看一下代码吧<img src="https://bu.dusays.com/2025/01/15/678786cf29597.gif" alt></p>
<p>首先我们先解释一下两个关键字</p>
<ul>
<li>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性，Java中每一个对象都可以作为锁，这是synchronized实现同步的基础。</li>
<li>volatile 理解为把实例化的对象共享即可</li>
<li>假设我们有A，B两个线程，A进入了第一个if语句，这时候（synchronized）B就只能再门口等着，A执行第二个if语句实例化了对象就退出了（volatile），B进入第二个循环语句被告知instance不为空了，所以就不用执行那一个实例化语句了</li>
<li>往后面及时有再多的线程也进不去第二个循环了</li>
</ul>
<h6 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if (singleton ==null）检查．这样就可以保证线程安全了。</li>
<li>这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象，也避免的反复进行方法同步.</li>
<li>线程安全;延迟加载;效率较高</li>
<li>结论:在实际开发中，推荐使用这种单例设计模式</li>
</ul>
<h5 id="7-静态内部类（推荐）"><a href="#7-静态内部类（推荐）" class="headerlink" title="7.静态内部类（推荐）"></a>7.静态内部类（推荐）</h5><p>当我们的Singleton被装载时，我们的静态内部类不会被装载</p>
<p>当我们去调用Singleton 的get方法的时候，用到了这个静态变量的时候，我们的静态静态内会被装载，当我们类被装载的时候线程是安全的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.singleton.Type7;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:使用静态内部类完成单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode() == instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">// 本类内部创建单例对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="comment">//防止new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个静态内部类该类中有个静态属性Singleton</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInstance</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的工友方法，直接返回return SingletonInstance.instance;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这代码感觉好有质量</p>
<p>我来编一下代码逻辑</p>
<p><img src="https://bu.dusays.com/2025/01/15/678786d0132f7.gif" alt></p>
<p>这个静态内部类他在我们Singleton装载的时候并不会马上执行（保障了我们的单例和懒加载都是可以满足的）</p>
<p>当我们调用getInstance的时候，他会取这个静态内部类SingletonInstance里的instance属性，这个时候我们的SingletonInstance就可以加载了，因为我们的静态内在装载的过程中是线程安全的</p>
<h6 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>1)这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</li>
<li>2）静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，牙会装载SingletonInstance类，从而完成singleton的实例化。</li>
<li>3)类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</li>
<li>4)优点:避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li>
<li>5)结论:推荐使用.</li>
</ul>
<h5 id="8-枚举（最完美）"><a href="#8-枚举（最完美）" class="headerlink" title="8.枚举（最完美）"></a>8.枚举（最完美）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.singleton.Type8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/16:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode() == instance2.hashCode());</span><br><span class="line"></span><br><span class="line">        instance.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用枚举完成单例</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE;<span class="comment">//一个属性保证了单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="优缺点-6"><a href="#优缺点-6" class="headerlink" title="优缺点"></a>优缺点</h6><ul>
<li>1)这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象</li>
<li>2)这种方式是tffective Java作者Josh Bloch提倡的方式</li>
<li>3)结论(推荐使用</li>
</ul>
<h4 id="单例模式的注意事项和细节说明"><a href="#单例模式的注意事项和细节说明" class="headerlink" title="单例模式的注意事项和细节说明"></a>单例模式的注意事项和细节说明</h4><ul>
<li>1)）单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系绞性能</li>
<li>2)当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</li>
<li>3)单例模式使用的场景:需要频繁的进行创建和销毁的对象创建对象时耗时过多或耗费资源过多(即:重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session工厂等)</li>
</ul>
<hr>
<p>又是一年冬至</p>
<hr>
<h3 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2.简单工厂模式"></a>2.简单工厂模式</h3><h4 id="案例应用"><a href="#案例应用" class="headerlink" title="案例应用"></a>案例应用</h4><p><img src="https://bu.dusays.com/2025/01/15/6787af6ed8cb0.png" alt="image-20241220173718576.png"></p>
<ul>
<li><p>第一步：建一个抽象方法 </p>
<ul>
<li><p>（什么？你问我为什么建一个抽象方法）</p>
</li>
<li><p>抽象方法相当于标准，我们很多披萨只要实现这个方法就好了，避免大量操作</p>
</li>
</ul>
</li>
<li><p>第二步：其他披萨去继承这个披萨抽象类就可以了，然后再子类中重写就可以啦</p>
</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/6787afd178a21.png" alt="image-20241220174631577-1734687992811-1.png"></p>
<h4 id="传统代码"><a href="#传统代码" class="headerlink" title="传统代码"></a>传统代码</h4><p>没有使用工厂方法的</p>
<p><img src="https://bu.dusays.com/2025/01/15/6787afd179665.png" alt="image-20241220183120815.png"></p>
<p>注意：超多方法来袭</p>
<p>pizza抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/17:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:抽象披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//披萨名字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备原材料 不同披萨不一样，因此作出抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake on &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title function_">cut</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cut on &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">box</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Box on &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>希腊披萨</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/17:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:希腊披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreekPizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;希腊劈杀啥味的没吃过&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>奶酪披萨</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/17:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:奶酪披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheessPizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//准备原材料</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我没吃过奶酪披萨，我喜欢达美乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>订购披萨的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.Factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza.CheessPizza;</span><br><span class="line"><span class="keyword">import</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza.GreekPizza;</span><br><span class="line"><span class="keyword">import</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * &amp;#064;Date:  2024/12/20/17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:订购披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为他会使用到我们前面的方法，所以定义构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String orderType;<span class="comment">//订购pizza的类型</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getType();</span><br><span class="line">            <span class="keyword">if</span> (orderType .equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> <span class="title class_">GreekPizza</span>();</span><br><span class="line">               pizza.name = <span class="string">&quot;希腊劈杀&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType .equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">                pizza=<span class="keyword">new</span> <span class="title class_">CheessPizza</span>();</span><br><span class="line">                pizza.name=<span class="string">&quot;耐劳劈杀&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出pizza制作构成</span></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要订购的劈杀&quot;</span>);</span><br><span class="line">            String str=bufferedReader.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.Factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/18:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaStore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">OrderPizza</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://bu.dusays.com/2025/01/15/6787afd18da20.png" alt="image-20241220182941372.png"></p>
<hr>
<p>假设我们现在增加一个新品种—胡椒披萨</p>
<p>呼叫劈杀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sgg.design.Factory.simplefactory.pizzastore.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/12/20/18:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:新增胡椒劈杀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PepperPizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给胡椒披萨准备材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要修改OrderPizza里面的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (orderType .equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> <span class="title class_">GreekPizza</span>();</span><br><span class="line">               pizza.name = <span class="string">&quot;希腊劈杀&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType .equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">                pizza=<span class="keyword">new</span> <span class="title class_">CheessPizza</span>();</span><br><span class="line">                pizza.name=<span class="string">&quot;耐劳劈杀&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType .equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">                pizza=<span class="keyword">new</span> <span class="title class_">PepperPizza</span>();</span><br><span class="line">                pizza.name=<span class="string">&quot;呼叫劈杀&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>哎哎哎等等，新增功能会修改源代码怎么这么熟悉，你能联想到什么原则呢</p>
<p>对对对，就是那个那个那个那个嘛，我知道的👀</p>
<p>《开闭原则》</p>
<p>对啦，太聪明啦，我就知道你会想起来的</p>
<h5 id="传统方式优缺点"><a href="#传统方式优缺点" class="headerlink" title="传统方式优缺点"></a>传统方式优缺点</h5><ol>
<li>优点是比较好理解，简单易操作。</li>
<li>缺点是违反了设计模式的ocp原则，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</li>
<li>比如我们这时要新增加一个Pizza的种类(Pepper披萨)，我们需要做源代码修改.</li>
</ol>
<h6 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h6><p><strong>分析</strong>:修改代码可以接受，但是如果我们在其它的地方也有创建Pizza的代码，就意味着，也需要修改，而创建Pizza的代码，往往有多处。</p>
<p><strong>思路</strong>:<strong>把创建Pizza对象封装到一个类中</strong>，这样我们有新的Pizza种类时，只需要修改该类就可，<strong>其它有创建到Pizza对象的代码就不需要修改了-</strong>—&gt;简单工厂模式</p>
<hr>
<h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><ul>
<li>1)简单工厂模式是属于创建型模式，是工厂模式的一种。<strong>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例</strong>。简单工厂模式是工厂模式家族中最简单实用的模式</li>
<li>2)简单工厂模式:定义了一个创建对象的类，由这个类来封装实例化对象的行为(代码)</li>
<li>3）在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式.</li>
</ul>
<p><img src="https://bu.dusays.com/2025/01/15/6787afd19babb.png" alt="image-20241225144054449.png"></p>
<p>我们现在定义了一个工厂（类似黑中介，代购）想买披萨是吧？先来找我，我帮你去买</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC尚硅谷版</title>
    <url>/posts/52068/</url>
    <content><![CDATA[<h1 id="一springmvc简介">一、SpringMVC简介</h1>
<h3 id="1什么是mvc">1、什么是MVC</h3>
<p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao
对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程：
用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h3 id="2什么是springmvc">2、什么是SpringMVC</h3>
<p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring
为表述层开发提供的一整套完备的解决方案。在表述层框架历经
Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了
SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h3 id="3springmvc的特点">3、SpringMVC的特点</h3>
<ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC
容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="二helloworld">二、HelloWorld</h1>
<h3 id="1开发环境">1、开发环境</h3>
<p>IDE：idea 2019.2</p>
<p>构建工具：maven3.5.4</p>
<p>服务器：tomcat7</p>
<p>Spring版本：5.3.1</p>
<h3 id="2创建maven工程">2、创建maven工程</h3>
<h5 id="a添加web模块">a&gt;添加web模块</h5>
<h5 id="b打包方式war">b&gt;打包方式：war</h5>
<h5 id="c引入依赖">c&gt;引入依赖</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：由于 Maven
的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d3ef165fa69.png" alt="images"></p>
<h3 id="3配置webxml">3、配置web.xml</h3>
<p>注册SpringMVC的前端控制器DispatcherServlet</p>
<h5 id="a默认配置方式">a&gt;默认配置方式</h5>
<p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b扩展配置方式">b&gt;扩展配置方式</h5>
<p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">		而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">		因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p>
<p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p>
</blockquote>
<h3 id="4创建请求控制器">4、创建请求控制器</h3>
<p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5创建springmvc的配置文件">5、创建springMVC的配置文件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6测试helloworld">6、测试HelloWorld</h3>
<h5 id="a实现对首页的访问">a&gt;实现对首页的访问</h5>
<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b通过超链接跳转到指定页面">b&gt;通过超链接跳转到指定页面</h5>
<p>在主页index.html中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7总结">7、总结</h3>
<p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h1 id="三requestmapping注解">三、@RequestMapping注解</h1>
<h3 id="1requestmapping注解的功能">1、@RequestMapping注解的功能</h3>
<p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC
接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="2requestmapping注解的位置">2、@RequestMapping注解的位置</h3>
<p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3requestmapping注解的value属性">3、@RequestMapping注解的value属性</h3>
<p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4requestmapping注解的method属性">4、@RequestMapping注解的method属性</h3>
<p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request
method ‘POST’ not supported</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<p>处理get请求的映射–&gt;@GetMapping</p>
<p>处理post请求的映射–&gt;@PostMapping</p>
<p>处理put请求的映射–&gt;@PutMapping</p>
<p>处理delete请求的映射–&gt;@DeleteMapping</p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h3 id="5requestmapping注解的params属性了解">5、@RequestMapping注解的params属性（了解）</h3>
<p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter
conditions “username, password!=123456” not met for actual request
parameters: username={admin}, password={123456}</p>
</blockquote>
<h3 id="6requestmapping注解的headers属性了解">6、@RequestMapping注解的headers属性（了解）</h3>
<p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p>
<p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p>
<p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<h3 id="7springmvc支持ant风格的路径">7、SpringMVC支持ant风格的路径</h3>
<p>？：表示任意的单个字符</p>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用**时，只能使用/**/xxx的方式</p>
<h3 id="8springmvc支持路径中的占位符重点">8、SpringMVC支持路径中的占位符（重点）</h3>
<p>原始方式：/deleteUser?id=1</p>
<p>rest方式：/deleteUser/1</p>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure>

<h1 id="四springmvc获取请求参数">四、SpringMVC获取请求参数</h1>
<h3 id="1通过servletapi获取">1、通过ServletAPI获取</h3>
<p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2通过控制器方法的形参获取请求参数">2、通过控制器方法的形参获取请求参数</h3>
<p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>
</blockquote>
<h3 id="3requestparam">3、@RequestParam</h3>
<p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required
String parameter ‘xxx’ is not
present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为““时，则使用默认值为形参赋值</p>
<h3 id="4requestheader">4、@RequestHeader</h3>
<p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="5cookievalue">5、@CookieValue</h3>
<p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="6通过pojo获取请求参数">6、通过POJO获取请求参数</h3>
<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7解决获取请求参数的乱码问题">7、解决获取请求参数的乱码问题</h3>
<p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="五域对象共享数据">五、域对象共享数据</h1>
<h3 id="1使用servletapi向request域对象共享数据">1、使用ServletAPI向request域对象共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2使用modelandview向request域对象共享数据">2、使用ModelAndView向request域对象共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3使用model向request域对象共享数据">3、使用Model向request域对象共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4使用map向request域对象共享数据">4、使用map向request域对象共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5使用modelmap向request域对象共享数据">5、使用ModelMap向request域对象共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6modelmodelmapmap的关系">6、Model、ModelMap、Map的关系</h3>
<p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap
类型的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7向session域共享数据">7、向session域共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8向application域共享数据">8、向application域共享数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六springmvc的视图">六、SpringMVC的视图</h1>
<p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3 id="1thymeleafview">1、ThymeleafView</h3>
<p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/03/14/67d3ef166cc49.png"></p>
<h3 id="2转发视图">2、转发视图</h3>
<p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以“forward:“为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀“forward:“去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如“forward:/“，“forward:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/03/14/67d3ef166e579.png" alt="image-20210706201316593"></p>
<h3 id="3重定向视图">3、重定向视图</h3>
<p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以“redirect:“为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀“redirect:“去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如“redirect:/“，“redirect:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/03/14/67d3ef1677986.png" alt="image-20210706201602267"></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h3 id="4视图控制器view-controller">4、视图控制器view-controller</h3>
<p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven /&gt;</p>
</blockquote>
<h1 id="七restful">七、RESTful</h1>
<h3 id="1restful简介">1、RESTful简介</h3>
<p>REST：<strong>Re</strong>presentational <strong>S</strong>tate
<strong>T</strong>ransfer，表现层资源状态转移。</p>
<h5 id="a资源">a&gt;资源</h5>
<p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<h5 id="b资源的表述">b&gt;资源的表述</h5>
<p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<h5 id="c状态转移">c&gt;状态转移</h5>
<p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="2restful的实现">2、RESTful的实现</h3>
<p>具体说，就是 HTTP
协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT
用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL
地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为
URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody>
</table>
<h3 id="3hiddenhttpmethodfilter">3、HiddenHttpMethodFilter</h3>
<p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong>
帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong>
处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong>
过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li><p>在 CharacterEncodingFilter 中通过
request.setCharacterEncoding(encoding) 方法设置字符集的</p></li>
<li><p>request.setCharacterEncoding(encoding)
方法要求前面不能有任何获取请求参数的操作</p></li>
<li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li>
<li><pre><code>String paramValue = request.getParameter(this.methodParam);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 八、RESTful案例</span><br><span class="line"></span><br><span class="line">### 1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> public class Employee &#123;</span><br><span class="line"> </span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"> </span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line">    </span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre></li>
</ul>
</blockquote>
<ul>
<li><p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2功能清单">2、功能清单</h3>
<table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody>
</table>
<h3 id="3具体功能访问首页">3、具体功能：访问首页</h3>
<h5 id="a配置view-controller">a&gt;配置view-controller</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b创建页面">b&gt;创建页面</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4具体功能查询所有员工数据">4、具体功能：查询所有员工数据</h3>
<h5 id="a控制器方法">a&gt;控制器方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b创建employee_listhtml">b&gt;创建employee_list.html</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5具体功能删除">5、具体功能：删除</h3>
<h5 id="a创建处理delete请求方式的表单">a&gt;创建处理delete请求方式的表单</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b删除超链接绑定点击事件">b&gt;删除超链接绑定点击事件</h5>
<p>引入vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过vue处理点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="c控制器方法">c&gt;控制器方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6具体功能跳转到添加数据页面">6、具体功能：跳转到添加数据页面</h3>
<h5 id="a配置view-controller-1">a&gt;配置view-controller</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b创建employee_addhtml">b&gt;创建employee_add.html</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7具体功能执行保存">7、具体功能：执行保存</h3>
<h5 id="a控制器方法-1">a&gt;控制器方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8具体功能跳转到更新数据页面">8、具体功能：跳转到更新数据页面</h3>
<h5 id="a修改超链接">a&gt;修改超链接</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b控制器方法">b&gt;控制器方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c创建employee_updatehtml">c&gt;创建employee_update.html</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9具体功能执行更新">9、具体功能：执行更新</h3>
<h5 id="a控制器方法-2">a&gt;控制器方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八httpmessageconverter">八、HttpMessageConverter</h1>
<p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<p>ResponseEntity</p>
<h3 id="1requestbody">1、@RequestBody</h3>
<p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>requestBody:username=admin&amp;password=123456</p>
<h3 id="2requestentity">2、RequestEntity</h3>
<p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果： requestHeader:[host:“localhost:8080”,
connection:“keep-alive”, content-length:“27”, cache-control:“max-age=0”,
sec-ch-ua:““ Not A;Brand“;v=“99”, “Chromium”;v=“90”, “Google
Chrome”;v=“90”“, sec-ch-ua-mobile:“?0”, upgrade-insecure-requests:“1”,
origin:“http://localhost:8080”, user-agent:“Mozilla/5.0 (Windows NT
10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/90.0.4430.93 Safari/537.36”]
requestBody:username=admin&amp;password=123</p>
<h3 id="3responsebody">3、@ResponseBody</h3>
<p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：浏览器页面显示success</p>
<h3 id="4springmvc处理json">4、SpringMVC处理json</h3>
<p>@ResponseBody处理json的步骤：</p>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>

<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器的页面中展示的结果：</p>
<p>{“id”:1001,“username”:“admin”,“password”:“123456”,“age”:23,“sex”:“男”}</p>
<h3 id="5springmvc处理ajax">5、SpringMVC处理ajax</h3>
<p>a&gt;请求超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;通过vue和axios处理点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">testAjax</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:event.<span class="property">target</span>.<span class="property">href</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAjax</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6restcontroller注解">6、@RestController注解</h3>
<p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<h3 id="7responseentity">7、ResponseEntity</h3>
<p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<h1 id="九文件上传和下载">九、文件上传和下载</h1>
<h3 id="1文件下载">1、文件下载</h3>
<p>使用ResponseEntity实现下载文件的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2文件上传">2、文件上传</h3>
<p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=“multipart/form-data”</p>
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：</p>
<p>a&gt;添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十拦截器">十、拦截器</h1>
<h3 id="1拦截器的配置">1、拦截器的配置</h3>
<p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2拦截器的三个抽象方法">2、拦截器的三个抽象方法</h3>
<p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h3 id="3多个拦截器的执行顺序">3、多个拦截器的执行顺序</h3>
<p>a&gt;若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<h1 id="十一异常处理器">十一、异常处理器</h1>
<h3 id="1基于配置的异常处理">1、基于配置的异常处理</h3>
<p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        		properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        	--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2基于注解的异常处理">2、基于注解的异常处理</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二注解配置springmvc">十二、注解配置SpringMVC</h1>
<p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3 id="1创建初始化类代替webxml">1、创建初始化类，代替web.xml</h3>
<p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。
Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2创建springconfig配置类代替spring的配置文件">2、创建SpringConfig配置类，代替spring的配置文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3创建webconfig配置类代替springmvc的配置文件">3、创建WebConfig配置类，代替SpringMVC的配置文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4测试功能">4、测试功能</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三springmvc执行流程">十三、SpringMVC执行流程</h1>
<h3 id="1springmvc常用组件">1、SpringMVC常用组件</h3>
<ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h3 id="2dispatcherservlet初始化过程">2、DispatcherServlet初始化过程</h3>
<p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet
的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d3ef166c0bf.png" alt="images"></p>
<h5 id="a初始化webapplicationcontext">a&gt;初始化WebApplicationContext</h5>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b创建webapplicationcontext">b&gt;创建WebApplicationContext</h5>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="cdispatcherservlet初始化策略">c&gt;DispatcherServlet初始化策略</h5>
<p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3dispatcherservlet调用组件处理请求">3、DispatcherServlet调用组件处理请求</h3>
<h5 id="aprocessrequest">a&gt;processRequest()</h5>
<p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request,
response)</p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="bdoservice">b&gt;doService()</h5>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="cdodispatch">c&gt;doDispatch()</h5>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            	handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            	interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            	interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           	<span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="dprocessdispatchresult">d&gt;processDispatchResult()</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4springmvc的执行流程">4、SpringMVC的执行流程</h3>
<ol type="1">
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器
DispatcherServlet捕获。</p></li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p></li>
</ol>
<ol type="a">
<li>不存在</li>
</ol>
<ol start="9" type="a">
<li>再判断是否配置了mvc:default-servlet-handler</li>
</ol>
<ol start="2" type="i">
<li>如果没配置，则控制台报映射查找不到，客户端展示404错误</li>
</ol>
<p><img src="https://bu.dusays.com/2025/03/14/67d3ef165ef40.png" alt="image-20210709214911404"></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d3ef17c0cb9.png" alt="image-20210709214947432"></p>
<ol start="3" type="i">
<li>如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</li>
</ol>
<p><img src="https://bu.dusays.com/2025/03/14/67d3ef17cb8b7.png" alt="image-20210709215255693"></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d3ef17e2214.png" alt="image-20210709215336097"></p>
<ol start="2" type="a">
<li>存在则执行下面的流程</li>
</ol>
<ol start="3" type="1">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p></li>
<li><p>DispatcherServlet
根据获得的Handler，选择一个合适的HandlerAdapter。</p></li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p></li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p></li>
</ol>
<ol type="a">
<li><p>HttpMessageConveter：
将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p></li>
<li><p>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p></li>
<li><p>数据格式化：对请求消息进行数据格式化。
如将字符串转换成格式化数字或格式化日期等</p></li>
<li><p>数据验证：
验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p></li>
</ol>
<ol start="7" type="1">
<li><p>Handler执行完成后，向DispatcherServlet
返回一个ModelAndView对象。</p></li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p></li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p></li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p></li>
<li><p>将渲染结果返回给客户端。</p></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring6尚硅谷版</title>
    <url>/posts/35213/</url>
    <content><![CDATA[<h1 id="spring6">Spring6</h1>
<h2 id="1概述">1、概述</h2>
<h3 id="11spring是什么">1.1、Spring是什么？</h3>
<p>Spring 是一款主流的 Java EE 轻量级开源框架 ，Spring 由“Spring
之父”Rod Johnson 提出并创立，其目的是用于简化 Java
企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring
框架除了自己提供功能外，还提供整合其他技术和框架的能力。</p>
<p>Spring 自诞生以来备受青睐，一直被广大开发人员作为 Java
企业级应用程序开发的首选。时至今日，Spring 俨然成为了 Java EE
代名词，成为了构建 Java EE 应用的事实标准。</p>
<p>自 2004 年 4 月，Spring 1.0 版本正式发布以来，Spring 已经步入到了第 6
个大版本，也就是 Spring
6。本课程采用Spring当前最新发布的正式版本<strong>6.0.2</strong>。</p>
<h3 id="12spring-的狭义和广义">1.2、Spring 的狭义和广义</h3>
<p>在不同的语境中，Spring
所代表的含义是不同的。下面我们就分别从“广义”和“狭义”两个角度，对 Spring
进行介绍。</p>
<p><strong>广义的 Spring：Spring 技术栈</strong></p>
<p>广义上的 Spring 泛指以 Spring Framework 为核心的 Spring 技术栈。</p>
<p>经过十多年的发展，Spring
已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如
Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring
Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p>
<p>这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p>
<p><strong>狭义的 Spring：Spring Framework</strong></p>
<p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring
框架。</p>
<p>Spring 框架是一个分层的、面向切面的 Java
应用程序的一站式轻量级解决方案，它是 Spring
技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。</p>
<p>Spring 有两个最核心模块： IoC 和 AOP。</p>
<p><strong>IoC</strong>：Inverse of Control
的简写，译为“控制反转”，指把创建对象过程交给 Spring 进行管理。</p>
<p><strong>AOP</strong>：Aspect Oriented Programming
的简写，译为“面向切面编程”。AOP
用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP
还解决一些系统层面上的问题，比如日志、事务、权限等。</p>
<h3 id="13spring-framework特点">1.3、Spring Framework特点</h3>
<ul>
<li><p>非侵入式：使用 Spring Framework 开发应用程序时，Spring
对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于
Spring Framework 开发应用程序时结构清晰、简洁优雅。</p></li>
<li><p>控制反转：IoC——Inversion of
Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。</p></li>
<li><p>面向切面编程：AOP——Aspect Oriented
Programming，在不修改源代码的基础上增强代码功能。</p></li>
<li><p>容器：Spring IoC
是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</p></li>
<li><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在
Spring 中可以使用 XML 和 Java
注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</p></li>
<li><p>一站式：在 IoC 和 AOP
的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring
旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring
Framework 的基础上全部使用 Spring 来实现。</p></li>
</ul>
<h3 id="14spring模块组成">1.4、Spring模块组成</h3>
<p>官网地址：https://spring.io/</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047c09e15.png" alt="image-2097896352"></p>
<p>上图中包含了 Spring
框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。</p>
<p><strong>①Spring Core（核心容器）</strong></p>
<p>spring core提供了IOC,DI,Bean配置装载创建的核心实现。核心概念：
Beans、BeanFactory、BeanDefinitions、ApplicationContext。</p>
<ul>
<li><p>spring-core ：IOC和DI的基本实现</p></li>
<li><p>spring-beans：BeanFactory和Bean的装配管理(BeanFactory)</p></li>
<li><p>spring-context：Spring
context上下文，即IOC容器(AppliactionContext)</p></li>
<li><p>spring-expression：spring表达式语言</p></li>
</ul>
<p><strong>②Spring AOP</strong></p>
<ul>
<li>spring-aop：面向切面编程的应用模块，整合ASM，CGLib，JDK Proxy</li>
<li>spring-aspects：集成AspectJ，AOP应用框架</li>
<li>spring-instrument：动态Class Loading模块</li>
</ul>
<p><strong>③Spring Data Access</strong></p>
<ul>
<li>spring-jdbc：spring对JDBC的封装，用于简化jdbc操作</li>
<li>spring-orm：java对象与数据库数据的映射框架</li>
<li>spring-oxm：对象与xml文件的映射框架</li>
<li>spring-jms： Spring对Java Message
Service(java消息服务)的封装，用于服务之间相互通信</li>
<li>spring-tx：spring jdbc事务管理</li>
</ul>
<p><strong>④Spring Web</strong></p>
<ul>
<li>spring-web：最基础的web支持，建立于spring-context之上，通过servlet或listener来初始化IOC容器</li>
<li>spring-webmvc：实现web mvc</li>
<li>spring-websocket：与前端的全双工通信协议</li>
<li>spring-webflux：Spring 5.0提供的，用于取代传统java
servlet，非阻塞式Reactive Web框架，异步，非阻塞，事件驱动的服务</li>
</ul>
<p><strong>⑤Spring Message</strong></p>
<ul>
<li>Spring-messaging：spring
4.0提供的，为Spring集成一些基础的报文传送服务</li>
</ul>
<p><strong>⑥Spring test</strong></p>
<ul>
<li>spring-test：集成测试支持，主要是对junit的封装</li>
</ul>
<h3 id="15spring6特点">1.5、Spring6特点</h3>
<h4 id="151版本要求">1.5.1、版本要求</h4>
<p><strong>（1）Spring6要求JDK最低版本是JDK17</strong></p>
<h4 id="152本课程软件版本">1.5.2、本课程软件版本</h4>
<p>（1）IDEA开发工具：2022.1.2</p>
<p>（2）JDK：Java17**（Spring6要求JDK最低版本是Java17）**</p>
<p>（3）Spring：6.0.2</p>
<h2 id="2入门">2、入门</h2>
<h3 id="21环境要求">2.1、环境要求</h3>
<ul>
<li><p>JDK：Java17+<strong>（Spring6要求JDK最低版本是Java17）</strong></p></li>
<li><p>Maven：3.6+</p></li>
<li><p>Spring：6.0.2</p></li>
</ul>
<h3 id="24程序分析">2.4、程序分析</h3>
<p><strong>2. Spring是如何创建对象的呢？原理是什么？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dom4j解析beans.xml文件，从中获取class属性值，类的全类名</span></span><br><span class="line"> <span class="comment">// 通过反射机制调用无参数构造方法创建对象</span></span><br><span class="line"> <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>);</span><br><span class="line"> <span class="comment">//Object obj = clazz.newInstance();</span></span><br><span class="line"> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure>

<p><strong>3.
把创建好的对象存储到一个什么样的数据结构当中了呢？</strong></p>
<p>bean对象最终存储在spring容器中，在spring源码底层就是一个map集合，存储bean的map在<strong>DefaultListableBeanFactory</strong>类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>

<p>Spring容器加载到Bean类时 , 会把这个类的描述信息,
以包名加类名的方式存到beanDefinitionMap 中,
Map&lt;String,BeanDefinition&gt; , 其中 String是Key ,
默认是类名首字母小写 , BeanDefinition , 存的是类的定义(描述信息) ,
我们通常叫BeanDefinition接口为 : bean的定义对象。</p>
<h3 id="25启用log4j2日志框架">2.5、启用Log4j2日志框架</h3>
<h4 id="251log4j2日志概述">2.5.1、Log4j2日志概述</h4>
<p>在项目开发中，日志十分的重要，不管是记录运行情况还是定位线上问题，都离不开对日志的分析。日志记录了系统行为的时间、地点、状态等相关信息，能够帮助我们了解并监控系统状态，在发生错误或者接近某种危险状态时能够及时提醒我们处理，同时在系统产生问题时，能够帮助我们快速的定位、诊断并解决问题。</p>
<p><strong>Apache
Log4j2</strong>是一个开源的日志记录组件，使用非常的广泛。在工程中以易用方便代替了
System.out 等打印语句，它是JAVA下最流行的日志输入工具。</p>
<p><strong>Log4j2主要由几个重要的组件构成：</strong></p>
<p><strong>（1）日志信息的优先级</strong>，日志信息的优先级从高到低有<strong>TRACE
&lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</strong>
TRACE：追踪，是最低的日志级别，相当于追踪程序的执行
DEBUG：调试，一般在开发中，都将其设置为最低的日志级别
INFO：信息，输出重要的信息，使用较多 WARN：警告，输出警告的信息
ERROR：错误，输出错误信息 FATAL：严重错误</p>
<p>这些级别分别用来指定这条日志信息的重要程度；级别高的会自动屏蔽级别低的日志，也就是说，设置了WARN的日志，则INFO、DEBUG的日志级别的日志不会显示</p>
<p><strong>（2）日志信息的输出目的地</strong>，日志信息的输出目的地指定了日志将打印到<strong>控制台</strong>还是<strong>文件中</strong>；</p>
<p><strong>（3）日志信息的输出格式</strong>，而输出格式则控制了日志信息的显示内容。</p>
<h4 id="252引入log4j2依赖">2.5.2、引入Log4j2依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="253加入日志配置文件">2.5.3、加入日志配置文件</h4>
<p>在类的根路径下提供log4j2.xml配置文件（文件名固定为：log4j2.xml，文件必须放到类根路径下。）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line"><span class="comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span></span><br><span class="line"><span class="comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span></span><br><span class="line"><span class="comment">                info：信息，输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">                warn：警告，输出警告的信息</span></span><br><span class="line"><span class="comment">                error：错误，输出错误信息</span></span><br><span class="line"><span class="comment">                fatal：严重错误</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的信息，</span></span><br><span class="line"><span class="comment">            每次大小超过size，</span></span><br><span class="line"><span class="comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span></span><br><span class="line"><span class="comment">            作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span></span><br><span class="line"><span class="comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="254测试">2.5.4、测试</h4>
<p>运行原测试程序</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d404812a7d5.png" alt="image-20221031214305224"></p>
<p>运行原测试程序，多了spring打印日志</p>
<h4 id="255使用日志">2.5.5、使用日志</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        helloworld.sayHello();</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台：</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048129235.png" alt="image-20221031214547501"></p>
<h2 id="3容器ioc">3、容器：IoC</h2>
<p>IoC 是 Inversion of Control
的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。</p>
<p>Spring 通过 IoC 容器来管理所有 Java
对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC
容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java
对象没有任何区别。</p>
<p>IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring
从诞生到成长的整个过程。</p>
<h3 id="31ioc容器">3.1、IoC容器</h3>
<h4 id="311控制反转ioc">3.1.1、控制反转（IoC）</h4>
<ul>
<li><p>控制反转是一种思想。</p></li>
<li><p>控制反转是为了降低程序耦合度，提高程序扩展力。</p></li>
<li><p>控制反转，反转的是什么？</p></li>
<li><ul>
<li>将对象的创建权利交出去，交给第三方容器负责。</li>
<li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li>
</ul></li>
<li><p>控制反转这种思想如何实现呢？</p></li>
<li><ul>
<li>DI（Dependency Injection）：依赖注入</li>
</ul></li>
</ul>
<h4 id="312依赖注入">3.1.2、依赖注入</h4>
<p>DI（Dependency
Injection）：依赖注入，依赖注入实现了控制反转的思想。</p>
<p><strong>依赖注入：</strong></p>
<ul>
<li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li>
</ul>
<p>依赖注入常见的实现方式包括两种：</p>
<ul>
<li>第一种：set注入</li>
<li>第二种：构造注入</li>
</ul>
<p>所以结论是：IOC 就是一种控制反转的思想， 而 DI
是对IoC的一种具体实现。</p>
<p><strong>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</strong></p>
<h4 id="313ioc容器在spring的实现">3.1.3、IoC容器在Spring的实现</h4>
<p>Spring 的 IoC 容器就是
IoC思想的一个落地的产品实现。IoC容器中管理的组件也叫做 bean。在创建 bean
之前，首先需要创建IoC 容器。Spring 提供了IoC 容器的两种实现方式：</p>
<p><strong>①BeanFactory</strong></p>
<p>这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring
本身，不提供给开发人员使用。</p>
<p><strong>②ApplicationContext</strong></p>
<p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring
的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的
BeanFactory。</p>
<p><strong>③ApplicationContext的主要实现类</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047c0b53a.png" alt="iamges"></p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClassPathXmlApplicationContext</td>
<td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td>FileSystemXmlApplicationContext</td>
<td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td>ConfigurableApplicationContext</td>
<td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close()
，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td>
</tr>
<tr>
<td>WebApplicationContext</td>
<td>专门为 Web 应用准备，基于 Web 环境创建 IOC
容器对象，并将对象引入存入 ServletContext 域中。</td>
</tr>
</tbody>
</table>
<h3 id="32基于xml管理bean">3.2、基于XML管理Bean</h3>
<h4 id="321搭建子模块spring6-ioc-xml">3.2.1、搭建子模块spring6-ioc-xml</h4>
<p><strong>①搭建模块</strong></p>
<p>搭建方式如：spring-first</p>
<p><strong>②引入配置文件</strong></p>
<p>引入spring-first模块配置文件：beans.xml、log4j2.xml</p>
<p><strong>③添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④引入java类</strong></p>
<p>引入spring-first模块java及test目录下实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="322实验一获取bean">3.2.2、实验一：获取bean</h4>
<h5 id="①方式一根据id获取">①方式一：根据id获取</h5>
<p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id
属性可以精确获取到一个组件对象。上个实验中我们使用的就是这种方式。</p>
<h5 id="②方式二根据类型获取">②方式二：根据类型获取</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld1</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="③方式三根据id和类型">③方式三：根据id和类型</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld2</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="④注意的地方">④注意的地方</h5>
<p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p>
<p>当IOC容器中一共配置了两个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据类型获取时会抛出异常：</p>
<blockquote>
<p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No
qualifying bean of type ‘com.atguigu.spring6.bean.HelloWorld’ available:
expected single matching bean but found 2:
helloworldOne,helloworldTwo</p>
</blockquote>
<h5 id="⑤扩展知识">⑤扩展知识</h5>
<p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p>
<blockquote>
<p>可以，前提是bean唯一</p>
</blockquote>
<p>如果一个接口有多个实现类，这些实现类都配置了
bean，根据接口类型可以获取 bean 吗？</p>
<blockquote>
<p>不行，因为bean不唯一</p>
</blockquote>
<p><strong>结论</strong></p>
<p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象
<strong>instanceof</strong>
指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p>
<p>java中，instanceof运算符用于判断前面的对象是否是后面的类，或其子类、实现类的实例。如果是返回true，否则返回false。也就是说：用instanceof关键字做判断时，
instanceof 操作符的左右操作必须有继承或实现关系</p>
<h4 id="323实验二依赖注入之setter注入">3.2.3、实验二：依赖注入之setter注入</h4>
<p><strong>①创建学生类Student</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean时为属性赋值</strong></p>
<p>spring-di.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIBySet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-di.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentOne&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="324实验三依赖注入之构造器注入">3.2.4、实验三：依赖注入之构造器注入</h4>
<p><strong>①在Student类中添加有参构造</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id, String name, Integer age, String sex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean</strong></p>
<p>spring-di.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p>
<ul>
<li>index属性：指定参数所在位置的索引（从0开始）</li>
<li>name属性：指定参数名</li>
</ul>
</blockquote>
<p><strong>③测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIByConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-di.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentTwo&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="325实验四特殊值处理">3.2.5、实验四：特殊值处理</h4>
<h5 id="①字面量赋值">①字面量赋值</h5>
<blockquote>
<p>什么是字面量？</p>
<p>int a = 10;</p>
<p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a的时候，我们实际上拿到的值是10。</p>
<p>而如果a是带引号的：‘a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="②null值">②null值</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上写法，为name所赋的值是字符串null</p>
</blockquote>
<h5 id="③xml实体">③xml实体</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="④cdata节">④CDATA节</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="326实验五为对象类型属性赋值">3.2.6、实验五：为对象类型属性赋值</h4>
<p><strong>①创建班级类Clazz</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer clazzId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clazzName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getClazzId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazzId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazzId</span><span class="params">(Integer clazzId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClazzName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazzName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazzName</span><span class="params">(String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Clazz&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;clazzId=&quot;</span> + clazzId +</span><br><span class="line">                <span class="string">&quot;, clazzName=&#x27;&quot;</span> + clazzName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">(Integer clazzId, String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②修改Student类</strong></p>
<p>在Student类中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Clazz clazz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Clazz <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(Clazz clazz)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方式一引用外部bean">方式一：引用外部bean</h5>
<p>配置Clazz类型的bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财源滚滚班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为Student中的clazz属性赋值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>错误演示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果错把ref属性写成了value属性，会抛出异常： Caused by:
java.lang.IllegalStateException: Cannot convert value of type
‘java.lang.String’ to required type ‘com.atguigu.spring6.bean.Clazz’ for
property ‘clazz’: no matching editors or conversion strategy found</p>
<p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p>
</blockquote>
<h5 id="方式二内部bean">方式二：内部bean</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式三级联属性赋值">方式三：级联属性赋值</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;最强王者班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="327实验六为数组类型属性赋值">3.2.7、实验六：为数组类型属性赋值</h4>
<p><strong>①修改Student类</strong></p>
<p>在Student类中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] hobbies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">    <span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean6.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="328实验七为集合类型属性赋值">3.2.8、实验七：为集合类型属性赋值</h4>
<h5 id="①为list集合类型属性赋值">①为List集合类型属性赋值</h5>
<p>在Clazz类中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.students = students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p>
</blockquote>
<h5 id="②为map集合类型属性赋值">②为Map集合类型属性赋值</h5>
<p>创建教师类Teacher：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTeacherId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherId</span><span class="params">(Integer teacherId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTeacherName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherName</span><span class="params">(String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(Integer teacherId, String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;teacherId=&quot;</span> + teacherId +</span><br><span class="line">                <span class="string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Student类中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Teacher&gt; <span class="title function_">getTeacherMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> teacherMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherMap</span><span class="params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.teacherMap = teacherMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10010&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10086&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;二宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="③引用集合类型的bean">③引用集合类型的bean</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--map集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;students&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用util:list、util:map标签必须引入相应的命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</blockquote>
<h4 id="329实验八p命名空间">3.2.9、实验八：p命名空间</h4>
<p>引入p命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:id</span>=<span class="string">&quot;1006&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3210实验九引入外部属性文件">3.2.10、实验九：引入外部属性文件</h4>
<p><strong>①加入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>②创建外部属性文件</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048110a46.png" alt="images"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p><strong>③引入属性文件</strong></p>
<p>引入context 名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：在使用 <a href="context:property-placeholder">context:property-placeholder</a>
元素加载外包配置文件功能前，首先需要在 XML 配置的一级标签 <beans> 中添加
context 相关的约束。</beans></p>
<p><strong>④配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>⑤测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-datasource.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ac.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3211实验十bean的作用域">3.2.11、实验十：bean的作用域</h4>
<p><strong>①概念</strong></p>
<p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
<th>创建对象的时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>singleton（默认）</td>
<td>在IOC容器中，这个bean的对象始终为单实例</td>
<td>IOC容器初始化时</td>
</tr>
<tr>
<td>prototype</td>
<td>这个bean在IOC容器中有多个实例</td>
<td>获取bean时</td>
</tr>
</tbody>
</table>
<p>如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>在一个请求范围内有效</td>
</tr>
<tr>
<td>session</td>
<td>在一个会话范围内有效</td>
</tr>
</tbody>
</table>
<p><strong>②创建类User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanScope</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3212实验十一bean生命周期">3.2.12、实验十一：bean生命周期</h4>
<p><strong>①具体的生命周期过程</strong></p>
<ul>
<li><p>bean对象创建（调用无参构造器）</p></li>
<li><p>给bean对象设置属性</p></li>
<li><p>bean的后置处理器（初始化之前）</p></li>
<li><p>bean对象初始化（需在配置bean时指定初始化方法）</p></li>
<li><p>bean的后置处理器（初始化之后）</p></li>
<li><p>bean对象就绪可以使用</p></li>
<li><p>bean对象销毁（需在配置bean时指定销毁方法）</p></li>
<li><p>IOC容器关闭</p></li>
</ul>
<p><strong>②修改类User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：1、创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：2、依赖注入&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：3、初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：5、销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p>
</blockquote>
<p><strong>③配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLife</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-lifecycle.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑤bean的后置处理器</strong></p>
<p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p>
<p>创建bean的后置处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.process;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;☆☆☆&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;★★★&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IOC容器中配置后置处理器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3213实验十二factorybean">3.2.13、实验十二：FactoryBean</h4>
<p><strong>①简介</strong></p>
<p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p>
<p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2020 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by objects used within a &#123;<span class="doctag">@link</span> BeanFactory&#125; which</span></span><br><span class="line"><span class="comment"> * are themselves factories for individual objects. If a bean implements this</span></span><br><span class="line"><span class="comment"> * interface, it is used as a factory for an object to expose, not directly as a</span></span><br><span class="line"><span class="comment"> * bean instance that will be exposed itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span></span><br><span class="line"><span class="comment"> * references (&#123;<span class="doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span></span><br><span class="line"><span class="comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="doctag">@link</span> SmartFactoryBean&#125;</span></span><br><span class="line"><span class="comment"> * interface allows for exposing more fine-grained behavioral metadata.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span></span><br><span class="line"><span class="comment"> * the AOP &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span></span><br><span class="line"><span class="comment"> * custom components as well; however, this is only common for infrastructure code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span></span><br><span class="line"><span class="comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getObjectType()&#125; &#123;<span class="doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span></span><br><span class="line"><span class="comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span></span><br><span class="line"><span class="comment"> * other beans, implement &#123;<span class="doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span></span><br><span class="line"><span class="comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span></span><br><span class="line"><span class="comment"> * a destroy method on an exposed bean object (such as &#123;<span class="doctag">@link</span> java.io.Closeable#close()&#125;</span></span><br><span class="line"><span class="comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span></span><br><span class="line"><span class="comment"> * synchronization of bean creation. There is usually no need for internal</span></span><br><span class="line"><span class="comment"> * synchronization other than for purposes of lazy initialization within the</span></span><br><span class="line"><span class="comment"> * FactoryBean itself (or the like).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 08.03.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the bean type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of an attribute that can be</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span></span><br><span class="line"><span class="comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span></span><br><span class="line"><span class="comment">     * the factory bean class.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 5.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance (possibly shared or independent) of the object</span></span><br><span class="line"><span class="comment">     * managed by this factory.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As with a &#123;<span class="doctag">@link</span> BeanFactory&#125;, this allows support for both the</span></span><br><span class="line"><span class="comment">     * Singleton and Prototype design pattern.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span></span><br><span class="line"><span class="comment">     * the call (for example because it is involved in a circular reference),</span></span><br><span class="line"><span class="comment">     * throw a corresponding &#123;<span class="doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * objects. The factory will consider this as normal value to be used; it</span></span><br><span class="line"><span class="comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span></span><br><span class="line"><span class="comment">     * FactoryBean implementations are encouraged to throw</span></span><br><span class="line"><span class="comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an instance of the bean (can be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception in case of creation errors</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> FactoryBeanNotInitializedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if not known in advance.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span></span><br><span class="line"><span class="comment">     * instantiating objects, for example on autowiring.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span></span><br><span class="line"><span class="comment">     * this method should try to avoid singleton creation as far as possible;</span></span><br><span class="line"><span class="comment">     * it should rather estimate the type in advance.</span></span><br><span class="line"><span class="comment">     * For prototypes, returning a meaningful type here is advisable too.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span></span><br><span class="line"><span class="comment">     * been fully initialized. It must not rely on state created during</span></span><br><span class="line"><span class="comment">     * initialization; of course, it can still use such state if available.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span></span><br><span class="line"><span class="comment">     * this method properly, using the current state of the FactoryBean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if not known at the time of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ListableBeanFactory#getBeansOfType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Is the object managed by this factory a singleton? That is,</span></span><br><span class="line"><span class="comment">     * will &#123;<span class="doctag">@link</span> #getObject()&#125; always return the same object</span></span><br><span class="line"><span class="comment">     * (a reference that can be cached)?</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span></span><br><span class="line"><span class="comment">     * the object returned from &#123;<span class="doctag">@code</span> getObject()&#125; might get cached</span></span><br><span class="line"><span class="comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">     * unless the FactoryBean always exposes the same reference.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span></span><br><span class="line"><span class="comment">     * be provided by the owning BeanFactory; usually, it has to be</span></span><br><span class="line"><span class="comment">     * defined as singleton there.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="doctag">@code</span> false&#125; does not</span></span><br><span class="line"><span class="comment">     * necessarily indicate that returned objects are independent instances.</span></span><br><span class="line"><span class="comment">     * An implementation of the extended &#123;<span class="doctag">@link</span> SmartFactoryBean&#125; interface</span></span><br><span class="line"><span class="comment">     * may explicitly indicate independent instances through its</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="doctag">@link</span> FactoryBean&#125;</span></span><br><span class="line"><span class="comment">     * implementations which do not implement this extended interface are</span></span><br><span class="line"><span class="comment">     * simply assumed to always return independent instances if the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default implementation returns &#123;<span class="doctag">@code</span> true&#125;, since a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> whether the exposed object is a singleton</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getObject()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> SmartFactoryBean#isPrototype()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②创建类UserFactoryBean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取IOC容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-factorybean.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3214实验十三基于xml自动装配">3.2.14、实验十三：基于xml自动装配</h4>
<blockquote>
<p>自动装配：</p>
<p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p>
</blockquote>
<p><strong>①场景模拟</strong></p>
<p>创建类UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.controller</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建类UserServiceImpl实现接口UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.service.impl</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.dao</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建类UserDaoImpl实现接口UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.dao.impl</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean</strong></p>
<blockquote>
<p>使用bean标签的autowire属性设置自动装配效果</p>
<p>自动装配方式：byType</p>
<p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p>
<p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null</p>
<p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>自动装配方式：byName</p>
<p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutoWireByXML</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;autowire-xml.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">    userController.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="33基于注解管理bean">3.3、基于注解管理Bean（☆）</h3>
<p>从 Java 5 开始，Java
增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。</p>
<p>Spring 从 2.5
版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化
Spring 的 XML 配置。</p>
<p>Spring 通过注解实现自动装配的步骤如下：</p>
<ol type="1">
<li>引入依赖</li>
<li>开启组件扫描</li>
<li>使用注解定义 Bean</li>
<li>依赖注入</li>
</ol>
<h4 id="331搭建子模块spring6-ioc-annotation">3.3.1、搭建子模块spring6-ioc-annotation</h4>
<p><strong>①搭建模块</strong></p>
<p>搭建方式如：spring6-ioc-xml</p>
<p><strong>②引入配置文件</strong></p>
<p>引入spring-ioc-xml模块日志log4j2.xml</p>
<p><strong>③添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="332开启组件扫描">3.3.2、开启组件扫描</h4>
<p>Spring 默认不使用注解装配 Bean，因此我们需要在 Spring 的 XML
配置中，通过 <a href="context:component-scan">context:component-scan</a>
元素开启 Spring Beans的自动扫描功能。开启此功能后，Spring
会自动从扫描指定的包（base-package
属性设置）及其子包下的所有类，如果类上使用了 @Component
注解，就将该类装配到容器中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：在使用 <a href="context:component-scan">context:component-scan</a>
元素开启自动扫描功能前，首先需要在 XML 配置的一级标签 <beans> 中添加
context 相关的约束。</beans></p>
<p><strong>情况一：最基本的扫描方式</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>情况二：指定要排除的组件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">		type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">		type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>情况三：仅扫描指定组件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">		type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">		type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="333使用注解定义-bean">3.3.3、使用注解定义 Bean</h4>
<p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java
类上，将它们定义成 Spring Bean。</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Component</td>
<td>该注解用于描述 Spring 中的
Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如
Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。</td>
</tr>
<tr>
<td>@Repository</td>
<td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的
Bean，其功能与 @Component 相同。</td>
</tr>
<tr>
<td>@Service</td>
<td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring
中的 Bean，其功能与 @Component 相同。</td>
</tr>
<tr>
<td>@Controller</td>
<td>该注解通常作用在控制层（如SpringMVC 的
Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与
@Component 相同。</td>
</tr>
</tbody>
</table>
<h4 id="334实验一autowired注入">3.3.4、实验一：@Autowired注入</h4>
<p>单独使用@Autowired注解，<strong>默认根据类型装配</strong>。【默认是byType】</p>
<p>查看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码中有两处需要注意：</p>
<ul>
<li><p>第一处：该注解可以标注在哪里？</p></li>
<li><ul>
<li>构造方法上</li>
<li>方法上</li>
<li>形参上</li>
<li>属性上</li>
<li>注解上</li>
</ul></li>
<li><p>第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p></li>
</ul>
<h5 id="①场景一属性注入">①场景一：属性注入</h5>
<p>创建UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserDaoImpl实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">        userController.out();</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d404812cf53.png" alt="image-20221101153556681"></p>
<p>以上构造方法和setter方法都没有提供，经过测试，仍然可以注入成功。</p>
<h5 id="②场景二set注入">②场景二：set注入</h5>
<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：成功调用</p>
<h5 id="③场景三构造方法注入">③场景三：构造方法注入</h5>
<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：成功调用</p>
<h5 id="④场景四形参上注入">④场景四：形参上注入</h5>
<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(<span class="meta">@Autowired</span> UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：成功调用</p>
<h5 id="⑤场景五只有一个构造函数无注解">⑤场景五：只有一个构造函数，无注解</h5>
<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<p><strong>当有参数的构造方法只有一个时，@Autowired注解可以省略。</strong></p>
<p>说明：有多个构造方法时呢？大家可以测试（再添加一个无参构造函数），测试报错</p>
<h5 id="⑥场景六autowired注解和qualifier注解联合">⑥场景六：@Autowired注解和@Qualifier注解联合</h5>
<p>添加dao层实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoRedisImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Redis Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：测试异常</p>
<p>错误信息中说：不能装配，UserDao这个Bean的数量等于2</p>
<p>怎么解决这个问题呢？<strong>当然要byName，根据名称进行装配了。</strong></p>
<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="comment">// 指定bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li>
<li>当带参数的构造方法只有一个，@Autowired注解可以省略。（）</li>
<li>@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</li>
</ul>
<h4 id="335实验二resource注入">3.3.5、实验二：@Resource注入</h4>
<p>@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p>
<ul>
<li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li>
<li>@Autowired注解是Spring框架自己的。</li>
<li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li>
<li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li>
<li>@Resource注解用在属性上、setter方法上。</li>
<li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li>
</ul>
<p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Repeatable(Resources.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Resource &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; type() <span class="keyword">default</span> Object.class;</span><br><span class="line"></span><br><span class="line">    Resource.AuthenticationType <span class="title function_">authenticationType</span><span class="params">()</span> <span class="keyword">default</span> Resource.AuthenticationType.CONTAINER;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shareable</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">mappedName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">AuthenticationType</span> &#123;</span><br><span class="line">        CONTAINER,</span><br><span class="line">        APPLICATION;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">AuthenticationType</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="①场景一根据name注入">①场景一：根据name注入</h5>
<p>修改UserDaoImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;myUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;myUserDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        myUserDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<h5 id="②场景二name未知注入">②场景二：name未知注入</h5>
<p>修改UserDaoImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;myUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        myUserDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<p>当@Resource注解使用时没有指定name的时候，还是根据name进行查找，这个name是属性名。</p>
<h5 id="③场景三-其他情况">③场景三 其他情况</h5>
<p>修改UserServiceImpl类，userDao1属性名不存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao1.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试异常</p>
<p>根据异常信息得知：显然当通过name找不到的时候，自然会启动byType进行注入，以上的错误是因为UserDao接口下有两个实现类导致的。所以根据类型注入就会报错。</p>
<p>@Resource的set注入可以自行测试</p>
<p><strong>总结：</strong></p>
<p>@Resource注解：默认byName注入，没有指定name时把属性名当做name，根据name找不到时，才会byType注入。byType注入时，某种类型的Bean只能有一个</p>
<h4 id="336spring全注解开发">3.3.6、Spring全注解开发</h4>
<p>全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;&quot;com.atguigu.spring6.controller&quot;, &quot;com.atguigu.spring6.service&quot;,&quot;com.atguigu.spring6.dao&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Config.class);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">    userController.out();</span><br><span class="line">    logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4原理-手写ioc">4、原理-手写IoC</h2>
<p>我们都知道，Spring框架的IOC是基于Java反射机制实现的，下面我们先回顾一下java反射。</p>
<h3 id="41回顾java反射">4.1、回顾Java反射</h3>
<p><code>Java</code>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为<code>Java</code>语言的反射机制。简单来说，反射机制指的是程序在运行时能够获取自身的信息。</p>
<p>要想解剖一个类，必须先要<strong>获取到该类的Class对象</strong>。而剖析一个类或用反射解决具体的问题就是使用相关API**（1）java.lang.Class（2）java.lang.reflect**，所以，<strong>Class对象是反射的根源</strong>。</p>
<p><strong>自定义类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有方法-run.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get和set方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取Class对象多种方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1 类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Car.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 对象.getClass()</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>().getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 Class.forName(&quot;全路径&quot;)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.reflect.Car&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)clazz3.getConstructor().newInstance();</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、获取构造方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        <span class="comment">//获取所有构造</span></span><br><span class="line">        <span class="comment">// getConstructors()获取所有public的构造方法</span></span><br><span class="line"><span class="comment">//        Constructor[] constructors = clazz.getConstructors();</span></span><br><span class="line">        <span class="comment">// getDeclaredConstructors()获取所有的构造方法public  private</span></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c:constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名称：&quot;</span>+c.getName()+<span class="string">&quot; 参数个数：&quot;</span>+c.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定有参数构造创建对象</span></span><br><span class="line">        <span class="comment">//1 构造public</span></span><br><span class="line"><span class="comment">//        Constructor c1 = clazz.getConstructor(String.class, int.class, String.class);</span></span><br><span class="line"><span class="comment">//        Car car1 = (Car)c1.newInstance(&quot;夏利&quot;, 10, &quot;红色&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(car1);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2 构造private</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line">        c2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> (Car)c2.newInstance(<span class="string">&quot;捷达&quot;</span>, <span class="number">15</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        System.out.println(car2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、获取属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取所有public属性</span></span><br><span class="line">        <span class="comment">//Field[] fields = clazz.getFields();</span></span><br><span class="line">        <span class="comment">//获取所有属性（包含私有属性）</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            <span class="keyword">if</span>(field.getName().equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//设置允许访问</span></span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                field.set(car,<span class="string">&quot;五菱宏光&quot;</span>);</span><br><span class="line">                System.out.println(car);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、获取方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奔驰&quot;</span>,<span class="number">10</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> car.getClass();</span><br><span class="line">        <span class="comment">//1 public方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m1:methods) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(m1.getName());</span></span><br><span class="line">            <span class="comment">//执行方法 toString</span></span><br><span class="line">            <span class="keyword">if</span>(m1.getName().equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">invoke</span> <span class="operator">=</span> (String)m1.invoke(car);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;toString执行了：&quot;+invoke);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 private方法</span></span><br><span class="line">        Method[] methodsAll = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:methodsAll) &#123;</span><br><span class="line">            <span class="comment">//执行方法 run</span></span><br><span class="line">            <span class="keyword">if</span>(m.getName().equals(<span class="string">&quot;run&quot;</span>)) &#123;</span><br><span class="line">                m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                m.invoke(car);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="42实现spring的ioc">4.2、实现Spring的IoC</h3>
<p>我们知道，IoC（控制反转）和DI（依赖注入）是Spring里面核心的东西，那么，我们如何自己手写出这样的代码呢？下面我们就一步一步写出Spring框架最核心的部分。</p>
<p><strong>①搭建子模块</strong></p>
<p>搭建模块：guigu-spring，搭建方式如其他spring子模块</p>
<p><strong>②准备测试需要的bean</strong></p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserDaoImpl实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.test.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建UserService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private UserDao userDao;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//userDao.print();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>③定义注解</strong></p>
<p>我们通过注解的形式加载bean与实现依赖注入</p>
<p>bean注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依赖注入注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Di &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：上面两个注解可以随意取名</p>
<p><strong>④定义bean容器接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑤编写注解bean容器接口实现</strong></p>
<p>AnnotationApplicationContext基于注解扫描bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑥编写扫描bean逻辑</strong></p>
<p>我们通过构造方法传入包的base路径，扫描被@Bean注解的java对象，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                rootPath = filePath.substring(<span class="number">0</span>, filePath.length()-packageDirName.length());</span><br><span class="line">                loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileParent.isDirectory()) &#123;</span><br><span class="line">            File[] childrenFiles = fileParent.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//如果是个文件夹就继续调用该方法,使用了递归</span></span><br><span class="line">                    loadBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//选中class文件</span></span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//    com.xinzhi.dao.UserDao</span></span><br><span class="line">                        <span class="comment">//去掉.class后缀，并且把 \ 替换成 .</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Class&lt;?&gt; aClass = Class.forName(fullName);</span><br><span class="line">                            <span class="comment">//把非接口的类实例化放在map中</span></span><br><span class="line">                            <span class="keyword">if</span>(!aClass.isInterface())&#123;</span><br><span class="line">                                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Bean.class);</span><br><span class="line">                                <span class="keyword">if</span>(annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">                                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">                                    <span class="comment">//判断一下有没有接口</span></span><br><span class="line">                                    <span class="keyword">if</span>(aClass.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把接口的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="number">0</span>] +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把自己的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass, instance);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑦java类标识Bean注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> </span><br></pre></td></tr></table></figure>

<p><strong>⑧测试Bean加载</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.AnnotationApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.test.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIocTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIoc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationApplicationContext</span>(<span class="string">&quot;com.atguigu.spring.test&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)applicationContext.getBean(UserService.class);</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;run success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台打印测试</p>
<p><strong>⑨依赖注入</strong></p>
<p>只要userDao.print();调用成功，说明就注入成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Di;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Di</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行第八步：报错了，说明当前userDao是个空对象</p>
<p><strong>⑩依赖注入实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Di;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                rootPath = filePath.substring(<span class="number">0</span>, filePath.length()-packageDirName.length());</span><br><span class="line">                loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依赖注入</span></span><br><span class="line">        loadDi();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileParent.isDirectory()) &#123;</span><br><span class="line">            File[] childrenFiles = fileParent.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//如果是个文件夹就继续调用该方法,使用了递归</span></span><br><span class="line">                    loadBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//选中class文件</span></span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//    com.xinzhi.dao.UserDao</span></span><br><span class="line">                        <span class="comment">//去掉.class后缀，并且把 \ 替换成 .</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Class&lt;?&gt; aClass = Class.forName(fullName);</span><br><span class="line">                            <span class="comment">//把非接口的类实例化放在map中</span></span><br><span class="line">                            <span class="keyword">if</span>(!aClass.isInterface())&#123;</span><br><span class="line">                                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Bean.class);</span><br><span class="line">                                <span class="keyword">if</span>(annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">                                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">                                    <span class="comment">//判断一下有没有接口</span></span><br><span class="line">                                    <span class="keyword">if</span>(aClass.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把接口的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="number">0</span>] +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把自己的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass, instance);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Class,Object&gt; entry : beanFactory.entrySet())&#123;</span><br><span class="line">            <span class="comment">//就是咱们放在容器的对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">            Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : declaredFields)&#123;</span><br><span class="line">                <span class="type">Di</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Di.class);</span><br><span class="line">                <span class="keyword">if</span>( annotation != <span class="literal">null</span> )&#123;</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;正在给【&quot;</span>+obj.getClass().getName()+<span class="string">&quot;】属性【&quot;</span> + field.getName() + <span class="string">&quot;】注入值【&quot;</span>+ beanFactory.get(field.getType()).getClass().getName() +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">                        field.set(obj,beanFactory.get(field.getType()));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行第八步：执行成功，依赖注入成功</p>
<h2 id="5面向切面aop">5、面向切面：AOP</h2>
<h3 id="51场景模拟">5.1、场景模拟</h3>
<p><strong>搭建子模块：spring6-aop</strong></p>
<h4 id="511声明接口">5.1.1、声明接口</h4>
<p>声明计算器接口Calculator，包含加减乘除的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="512创建实现类">5.1.2、创建实现类</h4>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047d3d9a0.png" alt="images"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="513创建带日志功能的实现类">5.1.3、创建带日志功能的实现类</h4>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047d52665.png" alt="images"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="514提出问题">5.1.4、提出问题</h4>
<p><strong>①现有代码缺陷</strong></p>
<p>针对带日志功能的实现类，我们发现有如下缺陷：</p>
<ul>
<li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li>
<li>附加功能分散在各个业务功能方法中，不利于统一维护</li>
</ul>
<p><strong>②解决思路</strong></p>
<p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p>
<p><strong>③困难</strong></p>
<p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术。</p>
<h3 id="52代理模式">5.2、代理模式</h3>
<h4 id="521概念">5.2.1、概念</h4>
<p><strong>①介绍</strong></p>
<p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047e3fdea.png" alt="images"></p>
<p>使用代理后：</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047e5ce53.png" alt="images"></p>
<p><strong>②生活中的代理</strong></p>
<ul>
<li>广告商找大明星拍广告需要经过经纪人</li>
<li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li>
<li>房产中介是买卖双方的代理</li>
</ul>
<p><strong>③相关术语</strong></p>
<ul>
<li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li>
<li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li>
</ul>
<h4 id="522静态代理">5.2.2、静态代理</h4>
<p>创建静态代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将被代理的目标对象声明为成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 附加功能由代理类中的代理方法来实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 通过目标对象来实现核心业务逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">addResult</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> addResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p>
<p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p>
</blockquote>
<h4 id="523动态代理">5.2.3、动态代理</h4>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047f5309d.png" alt="images"></p>
<p>生产代理对象的工厂类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                    result = method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="524测试">5.2.4、测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">    proxy.div(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//proxy.div(1,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="53aop概念及相关术语">5.3、AOP概念及相关术语</h3>
<h4 id="531概述">5.3.1、概述</h4>
<p>AOP（Aspect Oriented
Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<h4 id="532相关术语">5.3.2、相关术语</h4>
<h5 id="①横切关注点">①横切关注点</h5>
<p>分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点。</p>
<p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p>
<p>这个概念不是语法层面的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4047f5e9ad.png" alt="images"></p>
<h5 id="②通知增强">②通知（增强）</h5>
<p><strong>增强，通俗说，就是你想要增强的功能，比如
安全，事务，日志等。</strong></p>
<p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p>
<ul>
<li>前置通知：在被代理的目标方法<strong>前</strong>执行</li>
<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>
<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>
<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>
<li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>
</ul>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048062126.png" alt="images"></p>
<h5 id="③切面">③切面</h5>
<p>封装通知方法的类。</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d40480935d6.png" alt="images"></p>
<h5 id="④目标">④目标</h5>
<p>被代理的目标对象。</p>
<h5 id="⑤代理">⑤代理</h5>
<p>向目标对象应用通知之后创建的代理对象。</p>
<h5 id="⑥连接点">⑥连接点</h5>
<p>这也是一个纯逻辑概念，不是语法定义的。</p>
<p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。<strong>通俗说，就是spring允许你使用通知的地方</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048172a6a.png" alt="images"></p>
<h5 id="⑦切入点">⑦切入点</h5>
<p>定位连接点的方式。</p>
<p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p>
<p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL
语句。</p>
<p><strong>Spring 的 AOP
技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p>
<p>切点通过 org.springframework.aop.Pointcut
接口进行描述，它使用类和方法作为连接点的查询条件。</p>
<h4 id="533作用">5.3.3、作用</h4>
<ul>
<li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p></li>
<li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p></li>
</ul>
<h3 id="54基于注解的aop">5.4、基于注解的AOP</h3>
<h4 id="541技术说明">5.4.1、技术说明</h4>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048189e08.png" alt="images"></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048245502.png" alt="image-20221216132844066"></p>
<ul>
<li>动态代理分为JDK动态代理和cglib动态代理</li>
<li>当目标类有接口的情况使用JDK动态代理和cglib动态代理，没有接口时只能使用cglib动态代理</li>
<li>JDK动态代理动态生成的代理类会在com.sun.proxy包下，类名为$proxy1，和目标类实现相同的接口</li>
<li>cglib动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类</li>
<li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</li>
<li>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</li>
<li>AspectJ：是AOP思想的一种实现。本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li>
</ul>
<h4 id="542准备工作">5.4.2、准备工作</h4>
<p><strong>①添加依赖</strong></p>
<p>在IOC所需依赖基础上再加入下面依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring aop依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring aspects依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>②准备被代理的目标资源</strong></p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="543创建切面类并配置">5.4.3、创建切面类并配置</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">            <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Spring的配置文件中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        基于注解的AOP的实现：</span></span><br><span class="line"><span class="comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span></span><br><span class="line"><span class="comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span></span><br><span class="line"><span class="comment">        3、将切面类通过注解@Aspect标识</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CalculatorTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> ac.getBean( Calculator.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功:&quot;</span>+add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048250136.png" alt="image-20221102155523983"></p>
<h4 id="544各种通知">5.4.4、各种通知</h4>
<ul>
<li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</li>
<li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>
<li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>
<li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>
<li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>
</ul>
<blockquote>
<p>各种通知的执行顺序：</p>
<ul>
<li>Spring版本5.3.x以前：
<ul>
<li>前置通知</li>
<li>目标操作</li>
<li>后置通知</li>
<li>返回通知或异常通知</li>
</ul></li>
<li>Spring版本5.3.x以后：
<ul>
<li>前置通知</li>
<li>目标操作</li>
<li>返回通知或异常通知</li>
<li>后置通知</li>
</ul></li>
</ul>
</blockquote>
<h4 id="545切入点表达式语法">5.4.5、切入点表达式语法</h4>
<p><strong>①作用</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d40482699da.png" alt="images"></p>
<p><strong>②语法细节</strong></p>
<ul>
<li><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</p></li>
<li><p>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。</p>
<ul>
<li>例如：*.Hello匹配com.Hello，不匹配com.atguigu.Hello</li>
</ul></li>
<li><p>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p></li>
<li><p>在类名的部分，类名部分整体用*号代替，表示类名任意</p></li>
<li><p>在类名的部分，可以使用*号代替类名的一部分</p>
<ul>
<li>例如：*Service匹配所有名称以Service结尾的类或接口</li>
</ul></li>
<li><p>在方法名部分，可以使用*号表示方法名任意</p></li>
<li><p>在方法名部分，可以使用*号代替方法名的一部分</p>
<ul>
<li>例如：*Operation匹配所有方法名以Operation结尾的方法</li>
</ul></li>
<li><p>在方法参数列表部分，使用(..)表示参数列表任意</p></li>
<li><p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p></li>
<li><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p>
<ul>
<li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li>
</ul></li>
<li><p>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符</p>
<ul>
<li>例如：execution(public int <em>..<em>Service.</em>(.., int)) 正确
例如：execution(</em> int *..<em>Service.</em>(.., int)) 错误</li>
</ul></li>
</ul>
<p><img src="https://bu.dusays.com/2025/03/14/67d40482822cb.png" alt="images"></p>
<h4 id="546重用切入点表达式">5.4.6、重用切入点表达式</h4>
<p><strong>①声明</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②在同一个切面中使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③在不同切面中使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="547获取通知的相关信息">5.4.7、获取通知的相关信息</h4>
<p><strong>①获取连接点信息</strong></p>
<p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">//获取连接点的签名信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②获取目标方法的返回值</strong></p>
<p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③获取目标方法的异常</strong></p>
<p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="548环绕通知">5.4.8、环绕通知</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">        <span class="comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="549切面的优先级">5.4.9、切面的优先级</h4>
<p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p>
<ul>
<li>优先级高的切面：外面</li>
<li>优先级低的切面：里面</li>
</ul>
<p>使用@Order注解可以控制切面的优先级：</p>
<ul>
<li>@Order(较小的数)：优先级高</li>
<li>@Order(较大的数)：优先级低</li>
</ul>
<p><img src="https://bu.dusays.com/2025/03/14/67d404829d7fa.png" alt="images"></p>
<h3 id="55基于xml的aop">5.5、基于XML的AOP</h3>
<h4 id="551准备工作">5.5.1、准备工作</h4>
<p>参考基于注解的AOP环境</p>
<h4 id="552实现">5.5.2、实现</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6单元测试junit">6、单元测试：JUnit</h2>
<p>在之前的测试方法中，几乎都能看到以下的两行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;xxx.xml&quot;</span>);</span><br><span class="line"><span class="type">Xxxx</span> <span class="variable">xxx</span> <span class="operator">=</span> context.getBean(Xxxx.class);</span><br></pre></td></tr></table></figure>

<p>这两行代码的作用是创建Spring容器，最终获取到对象，但是每次测试都需要重复编写。针对上述问题，我们需要的是程序能自动帮我们创建容器。我们都知道JUnit无法知晓我们是否使用了
Spring 框架，更不用说帮我们创建 Spring
容器了。Spring提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件位置就可以了。这样一来，我们通过Spring整合JUnit可以使程序创建spring容器了</p>
<h3 id="61整合junit5">6.1、整合JUnit5</h3>
<h4 id="611搭建子模块">6.1.1、搭建子模块</h4>
<p>搭建spring-junit模块</p>
<h4 id="612引入依赖">6.1.2、引入依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring对junit的支持相关依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="613添加配置文件">6.1.3、添加配置文件</h4>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>copy日志文件：log4j2.xml</p>
<h4 id="614添加java类">6.1.4、添加java类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="615测试">6.1.5、测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种方式均可</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit5Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="62整合junit4">6.2、整合JUnit4</h3>
<p>JUnit4在公司也会经常用到，在此也学习一下</p>
<h4 id="621添加依赖">6.2.1、添加依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="622测试">6.2.2、测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit4Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7事务">7、事务</h2>
<h3 id="71jdbctemplate">7.1、JdbcTemplate</h3>
<h4 id="711简介">7.1.1、简介</h4>
<p><img src="https://bu.dusays.com/2025/03/14/67d40482b6531.png" alt="image-20221217115515670"></p>
<p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate
方便实现对数据库操作</p>
<h4 id="712准备工作">7.1.2、准备工作</h4>
<p><strong>①搭建子模块</strong></p>
<p>搭建子模块：spring-jdbc-tx</p>
<p><strong>②加入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring jdbc  Spring 持久化层支持jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③创建jdbc.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p><strong>④配置Spring的配置文件</strong></p>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>⑤准备数据库与测试表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `spring`;</span><br><span class="line"></span><br><span class="line">use `spring`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_emp` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">20</span>) DEFAULT NULL COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `sex` varchar(<span class="number">2</span>) DEFAULT NULL COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`id`)</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>

<h4 id="713实现curd">7.1.3、实现CURD</h4>
<h5 id="①装配-jdbctemplate">①装配 JdbcTemplate</h5>
<p><strong>创建测试类，整合JUnit，注入JdbcTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="②测试增删改功能">②测试增删改功能</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试增删改功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//添加功能</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改功能</span></span><br><span class="line">	<span class="comment">//String sql = &quot;update t_emp set name=? where id=?&quot;;</span></span><br><span class="line">    <span class="comment">//int result = jdbcTemplate.update(sql, &quot;张三atguigu&quot;, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除功能</span></span><br><span class="line">	<span class="comment">//String sql = &quot;delete from t_emp where id=?&quot;;</span></span><br><span class="line">	<span class="comment">//int result = jdbcTemplate.update(sql, 1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="③查询数据返回对象">③查询数据返回对象</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成get和set方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询：返回对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//写法一</span></span><br><span class="line"><span class="comment">//        String sql = &quot;select * from t_emp where id=?&quot;;</span></span><br><span class="line"><span class="comment">//        Emp empResult = jdbcTemplate.queryForObject(sql,</span></span><br><span class="line"><span class="comment">//                (rs, rowNum) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    Emp emp = new Emp();</span></span><br><span class="line"><span class="comment">//                    emp.setId(rs.getInt(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setName(rs.getString(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setAge(rs.getInt(&quot;age&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setSex(rs.getString(&quot;sex&quot;));</span></span><br><span class="line"><span class="comment">//                    return emp;</span></span><br><span class="line"><span class="comment">//                &#125;, 1);</span></span><br><span class="line"><span class="comment">//        System.out.println(empResult);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写法二</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp where id=?&quot;</span>;</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class),<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="④查询数据返回list集合">④查询数据返回list集合</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询多条数据为一个list集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="⑤查询返回单个的值">⑤查询返回单个的值</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询单行单列的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="72声明式事务概念">7.2、声明式事务概念</h3>
<h4 id="721事务基本概念">7.2.1、事务基本概念</h4>
<h5 id="①什么是事务">①什么是事务</h5>
<p>数据库事务(
transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p>
<h5 id="②事务的特性">②事务的特性</h5>
<p><strong>A：原子性(Atomicity)</strong></p>
<p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<p><strong>C：一致性(Consistency)</strong></p>
<p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p>
<p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p>
<p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p>
<p><strong>I：隔离性(Isolation)</strong></p>
<p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p>
<p><strong>D：持久性(Durability)</strong></p>
<p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p>
<h4 id="722编程式事务">7.2.2、编程式事务</h4>
<p>事务功能的相关操作全部通过自己编写代码来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编程式的实现方式存在缺陷：</p>
<ul>
<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li>
<li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li>
</ul>
<h4 id="723声明式事务">7.2.3、声明式事务</h4>
<p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p>
<p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p>
<ul>
<li>好处1：提高开发效率</li>
<li>好处2：消除了冗余的代码</li>
<li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li>
</ul>
<p>所以，我们可以总结下面两个概念：</p>
<ul>
<li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li>
<li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li>
</ul>
<h3 id="73基于注解的声明式事务">7.3、基于注解的声明式事务</h3>
<h4 id="731准备工作">7.3.1、准备工作</h4>
<p><strong>①添加配置</strong></p>
<p>在beans.xml添加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>②创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `t_book` (</span><br><span class="line">  `book_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `book_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图书名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  `stock` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`book_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert  into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;斗破苍穹&#x27;</span>,<span class="number">80</span>,<span class="number">100</span>),(<span class="number">2</span>,<span class="string">&#x27;斗罗大陆&#x27;</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_user` (</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `balance` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;余额（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert  into</span> `t_user`(`user_id`,`username`,`balance`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<p><strong>③创建组件</strong></p>
<p>创建BookController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口BookService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现类BookServiceImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询图书的价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        <span class="comment">//更新图书的库存</span></span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        <span class="comment">//更新用户的余额</span></span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口BookDao：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现类BookDaoImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="732测试无事务情况">7.3.2、测试无事务情况</h4>
<p><strong>①创建测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyBook</span><span class="params">()</span>&#123;</span><br><span class="line">        bookController.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②模拟场景</strong></p>
<p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p>
<p>假设用户id为1的用户，购买id为1的图书</p>
<p>用户余额为50，而图书价格为80</p>
<p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p>
<p>此时执行sql语句会抛出SQLException</p>
<p><strong>③观察结果</strong></p>
<p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p>
<p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p>
<h4 id="733加入事务">7.3.3、加入事务</h4>
<h5 id="①添加事务配置">①添加事务配置</h5>
<p>在spring配置文件中引入tx命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Spring的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="②添加事务注解">②添加事务注解</h5>
<p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p>
<p><strong>在BookServiceImpl的buybook()添加注解@Transactional</strong></p>
<h5 id="③观察结果">③观察结果</h5>
<p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p>
<h4 id="734transactional注解标识的位置">7.3.4、@Transactional注解标识的位置</h4>
<p>@Transactional标识在方法上，则只会影响该方法</p>
<p>@Transactional标识的类上，则会影响类中所有的方法</p>
<h4 id="735事务属性只读">7.3.5、事务属性：只读</h4>
<p><strong>①介绍</strong></p>
<p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③注意</strong></p>
<p>对增删改操作设置只读会抛出下面异常：</p>
<p>Caused by: java.sql.SQLException: Connection is read-only. Queries
leading to data modification are not allowed</p>
<h4 id="736事务属性超时">7.3.6、事务属性：超时</h4>
<p><strong>①介绍</strong></p>
<p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p>
<p>概括来说就是一句话：超时回滚，释放资源。</p>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超时时间单位秒</span></span><br><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③观察结果</strong></p>
<p>执行过程中抛出异常：</p>
<p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>:
Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p>
<h4 id="737事务属性回滚策略">7.3.7、事务属性：回滚策略</h4>
<p><strong>①介绍</strong></p>
<p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p>
<p>可以通过@Transactional中相关属性设置回滚策略</p>
<ul>
<li><p>rollbackFor属性：需要设置一个Class类型的对象</p></li>
<li><p>rollbackForClassName属性：需要设置一个字符串类型的全类名</p></li>
<li><p>noRollbackFor属性：需要设置一个Class类型的对象</p></li>
<li><p>rollbackFor属性：需要设置一个字符串类型的全类名</p></li>
</ul>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③观察结果</strong></p>
<p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p>
<h4 id="738事务属性隔离级别">7.3.8、事务属性：隔离级别</h4>
<p><strong>①介绍</strong></p>
<p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p>
<p>隔离级别一共有四种：</p>
<ul>
<li><p>读未提交：READ UNCOMMITTED</p>
<p>允许Transaction01读取Transaction02未提交的修改。</p></li>
<li><p>读已提交：READ COMMITTED、</p>
<p>要求Transaction01只能读取Transaction02已提交的修改。</p></li>
<li><p>可重复读：REPEATABLE READ</p>
<p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</p></li>
<li><p>串行化：SERIALIZABLE</p>
<p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p></li>
</ul>
<p>各个隔离级别解决并发问题的能力见下表：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>各种数据库产品对事务隔离级别的支持程度：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>Oracle</th>
<th>MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>√(默认)</td>
<td>√</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>×</td>
<td>√(默认)</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure>

<h4 id="739事务属性传播行为">7.3.9、事务属性：传播行为</h4>
<p><strong>①介绍</strong></p>
<p>什么是事务的传播行为？</p>
<p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p>
<p>一共有七种传播行为：</p>
<ul>
<li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li>
<li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行**【有就加入，没有就不管了】**</li>
<li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常**【有就加入，没有就抛异常】**</li>
<li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起**【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】**</li>
<li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务**【不支持事务，存在就挂起】**</li>
<li>NEVER：以非事务方式运行，如果有事务存在，抛出异常**【不支持事务，存在就抛异常】**</li>
<li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】</strong></li>
</ul>
<p><strong>②测试</strong></p>
<p>创建接口CheckoutService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现类CheckoutServiceImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckoutServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">//一次购买多本图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer bookId : bookIds) &#123;</span><br><span class="line">            bookService.buyBook(bookId, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在BookController中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckoutService checkoutService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>&#123;</span><br><span class="line">    checkoutService.checkout(bookIds, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在数据库中将用户的余额修改为100元</p>
<p><strong>③观察结果</strong></p>
<p>可以通过@Transactional中的propagation属性设置事务传播行为</p>
<p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p>
<p>@Transactional(propagation =
Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不了，就都买不了</p>
<p>@Transactional(propagation =
Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本。</p>
<h4 id="7310全注解配置事务">7.3.10、全注解配置事务</h4>
<p><strong>①添加配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring6.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.controller.BookController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAllAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTxAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookController</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bookController&quot;</span>, BookController.class);</span><br><span class="line">        accountService.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="74基于xml的声明式事务">7.4、基于XML的声明式事务</h3>
<h4 id="731场景模拟">7.3.1、场景模拟</h4>
<p>参考基于注解的声明式事务</p>
<h4 id="732修改spring配置文件">7.3.2、修改Spring配置文件</h4>
<p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</blockquote>
<h2 id="8资源操作resources">8、资源操作：Resources</h2>
<h3 id="81spring-resources概述">8.1、Spring Resources概述</h3>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048363618.png" alt="image-20221218154945878"></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048394b73.png" alt="image-20221206231535991"></p>
<p>Java的标准java.net.URL类和各种URL前缀的标准处理程序无法满足所有对low-level资源的访问，比如：没有标准化的
URL 实现可用于访问需要从类路径或相对于 ServletContext
获取的资源。并且缺少某些Spring所需要的功能，例如检测某资源是否存在等。<strong>而Spring的Resource声明了访问low-level资源的能力。</strong></p>
<h3 id="82resource接口">8.2、Resource接口</h3>
<p>Spring 的 Resource 接口位于 org.springframework.core.io 中。
旨在成为一个更强大的接口，用于抽象对低级资源的访问。以下显示了Resource接口定义的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Resource</span> <span class="keyword">extends</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    URL <span class="title function_">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    URI <span class="title function_">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    File <span class="title function_">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    ReadableByteChannel <span class="title function_">readableChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    Resource <span class="title function_">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getFilename</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Resource接口继承了InputStreamSource接口，提供了很多InputStreamSource所没有的方法。InputStreamSource接口，只有一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中一些重要的方法：</strong></p>
<p>getInputStream():
找到并打开资源，返回一个InputStream以从资源中读取。预计每次调用都会返回一个新的InputStream()，调用者有责任关闭每个流
exists(): 返回一个布尔值，表明某个资源是否以物理形式存在 isOpen:
返回一个布尔值，指示此资源是否具有开放流的句柄。如果为true，InputStream就不能够多次读取，只能够读取一次并且及时关闭以避免内存泄漏。对于所有常规资源实现，返回false，但是InputStreamResource除外。
getDescription():
返回资源的描述，用来输出错误的日志。这通常是完全限定的文件名或资源的实际URL。</p>
<p><strong>其他方法：</strong></p>
<p>isReadable(): 表明资源的目录读取是否通过getInputStream()进行读取。
isFile(): 表明这个资源是否代表了一个文件系统的文件。 getURL():
返回一个URL句柄，如果资源不能够被解析为URL，将抛出IOException getURI():
返回一个资源的URI句柄 getFile():
返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出FileNotFoundException
lastModified(): 资源最后一次修改的时间戳 createRelative():
创建此资源的相关资源 getFilename(): 资源的文件名是什么
例如：最后一部分的文件名 myfile.txt</p>
<h3 id="83resource的实现类">8.3、Resource的实现类</h3>
<p>Resource 接口是 Spring
资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。Resource一般包括这些实现类：UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource</p>
<h4 id="831urlresource访问网络资源">8.3.1、UrlResource访问网络资源</h4>
<p>Resource的一个实现类，用来访问网络资源，它支持URL的绝对路径。</p>
<p>http:——该前缀用于访问基于HTTP协议的网络资源。</p>
<p>ftp:——该前缀用于访问基于FTP协议的网络资源</p>
<p>file: ——该前缀用于从文件系统中读取资源</p>
<p><strong>实验：访问基于HTTP协议的网络资源</strong></p>
<p><strong>创建一个maven子模块spring6-resources，配置Spring依赖（参考前面）</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d404839ca23.png" alt="image-20221207102315185"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlResourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Resource 对象</span></span><br><span class="line">        <span class="type">UrlResource</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> <span class="title class_">UrlResource</span>(path);</span><br><span class="line">            <span class="comment">// 获取资源名</span></span><br><span class="line">            System.out.println(url.getFilename());</span><br><span class="line">            System.out.println(url.getURI());</span><br><span class="line">            <span class="comment">// 获取资源描述</span></span><br><span class="line">            System.out.println(url.getDescription());</span><br><span class="line">            <span class="comment">//获取资源内容</span></span><br><span class="line">            System.out.println(url.getInputStream().read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//访问网络资源</span></span><br><span class="line">        loadAndReadUrlResource(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验二：在项目根路径下创建文件，从文件系统中读取资源</strong></p>
<p>方法不变，修改调用传递路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1 访问网络资源</span></span><br><span class="line">	<span class="comment">//loadAndReadUrlResource(&quot;http://www.atguigu.com&quot;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2 访问文件系统资源</span></span><br><span class="line">    loadAndReadUrlResource(<span class="string">&quot;file:atguigu.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="832classpathresource-访问类路径下资源">8.3.2、ClassPathResource
访问类路径下资源</h4>
<p>ClassPathResource 用来访问类加载路径下的资源，相对于其他的 Resource
实现类，其主要优势是方便访问类加载路径里的资源，尤其对于 Web
应用，ClassPathResource 可自动搜索位于 classes
下的资源文件，无须使用绝对路径访问。</p>
<p><strong>实验：在类路径下创建文件atguigu.txt，使用ClassPathResource
访问</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d40483cff43.png" alt="image-20221207103020854"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathResourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Resource 对象</span></span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(path);</span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">        <span class="comment">// 获取文件描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">        <span class="comment">//获取文件内容</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        loadAndReadUrlResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClassPathResource实例可使用ClassPathResource构造器显式地创建，但更多的时候它都是隐式地创建的。当执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含classpath:前缀后，系统会自动创建ClassPathResource对象。</p>
<h4 id="833filesystemresource-访问文件系统资源">8.3.3、FileSystemResource
访问文件系统资源</h4>
<p>Spring 提供的 FileSystemResource 类用于访问文件系统资源，使用
FileSystemResource 来访问文件系统资源并没有太大的优势，因为 Java 提供的
File 类也可用于访问文件系统资源。</p>
<p><strong>实验：使用FileSystemResource 访问文件系统资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSystemResourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//相对路径</span></span><br><span class="line">        <span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">//FileSystemResource resource = new FileSystemResource(&quot;C:\\atguigu.txt&quot;);</span></span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">        <span class="comment">// 获取文件描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">        <span class="comment">//获取文件内容</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        loadAndReadUrlResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileSystemResource实例可使用FileSystemResource构造器显示地创建，但更多的时候它都是隐式创建。执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含file:前缀后，系统将会自动创建FileSystemResource对象。</p>
<h4 id="834servletcontextresource">8.3.4、ServletContextResource</h4>
<p>这是ServletContext资源的Resource实现，它解释相关Web应用程序根目录中的相对路径。它始终支持流(stream)访问和URL访问，但只有在扩展Web应用程序存档且资源实际位于文件系统上时才允许java.io.File访问。无论它是在文件系统上扩展还是直接从JAR或其他地方（如数据库）访问，实际上都依赖于Servlet容器。</p>
<h4 id="835inputstreamresource">8.3.5、InputStreamResource</h4>
<p>InputStreamResource
是给定的输入流(InputStream)的Resource实现。它的使用场景在没有特定的资源实现的时候使用(感觉和@Component
的适用场景很相似)。与其他Resource实现相比，这是已打开资源的描述符。
因此，它的isOpen()方法返回true。如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。</p>
<h4 id="836bytearrayresource">8.3.6、ByteArrayResource</h4>
<p>字节数组的Resource实现类。通过给定的数组创建了一个ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的InputStreamResource。</p>
<h3 id="84resource类图">8.4、Resource类图</h3>
<p>上述Resource实现类与Resource顶级接口之间的关系可以用下面的UML关系模型来表示</p>
<p><img src="https://bu.dusays.com/2025/03/14/67d40483edc38.png" alt="image-20221206232920494"></p>
<h3 id="85resourceloader-接口">8.5、ResourceLoader 接口</h3>
<h4 id="851resourceloader-概述">8.5.1、ResourceLoader 概述</h4>
<p>Spring 提供如下两个标志性接口：</p>
<p><strong>（1）ResourceLoader ：</strong>
该接口实现类的实例可以获得一个Resource实例。</p>
<p><strong>（2） ResourceLoaderAware ：</strong>
该接口实现类的实例将获得一个ResourceLoader的引用。</p>
<p>在ResourceLoader接口里有如下方法：</p>
<p>（1）<strong>Resource getResource（String location）</strong> ：
该接口仅有这个方法，用于返回一个Resource实例。ApplicationContext实现类都实现ResourceLoader接口，因此ApplicationContext可直接获取Resource实例。</p>
<h4 id="852使用演示">8.5.2、使用演示</h4>
<p><strong>实验一：ClassPathXmlApplicationContext获取Resource实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line"><span class="comment">//        通过ApplicationContext访问资源</span></span><br><span class="line"><span class="comment">//        ApplicationContext实例获取Resource实例时，</span></span><br><span class="line"><span class="comment">//        默认采用与ApplicationContext相同的资源访问策略</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验二：FileSystemApplicationContext获取Resource实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>();</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="853resourceloader-总结">8.5.3、ResourceLoader 总结</h4>
<p>Spring将采用和ApplicationContext相同的策略来访问资源。也就是说，如果ApplicationContext是FileSystemXmlApplicationContext，res就是FileSystemResource实例；如果ApplicationContext是ClassPathXmlApplicationContext，res就是ClassPathResource实例</p>
<p>当Spring应用需要进行资源访问时，实际上并不需要直接使用Resource实现类，而是调用ResourceLoader实例的getResource()方法来获得资源，ReosurceLoader将会负责选择Reosurce实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开来</p>
<p>另外，使用ApplicationContext访问资源时，可通过不同前缀指定强制使用指定的ClassPathResource、FileSystemResource等实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;calsspath:bean.xml&quot;</span>);</span><br><span class="line"><span class="type">Resrouce</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;file:bean.xml&quot;</span>);</span><br><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;http://localhost:8080/beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="86resourceloaderaware-接口">8.6、ResourceLoaderAware 接口</h3>
<p>ResourceLoaderAware接口实现类的实例将获得一个ResourceLoader的引用，ResourceLoaderAware接口也提供了一个setResourceLoader()方法，该方法将由Spring容器负责调用，Spring容器会将一个ResourceLoader对象作为该方法的参数传入。</p>
<p>如果把实现ResourceLoaderAware接口的Bean类部署在Spring容器中，Spring容器会将自身当成ResourceLoader作为setResourceLoader()方法的参数传入。由于ApplicationContext的实现类都实现了ResourceLoader接口，Spring容器自身完全可作为ResorceLoader使用。</p>
<p><strong>实验：演示ResourceLoaderAware使用</strong></p>
<p><strong>第一步 创建类，实现ResourceLoaderAware接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现ResourceLoaderAware接口必须实现的方法</span></span><br><span class="line">	<span class="comment">//如果把该Bean部署在Spring容器中，该方法将会有Spring容器负责调用。</span></span><br><span class="line">	<span class="comment">//SPring容器调用该方法时，Spring会将自身作为参数传给该方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ResourceLoader对象的应用</span></span><br><span class="line">    <span class="keyword">public</span> ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建bean.xml文件，配置TestBean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.TestBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Spring容器会将一个ResourceLoader对象作为该方法的参数传入</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">testBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;testBean&quot;</span>,TestBean.class);</span><br><span class="line">        <span class="comment">//获取ResourceLoader对象</span></span><br><span class="line">        <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> testBean.getResourceLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring容器将自身注入到ResourceLoaderAware Bean 中 ？ ：&quot;</span> + (resourceLoader == ctx));</span><br><span class="line">        <span class="comment">//加载其他资源</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(resource.getFilename());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="87使用resource-作为属性">8.7、使用Resource 作为属性</h3>
<p>前面介绍了 Spring 提供的资源访问策略，但这些依赖访问策略要么需要使用
Resource 实现类，要么需要使用 ApplicationContext
来获取资源。实际上，当应用程序中的 Bean 实例需要访问资源时，Spring
有更好的解决方法：直接利用依赖注入。从这个意义上来看，Spring
框架不仅充分利用了策略模式来简化资源访问，而且还将策略模式和 IoC
进行充分地结合，最大程度地简化了 Spring 资源访问。</p>
<p>归纳起来，<strong>如果 Bean
实例需要访问资源，有如下两种解决方案：</strong></p>
<ul>
<li><strong>代码中获取 Resource 实例。</strong></li>
<li><strong>使用依赖注入。</strong></li>
</ul>
<p>对于第一种方式，当程序获取 Resource 实例时，总需要提供 Resource
所在的位置，不管通过 FileSystemResource 创建实例，还是通过
ClassPathResource 创建实例，或者通过 ApplicationContext 的 getResource()
方法获取实例，都需要提供资源位置。这意味着：资源所在的物理位置将被耦合到代码中，如果资源位置发生改变，则必须改写程序。因此，通常建议采用第二种方法，让
Spring 为 Bean 实例<strong>依赖注入</strong>资源。</p>
<p><strong>实验：让Spring为Bean实例依赖注入资源</strong></p>
<p><strong>第一步 创建依赖注入类，定义属性和方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRes</span><span class="params">(Resource res)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getRes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">        System.out.println(res.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建spring配置文件，配置依赖注入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;resourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.ResourceBean&quot;</span> &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以使用file:、http:、ftp:等前缀强制Spring采用对应的资源访问策略 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果不采用任何前缀，则Spring将采用与该ApplicationContext相同的资源访问策略来访问资源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;res&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:atguigu.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">ResourceBean</span> <span class="variable">resourceBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;resourceBean&quot;</span>,ResourceBean.class);</span><br><span class="line">        resourceBean.parse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="88应用程序上下文和资源路径">8.8、应用程序上下文和资源路径</h3>
<h4 id="881概述">8.8.1、概述</h4>
<p>不管以怎样的方式创建ApplicationContext实例，都需要为ApplicationContext指定配置文件，Spring允许使用一份或多分XML配置文件。当程序创建ApplicationContext实例时，通常也是以Resource的方式来访问配置文件的，所以ApplicationContext完全支持ClassPathResource、FileSystemResource、ServletContextResource等资源访问方式。</p>
<p><strong>ApplicationContext确定资源访问策略通常有两种方法：</strong></p>
<p><strong>（1）使用ApplicationContext实现类指定访问策略。</strong></p>
<p><strong>（2）使用前缀指定访问策略。</strong></p>
<h4 id="882applicationcontext实现类指定访问策略">8.8.2、ApplicationContext实现类指定访问策略</h4>
<p>创建ApplicationContext对象时，通常可以使用如下实现类：</p>
<p>（1） ClassPathXMLApplicationContext :
对应使用ClassPathResource进行资源访问。</p>
<p>（2）FileSystemXmlApplicationContext ：
对应使用FileSystemResource进行资源访问。</p>
<p>（3）XmlWebApplicationContext ：
对应使用ServletContextResource进行资源访问。</p>
<p>当使用ApplicationContext的不同实现类时，就意味着Spring使用响应的资源访问策略。</p>
<p>效果前面已经演示</p>
<h4 id="883使用前缀指定访问策略">8.8.3、使用前缀指定访问策略</h4>
<p><strong>实验一：classpath前缀使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 通过搜索文件系统路径下的xml文件创建ApplicationContext，</span></span><br><span class="line"><span class="comment">         * 但通过指定classpath:前缀强制搜索类加载路径</span></span><br><span class="line"><span class="comment">         * classpath:bean.xml</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line">        System.out.println(ctx);</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(resource.getFilename());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验二：classpath通配符使用</strong></p>
<p>classpath *
:前缀提供了加载多个XML配置文件的能力，当使用classpath*:前缀来指定XML配置文件时，系统将搜索类加载路径，找到所有与文件名匹配的文件，分别加载文件中的配置定义，最后合并成一个ApplicationContext。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean.xml&quot;</span>);</span><br><span class="line">System.out.println(ctx);</span><br></pre></td></tr></table></figure>

<p>当使用classpath *
:前缀时，Spring将会搜索类加载路径下所有满足该规则的配置文件。</p>
<p>如果不是采用classpath *
:前缀，而是改为使用classpath:前缀，Spring则只加载第一个符合条件的XML文件</p>
<p><strong>注意 ：</strong></p>
<p>classpath * :
前缀仅对ApplicationContext有效。实际情况是，创建ApplicationContext时，分别访问多个配置文件(通过ClassLoader的getResource方法实现)。因此，classpath
* :前缀不可用于Resource。</p>
<p><strong>使用三：通配符其他使用</strong></p>
<p>一次性加载多个配置文件的方式：指定配置文件时使用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean*.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Spring允许将classpath*:前缀和通配符结合使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean*.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="9国际化i18n">9、国际化：i18n</h2>
<p><img src="https://bu.dusays.com/2025/03/14/67d404840e925.png" alt="image-20221218154728062"></p>
<h3 id="91i18n概述">9.1、i18n概述</h3>
<p>国际化也称作i18n，其来源是英文单词
internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。</p>
<h3 id="92java国际化">9.2、Java国际化</h3>
<p>（1）Java自身是支持国际化的，java.util.Locale用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle用于查找绑定对应的资源文件。Locale包含了language信息和country信息，Locale创建默认locale对象时使用的静态方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method must be called only for creating the Locale.*</span></span><br><span class="line"><span class="comment"> * constants due to making shortcuts.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Locale <span class="title function_">createConstant</span><span class="params">(String lang, String country)</span> &#123;</span><br><span class="line">    <span class="type">BaseLocale</span> <span class="variable">base</span> <span class="operator">=</span> BaseLocale.createInstance(lang, country);</span><br><span class="line">    <span class="keyword">return</span> getInstance(base, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）配置文件命名规则：
<strong>basename_language_country.properties</strong>
必须遵循以上的命名规则，java才会识别。其中，basename是必须的，语言和国家是可选的。这里存在一个优先级概念，如果同时提供了messages.properties和messages_zh_CN.propertes两个配置文件，如果提供的locale符合en_CN，那么优先查找messages_en_CN.propertes配置文件，如果没查找到，再查找messages.properties配置文件。最后，提示下，所有的配置文件必须放在classpath中，一般放在resources目录下</p>
<p><strong>（3）实验：演示Java国际化</strong></p>
<p><strong>第一步 创建子模块spring6-i18n，引入spring依赖</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048471684.png" alt="image-20221207122500801"></p>
<p><strong>第二步
在resource目录下创建两个配置文件：messages_zh_CN.propertes和messages_en_GB.propertes</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d40484a972e.png" alt="image-20221207124839565"></p>
<p><strong>第三步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.javai18n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;en&quot;</span>,<span class="string">&quot;GB&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;zh&quot;</span>,<span class="string">&quot;CN&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="93spring6国际化">9.3、Spring6国际化</h3>
<h4 id="931messagesource接口">9.3.1、MessageSource接口</h4>
<p>spring中国际化是通过MessageSource这个接口来支持的</p>
<p><strong>常见实现类</strong></p>
<p><strong>ResourceBundleMessageSource</strong></p>
<p>这个是基于Java的ResourceBundle基础类实现，允许仅通过资源名加载国际化资源</p>
<p><strong>ReloadableResourceBundleMessageSource</strong></p>
<p>这个功能和第一个类的功能类似，多了定时刷新功能，允许在不重启系统的情况下，更新资源的信息</p>
<p><strong>StaticMessageSource</strong></p>
<p>它允许通过编程的方式提供国际化信息，一会我们可以通过这个来实现db中存储国际化信息的功能。</p>
<h4 id="932使用spring6国际化">9.3.2、使用Spring6国际化</h4>
<p><strong>第一步 创建资源文件</strong></p>
<p><strong>国际化文件命名格式：基本名称 _ 语言 _
国家.properties</strong></p>
<p><strong>{0},{1}这样内容，就是动态参数</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d40484cf19f.png" alt="image-20221207140024056"></p>
<p><strong>（1）创建atguigu_en_US.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">welcome &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）创建atguigu_zh_CN.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建spring配置文件，配置MessageSource</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>atguigu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步 创建测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.javai18n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传递动态参数，使用数组形式对应&#123;0&#125; &#123;1&#125;顺序</span></span><br><span class="line">        Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;atguigu&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//www.atguigu.com为资源文件的key值,</span></span><br><span class="line">        <span class="comment">//objs为资源文件value值所需要的参数,Local.CHINA为国际化为语言</span></span><br><span class="line">        String str=context.getMessage(<span class="string">&quot;www.atguigu.com&quot;</span>, objs, Locale.CHINA);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10数据校验validation">10、数据校验：Validation</h2>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048500f5d.png" alt="image-20221218154808754"></p>
<h3 id="101spring-validation概述">10.1、Spring Validation概述</h3>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048524a03.png" alt="image-20221206220207266"></p>
<p>在开发中，我们经常遇到参数校验的需求，比如用户注册的时候，要校验用户名不能为空、用户名长度不超过20个字符、手机号是合法的手机号格式等等。如果使用普通方式，我们会把校验的代码和真正的业务处理逻辑耦合在一起，而且如果未来要新增一种校验逻辑也需要在修改多个地方。而spring
validation允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，让代码编写更加方便。Spring
Validation其实就是对Hibernate
Validator进一步的封装，方便在Spring中使用。</p>
<p>在Spring中有多种校验的方式</p>
<p><strong>第一种是通过实现org.springframework.validation.Validator接口，然后在代码中调用这个类</strong></p>
<p><strong>第二种是按照Bean
Validation方式来进行校验，即通过注解的方式。</strong></p>
<p><strong>第三种是基于方法实现校验</strong></p>
<p><strong>除此之外，还可以实现自定义校验</strong></p>
<h3 id="102实验一通过validator接口实现">10.2、实验一：通过Validator接口实现</h3>
<p><strong>第一步 创建子模块 spring6-validator</strong></p>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048553a3e.png" alt="image-20221206221002615"></p>
<p><strong>第二步 引入相关依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步 创建实体类，定义属性和方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步
创建类实现Validator接口，实现接口方法指定校验规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.class.equals(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object object, Errors errors)</span> &#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;name.empty&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) object;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value &lt; 0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value too old&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面定义的类，其实就是实现接口中对应的方法，</p>
<p>supports方法用来表示此校验用在哪个类型上，</p>
<p>validate是设置校验逻辑的地点，其中ValidationUtils，是Spring封装的校验工具类，帮助快速实现校验。</p>
<p><strong>第五步 使用上述Validator进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.DataBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        person.setAge(-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建Person对应的DataBinder</span></span><br><span class="line">        <span class="type">DataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBinder</span>(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置校验</span></span><br><span class="line">        binder.setValidator(<span class="keyword">new</span> <span class="title class_">PersonValidator</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于Person对象中的属性为空，所以校验不通过</span></span><br><span class="line">        binder.validate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">results</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">        System.out.println(results.getAllErrors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="103实验二bean-validation注解实现">10.3、实验二：Bean
Validation注解实现</h3>
<p>使用Bean Validation校验方式，就是如何将Bean
Validation需要使用的javax.validation.ValidatorFactory
和javax.validation.Validator注入到容器中。spring默认有一个实现类LocalValidatorFactoryBean，它实现了上面Bean
Validation中的接口，并且也实现了org.springframework.validation.Validator接口。</p>
<p><strong>第一步 创建配置类，配置LocalValidatorFactoryBean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalValidatorFactoryBean <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建实体类，使用注解定义校验规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常用注解说明</strong> @NotNull 限制必须不为null @NotEmpty
只作用于字符串类型，字符串不为空，并且长度不为0 @NotBlank
只作用于字符串类型，字符串不为空，并且trim()后不为空串
@DecimalMax(value) 限制必须为一个不大于指定值的数字 @DecimalMin(value)
限制必须为一个不小于指定值的数字 @Max(value)
限制必须为一个不大于指定值的数字 @Min(value)
限制必须为一个不小于指定值的数字 @Pattern(value)
限制必须符合指定的正则表达式 @Size(max,min)
限制字符长度必须在min到max之间 @Email
验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</p>
<p><strong>第三步 使用两种不同的校验器实现</strong></p>
<p><strong>（1）使用jakarta.validation.Validator校验</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">validator</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;User&gt;&gt; sets =  validator.validate(user);</span><br><span class="line">        <span class="keyword">return</span> sets.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（2）使用org.springframework.validation.Validator校验</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validaPersonByValidator</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(user, user.getName());</span><br><span class="line">        validator.validate(user, bindException);</span><br><span class="line">        <span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService1</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService1.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validator(user);</span><br><span class="line">        System.out.println(validator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService2</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService2.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">130</span>);</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validaPersonByValidator(user);</span><br><span class="line">        System.out.println(validator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="104实验三基于方法实现校验">10.4、实验三：基于方法实现校验</h3>
<p><strong>第一步
创建配置类，配置MethodValidationPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validationPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建实体类，使用注解设置校验规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三步 定义Service类，通过注解操作对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        myService.testParams(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="105实验四实现自定义校验">10.5、实验四：实现自定义校验</h3>
<p><strong>第一步 自定义校验注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;CannotBlankValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank &#123;</span><br><span class="line">    <span class="comment">//默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不能包含空格&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CannotBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 编写真正的校验类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CannotBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CannotBlank constraintAnnotation)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">                <span class="comment">//null时不进行校验</span></span><br><span class="line">                <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//获取默认提示信息</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">defaultConstraintMessageTemplate</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">                        System.out.println(<span class="string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);</span><br><span class="line">                        <span class="comment">//禁用默认提示信息</span></span><br><span class="line">                        context.disableDefaultConstraintViolation();</span><br><span class="line">                        <span class="comment">//设置提示语</span></span><br><span class="line">                        context.buildConstraintViolationWithTemplate(<span class="string">&quot;can not contains blank&quot;</span>).addConstraintViolation();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11提前编译aot">11、提前编译：AOT</h2>
<p><img src="https://bu.dusays.com/2025/03/14/67d4048597555.png" alt="image-20221218154841001"></p>
<h3 id="111aot概述">11.1、AOT概述</h3>
<h4 id="1111jit与aot的区别">11.1.1、JIT与AOT的区别</h4>
<p>JIT和AOT
这个名词是指两种不同的编译方式，这两种编译方式的主要区别在于是否在“运行时”进行编译</p>
<p><strong>（1）JIT，
Just-in-time,动态(即时)编译，边运行边编译；</strong></p>
<p>在程序运行时，根据算法计算出热点代码，然后进行 JIT
实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发
JIT 的分层机制。JIT 缺点就是编译需要占用运行时资源，会导致进程卡顿。</p>
<p><strong>（2）AOT，Ahead Of
Time，指运行前编译，预先编译。</strong></p>
<p>AOT 编译能直接将源代码转化为机器码，内存占用低，启动速度快，可以无需
runtime 运行，直接将 runtime
静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，AOT
缺点就是在程序运行前编译会使程序安装的时间增加。</p>
<p>**简单来讲：**JIT即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而
AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.java -&gt; .class -&gt; (使用jaotc编译工具) -&gt; .so（程序函数库,即编译好的可以供其他程序使用的代码和数据）</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/03/14/67d40485d5645.png" alt="image-20221207113544080"></p>
<p><strong>（3）AOT的优点</strong></p>
<p>**简单来讲，**Java
虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少
Java 应用给人带来“第一次运行慢” 的不良体验。</p>
<p>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗
可以在程序运行初期就达到最高性能，程序启动速度快
运行产物只有机器码，打包体积小</p>
<p><strong>AOT的缺点</strong></p>
<p>由于是静态提前编译，不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如JIT
没有动态能力，同一份产物不能跨平台运行</p>
<p>第一种即时编译 (JIT) 是默认模式，Java Hotspot
虚拟机使用它在运行时将字节码转换为机器码。后者提前编译 (AOT)由新颖的
GraalVM 编译器支持，并允许在构建时将字节码直接静态编译为机器码。</p>
<p>现在正处于云原生，降本增效的时代，Java 相比于 Go、Rust
等其他编程语言非常大的弊端就是启动编译和启动进程非常慢，这对于根据实时计算资源，弹性扩缩容的云原生技术相冲突，Spring6
借助 AOT 技术在运行时内存占用低，启动速度快，逐渐的来满足 Java
在云原生时代的需求，对于大规模使用 Java
应用的商业公司可以考虑尽早调研使用
JDK17，通过云原生技术为公司实现降本增效。</p>
<h4 id="1112graalvm">11.1.2、Graalvm</h4>
<p>Spring6 支持的 AOT 技术，这个 GraalVM 就是底层的支持，Spring 也对
GraalVM 本机映像提供了一流的支持。GraalVM 是一种高性能 JDK，旨在加速用
Java 和其他 JVM 语言编写的应用程序的执行，同时还为 JavaScript、Python
和许多其他流行语言提供运行时。 GraalVM 提供两种运行 Java
应用程序的方法：在 HotSpot JVM 上使用 Graal 即时 (JIT) 编译器或作为提前
(AOT) 编译的本机可执行文件。 GraalVM
的多语言能力使得在单个应用程序中混合多种编程语言成为可能，同时消除了外语调用成本。GraalVM
向 HotSpot Java 虚拟机添加了一个用 Java 编写的高级即时 (JIT)
优化编译器。</p>
<p>GraalVM 具有以下特性：</p>
<p>（1）一种高级优化编译器，它生成更快、更精简的代码，需要更少的计算资源</p>
<p>（2）AOT 本机图像编译提前将 Java
应用程序编译为本机二进制文件，立即启动，无需预热即可实现最高性能</p>
<p>（3）Polyglot
编程在单个应用程序中利用流行语言的最佳功能和库，无需额外开销</p>
<p>（4）高级工具在 Java 和多种语言中调试、监视、分析和优化资源消耗</p>
<p>总的来说对云原生的要求不算高短期内可以继续使用 2.7.X 的版本和
JDK8，不过 Spring 官方已经对 Spring6 进行了正式版发布。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>苍穹外卖</title>
    <url>/posts/21962/</url>
    <content><![CDATA[<h1 id="苍穹外卖">苍穹外卖</h1>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/sky-take-out">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/03/20/67dc235380f8f.gif)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">苍穹外卖</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>⎛⎝≥⏝⏝≤⎛⎝⎛⎝≥⏝⏝≤⎛⎝⎛⎝≥⏝⏝≤⎛⎝</p>
<h2 id="一知识点">一、知识点</h2>
<h3 id="1git">1.git</h3>
<ol type="1">
<li>idea点击vcs</li>
<li>选择 Create Git Repository 然后选择，点击ok（创建本地仓库）</li>
<li>git上面的对勾，然后选择文件，Unversioned Files所有文件</li>
<li>填写commit message，点击commit</li>
<li>创建github仓库，名称随便，复制代码地址</li>
<li>然后点击git的右箭头，点击Define remote，将URL地址填写进去，就ok</li>
<li>点击push</li>
</ol>
<h3 id="2threadlocal">2.ThreadLocal</h3>
<p>ThreadLocal并不是一个Thread，而是Thread的局部变量。
ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p>
<p>在被问simpledateformat线程不安全怎么处理的时候，也可以用这个Threadlocal</p>
<p>客户端发起的每一次请求都是一个单独的线程</p>
<p>可以理解为，某个事件的参与者 拉了个私群，方便内部及时交流</p>
<p>ThreadLocal常用方法:</p>
<ul>
<li>public void set(T value)设置当前线程的线程局部变量的值</li>
<li>public T get()返回当前线程所对应的线程局部变量的值</li>
<li>.public void remove()移除当前线程的线程局部变量</li>
</ul>
<p>就是通过线程获取到信息，然后将信息存储在线程里面，后面业务可以通过线程获取里面的信息</p>
<p><code>代码</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3pagehelper">3.pagehelper</h3>
<p>简化分页查询</p>
<h3 id="4事务-transactional">4.事务 @Transactional</h3>
<h3 id="5redis">5.Redis</h3>
<blockquote>
<p>实话实说redis数据库对于后端开发来说非常的重要，因为它是基于内存存储的访问速度非常的快可以将mysql的数据同步到redis从而减少对mysql的访问</p>
</blockquote>
<p>Redis是一个基于内存的key-value结构数据库。是内存存储</p>
<h4 id="51-5种数据类型">5.1 5种数据类型</h4>
<ul>
<li>字符串 String</li>
<li>哈希 hash</li>
<li>列表 list</li>
<li>集合 set</li>
<li>有序集合 sorted set/zset （排行榜）</li>
</ul>
<p><img src="https://bu.dusays.com/2025/04/16/67ffa1f5328cf.png" alt="image-20250416202627629"></p>
<h4 id="52-字符串常用命令">5.2 字符串常用命令</h4>
<p><img src="https://bu.dusays.com/2025/04/16/67ffa2d9ed39e.png" alt="image-20250416203016883"></p>
<ul>
<li>SET key value 设置指定key的值</li>
<li>GET key 获取指定key的值</li>
<li>SETEX key seconds value 设置指定key的值，并将
key的过期时间设为seconds秒（验证码）</li>
<li>SETNX key value 只有在key 不存在时设置key的值 （分布式锁）</li>
</ul>
<h4 id="53-哈希操作命令">5.3 哈希操作命令</h4>
<p><img src="https://bu.dusays.com/2025/04/16/67ffa742be8f6.png" alt="image-20250416204905608"></p>
<ul>
<li>HSET key field value 将哈希表key 中的字段field的值设为value</li>
<li>HGET key field 获取存储在哈希表中指定字段的值</li>
<li>HDEL key field 删除存储在哈希表中的指定字段</li>
<li>HKEYS key 获取哈希表中所有字段</li>
<li>HVALS key 获取哈希表中所有值</li>
</ul>
<h4 id="54-列表操作命令">5.4 列表操作命令</h4>
<p><img src="https://bu.dusays.com/2025/04/16/67ffa995d744f.png" alt="image-20250416205900763"></p>
<ul>
<li>LPUSH key value1 [value2] 将一个或多个值插入到列表头部</li>
<li>LRANGE key start stop 获取列表指定范围内的元素</li>
<li>RPOP key 移除并获取列表最后一个元素</li>
<li>LLEN key 获取列表长度</li>
</ul>
<h4 id="55-集合操作命令">5.5 集合操作命令</h4>
<p><img src="https://bu.dusays.com/2025/04/16/67ffac2116208.png" alt="image-20250416210951904"></p>
<ul>
<li>SADD key member1 [member2]向集合添加一个或多个成员</li>
<li>SMEMBERS key 返回集合中的所有成员</li>
<li>SCARD key 获取集合的成员数</li>
<li>SINTER key1 [key2] 返回给定所有集合的交集</li>
<li>SUNION key1 [key2] 返回所有给定集合的并集</li>
<li>SREM key member1 [member2]删除集合中一个或多个成员</li>
</ul>
<h4 id="56-有序集合的命令">5.6 有序集合的命令</h4>
<p><img src="https://bu.dusays.com/2025/04/16/67ffadaeb01dc.png" alt="image-20250416211629487"></p>
<ul>
<li>ZADD key score1 member1 [score2 member2]
向有序集合添加一个或多个成员</li>
<li>ZRANGE key start stop [WITHSCORES]
通过索引区间返回有序集合中指定区间内的成员</li>
<li>ZINCRBY key increment member
有序集合中对指定成员的分数加上增量increment</li>
<li>ZREM key member [member …] 移除有序集合中的一个或多个成员</li>
</ul>
<h4 id="57-通用命令">5.7 通用命令</h4>
<p><img src="https://bu.dusays.com/2025/04/16/67ffaf5dcb72b.png" alt="image-20250416212340819"></p>
<ul>
<li>KEYS pattern 查找所有符合给定模式( pattern)的 key</li>
<li>EXISTS key 检查给定key是否存在</li>
<li>TYPE key 返回key所储存的值的类型</li>
<li>DEL key 该命令用于在key存在是删除key</li>
</ul>
<h3 id="6-httpclient">6. HttpClient</h3>
<h3 id="7-spring-cache-简化缓存代码开发">7. Spring Cache
简化缓存代码开发</h3>
<p>Spring
Cache是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p>
<p>Spring Cache提供了一层抽象，底层可以切换不同的缓存实现，例如:</p>
<ul>
<li>EHCache</li>
<li>Caffeine</li>
<li>Redis</li>
</ul>
<blockquote>
<p>常用注解</p>
</blockquote>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@EnableCaching</td>
<td>开启缓存注解功能，通常加在启动类上</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td>
</tr>
<tr>
<td>@CachePut</td>
<td>将方法的返回值放到缓存中</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>将一条或多条数据从缓存中删除</td>
</tr>
</tbody>
</table>
<p><img src="https://bu.dusays.com/2025/04/28/680ee4967dcb4.png" alt="image-20250428101435934"></p>
<h3 id="8-微信支付">8. 微信支付</h3>
<p>跳过了</p>
<h3 id="9-spring-task">9. Spring Task</h3>
<p>Spring
Task是spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。</p>
<p>定位： 定时任务框架</p>
<p>作用：定时自动执行某段java代码</p>
<h4 id="cron表达式">cron表达式</h4>
<p>cron表达式其实就是一个字符串，通过cron表达式可以定义任务触发的时间</p>
<p>构成规则:分为6或7个域，由空格分隔开，每个域代表一个含义</p>
<p>每个域的含义分别为:秒、分钟、小时、日、月、周、年(可选)</p>
<p><img src="https://bu.dusays.com/2025/05/09/681d77b110f1d.png" alt="image-20250509113400913"></p>
<p>可以使用corn在线生成器<a href="https://cron.ciding.cc/">在线Cron表达式生成器 </a></p>
<h4 id="使用">使用</h4>
<ul>
<li><p>在启动类上添加<code>@EnableScheduling</code>注解开启任务调度</p></li>
<li><p>自定义定时任务类</p></li>
</ul>
<h3 id="10-websocket">10. WebSocket</h3>
<p>WebSocket是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成
一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</p>
<p>啊？？？？？？？一次握手？？？？？</p>
<p>websocket是基于tcp的一种网络协议，他实现了浏览器和服务器全双工通信</p>
<p><img src="https://bu.dusays.com/2025/07/12/6871b8cf22181.png" alt="image-20250712092200998"></p>
<p>应用场景：视频弹幕，网页聊天，实况更新</p>
<h3 id="11-apache-poi">11. Apache POI</h3>
<p>Apache POI是一个处理Miscrosoft
Office各种文件格式的开源项目。简单来说就是，我们可以使用POI在Java程序中对Miscrosoft
Office各种文件进行读写操作。</p>
<p>一般情况下，POI都是用于操作 Excel文件。</p>
<h2 id="二代码">二、代码</h2>
<h3 id="第四天代码">第四天代码</h3>
<blockquote>
<p>完成套餐管理模块所有业务功能，包括：</p>
<ul>
<li>新增套餐</li>
<li>套餐分页查询</li>
<li>删除套餐</li>
<li>修改套餐</li>
<li>起售停售套餐</li>
</ul>
<p>要求：</p>
<ol type="1">
<li>根据产品原型进行需求分析，分析出业务规则</li>
<li>设计接口</li>
<li>梳理表之间的关系（分类表、菜品表、套餐表、口味表、套餐菜品关系表）</li>
<li>根据接口设计进行代码实现</li>
<li>分别通过swagger接口文档和前后端联调进行功能测试</li>
</ol>
</blockquote>
<blockquote>
<p>好吧好吧，该来的总还是会来的，前面你可以搓出来分类管理模块，那么现在你肯定可以做到套餐管理模块呢</p>
<p>加油加油加油加油李阳</p>
</blockquote>
<h3 id="1-新增套餐">1. 新增套餐</h3>
<p>新增套餐模块肯定要关联菜品表，我想一想🤔</p>
<p>首先肯定要有一个套餐表<code>setmeal</code>，如何根据套餐表的id将菜品与套餐关联在<code>setmeal_dish</code>表中，有点类似菜品表和口味表，这样想就立马有思路了嘿嘿，废话少说直接开干兄弟们</p>
<p>我先看下页面原型</p>
<p><img src="https://bu.dusays.com/2025/04/13/67fb7d83570aa.png" alt="image-20250413170146106"></p>
<p>完蛋，好像有点麻烦</p>
<p>涉及功能：</p>
<ul>
<li>套餐分类：根据分类类型查询分类</li>
<li>套餐菜品：根据id查询菜品（所有菜品我猜）</li>
<li>文件上传：已完成</li>
<li>新增套餐：insert</li>
</ul>
<p>看下接口</p>
<p><img src="https://bu.dusays.com/2025/04/13/67fb7f02ed49d.png" alt="image-20221018141521068"></p>
<p><img src="https://bu.dusays.com/2025/04/13/67fb7eeaf296e.png" alt="image-20221018141606787"></p>
<p>老师给了俩接口文档，那我们先写第一个 根据分类文档查询第一个</p>
<h4 id="11-据分类查询套餐">1.1 据分类查询套餐</h4>
<p>根据文档，是写在dish里面的功能</p>
<p>很简单的代码，这里我就不再多说，具体代码请看我github提交的commit的根据分类id查询菜品的代码</p>
<p>再次感叹，前端功能设计的太好了</p>
<p><em><strong>需要注意</strong></em>：</p>
<p><code>getByCategoryId</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 菜品集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Dish&gt; <span class="title function_">getByCategoryId</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">       <span class="comment">// 查询条件，封装查询条件，设置查询条件，根据分类id查询，查询启用菜品</span></span><br><span class="line">       <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> Dish.builder()</span><br><span class="line">               .categoryId(categoryId)</span><br><span class="line">               .status(StatusConstant.ENABLE)</span><br><span class="line">               .build();</span><br><span class="line">       <span class="comment">// 查询菜品表</span></span><br><span class="line">       <span class="keyword">return</span> dishMapper.getByCategoryId(categoryId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这里需要根据id，和启用菜品来查询，对应这三个部分</p>
<p><img src="https://bu.dusays.com/2025/04/13/67fbb57a93140.png" alt="image-20250413210042184"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    根据菜品类型id查询菜品--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByCategoryId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Dish&quot;</span>&gt;</span></span><br><span class="line">        select * from dish</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>and category_id = #&#123;categoryId&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>and status = #&#123;status&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span>and name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by create_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml还需要进行动态查询，只查某一项的功能</p>
<h4 id="12-批量删除套餐">1.2 批量删除套餐</h4>
<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊1啊1啊1啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊1啊啊啊啊啊啊劳资要疯了</p>
<p>劳资删除套餐为什么只能删除套餐表，关联不到套餐菜品表</p>
<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p>
<p>操他奶奶的，因为我的插入代码有误，获取id变成了获取套餐名称id，这样我的套餐菜品表关联的套餐id全部变成了口味表里的id，怪不得一直删除不成功，代码明明也和老师的差不多，但是套餐菜品表就是删除不成功</p>
<p>目前已解决，具体代码在github</p>
<h3 id="3-使用spring-cache-简化代码思路">3. 使用Spring Cache
简化代码思路</h3>
<p><img src="https://bu.dusays.com/2025/04/28/680ef13270bc1.png" alt="image-20250428110832373"></p>
<h3 id="4-绕过订单支付">4. 绕过订单支付</h3>
<p>前端部分</p>
<p><img src="https://bu.dusays.com/2025/05/02/6814902d0c2c9.png" alt="image-20250502172802839"></p>
<p>后端部分：</p>
<p>详情请看github的commit</p>
<h3 id="5-day9-实战内容">5. Day9 实战内容</h3>
<p>用户端历史订单模块：</p>
<ul>
<li>查询历史订单</li>
<li>查询订单详情</li>
<li>取消订单</li>
<li>再来一单</li>
</ul>
<h4 id="1-接口设计自己想的">1. 接口设计（自己想的）</h4>
<ul>
<li>查询历史订单就是查询order表，将相关的查询出来，请求方式为get，查询到的数据封装在一个实体类中VO，然后根据vo将用户id传入过去，根据id查询必要关键字并返回</li>
<li>查询历史订单，根据手机号去查询订单细节表</li>
<li>取消订单就是根据手机号删除一条订单</li>
<li>再来一单add，点击将数据再来一条</li>
</ul>
<h4 id="2-查询历史订单">2. 查询历史订单</h4>
<p>自己写的代码页面显示不出来，原因是为设置状态，我的状态获取不到，后面改为了老师的代码</p>
<h4 id="3-查询订单详情">3. 查询订单详情</h4>
<p>抄的代码</p>
<h2 id="三老师代码">三、老师代码</h2>
<div class="timeline green"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2025</p>
</div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>04-11</p>
</div></div><div class="timeline-item-content"><p>我已经进修完成javaweb的代码了，苍穹外卖一切从0开始重新写，把我之前遇到的问题做一个巩固</p>
</div></div></div>

<h3 id="1-用户登录之初体验">1. 用户登录之初体验</h3>
<p><code>Employeecontroller</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;EmployeeLoginVO&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeLoginDTO employeeLoginDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;员工登录：&#123;&#125;&quot;</span>, employeeLoginDTO);</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.login(employeeLoginDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录成功后，生成jwt令牌</span></span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(JwtClaimsConstant.EMP_ID, employee.getId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(</span><br><span class="line">                jwtProperties.getAdminSecretKey(),</span><br><span class="line">                jwtProperties.getAdminTtl(),</span><br><span class="line">                claims);</span><br><span class="line"></span><br><span class="line">        <span class="type">EmployeeLoginVO</span> <span class="variable">employeeLoginVO</span> <span class="operator">=</span> EmployeeLoginVO.builder()</span><br><span class="line">                .id(employee.getId())</span><br><span class="line">                .userName(employee.getUsername())</span><br><span class="line">                .name(employee.getName())</span><br><span class="line">                .token(token)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(employeeLoginVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol type="1">
<li>首先使用<code>&lt;EmployeeLoginVO&gt;</code>的实体类封装操作结果，类型是<code>&lt;EmployeeLoginVO&gt;</code>,就是员工登录返回的数据格式，包括id，用户名，密码，令牌，方便我们获取
<ul>
<li>需要我们传递一个json类型的返回值，返回用户名和密码，因此参数为employeeLoginDTO类型，里面放的是用户名和密码</li>
</ul></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">login</span><span class="params">(EmployeeLoginDTO employeeLoginDTO)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> employeeLoginDTO.getUsername();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employeeLoginDTO.getPassword();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、根据用户名查询数据库中的数据</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.getByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、处理各种异常情况（用户名不存在、密码不对、账号被锁定）</span></span><br><span class="line">        <span class="keyword">if</span> (employee == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//账号不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountNotFoundException</span>(MessageConstant.ACCOUNT_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码比对</span></span><br><span class="line">        <span class="comment">// TODO 后期需要进行md5加密，然后再进行比对</span></span><br><span class="line">        <span class="keyword">if</span> (!password.equals(employee.getPassword())) &#123;</span><br><span class="line">            <span class="comment">//密码错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordErrorException</span>(MessageConstant.PASSWORD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (employee.getStatus().equals(StatusConstant.DISABLE)) &#123;</span><br><span class="line">            <span class="comment">//账号被锁定</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountLockedException</span>(MessageConstant.ACCOUNT_LOCKED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、返回实体对象</span></span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后获取到用户名密码，再将数据库查询到的用户封装再employee中，将我们获取到的用户名和数据中的数据经行比对，再将比对成功的用户数据经行返回到controller中</p>
<p>后面再去生成令牌</p>
<p>…</p>
<p>突然想明白了，java的泛型好像就是c里面的结构体</p>
<h3 id="2-日期格式化">2. 日期格式化</h3>
<p><code>sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展SpringMVC的消息转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要为消息转换器设置一个对象转换器，将Java对象转为json</span></span><br><span class="line">        converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        <span class="comment">// 0表示优先级最高</span></span><br><span class="line">        converters.add(<span class="number">0</span>, converter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>固定格式</p>
<p><code>sky-common/src/main/java/com/sky/json/JacksonObjectMapper.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="comment">//public static final String DEFAULT_DATE_TIME_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-aop">3. AOP</h3>
<h2 id="三遇到的错误">三、遇到的错误</h2>
<h4 id="1前端nginx打开报502错误">1.前端nginx打开报502错误</h4>
<p>在项目的第一步，我把前端代码放在了没有中文的路径，然后启动了nginx，访问localhost成功，但是点击登录不跳转，控制台报了</p>
<p>Nginx 502错误:</p>
<blockquote>
<p>Failed to load resource: the server responded with a status of 502
(Bad Gateway)</p>
</blockquote>
<p>我现在在conf文件夹下的<code>nginx.conf</code>文件中添加了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 502 bad gateway 错误解决配置 start</span><br><span class="line">proxy_buffer_size 64k;</span><br><span class="line">proxy_buffers 32 32k;</span><br><span class="line">proxy_busy_buffers_size 128k;</span><br><span class="line"># 502 bad gateway 错误解决配置 end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现也不行，后面了解弹幕知道好像是因为没有开后台所以登录不成功，不过服务能启动就ok</p>
<h4 id="2后端报错误">2.后端报错误</h4>
<blockquote>
<p>java: java.lang.NoSuchFieldError: Class
com.sun.tools.javac.tree.JCTree$JCImport does not have member field
‘com.sun.tools.javac.tree.JCTree qualid’</p>
</blockquote>
<p>问题原因是<a href="https://so.csdn.net/so/search?q=Lombok&amp;spm=1001.2101.3001.7020">Lombok</a>
，与 JDK 21 兼容的最低 Lombok 版本是 1.18.30，最小的 Spring Boot 版本是
3.1.4。</p>
<p>我的jdk是21</p>
<p>升级呗，还能咋弄</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>升级完成后build就没有报错了，后序报错再说</p>
<h4 id="3项目没有iml文件">3.项目没有iml文件</h4>
<p>我导入老师的项目没有inl文件</p>
<p>alt+F12打开命令行</p>
<p>执行<code>mvn idea:module</code></p>
<p>完美解决</p>
<h4 id="4steam与nginx冲突问题">4.Steam++与nginx冲突问题</h4>
<p>劳资的steam++与nginx又冲突，我说怎么一直启动不成功</p>
<p>关掉steam++后nginx成功启动，任务管理器中有在运行，成功进入</p>
<h4 id="5oss前端不显示图片后台正确获取问题">5.OSS前端不显示图片，后台正确获取问题</h4>
<p><code>yml</code>的endpoint:
oss-cn-hangzhou.aliyuncs.com不能加http://</p>
<h4 id="6-day9地址解析失败错误">6. day9地址解析失败错误</h4>
<p><img src="https://bu.dusays.com/2025/05/08/681cc1f3e691a.png" alt="image-20250508223812920"></p>
<p>哇我操他奶奶的</p>
<p>这个错误又改了很长时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查客户的收货地址是否超出配送范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkOutOfRange</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;address&quot;</span>, shopAddress);</span><br><span class="line">        map.put(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ak&quot;</span>, ak);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取店铺的经纬度坐标</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopCoordinate</span> <span class="operator">=</span> HttpClientUtil.doGet(<span class="string">&quot;https://api.map.baidu.com/geocoding/v3&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(shopCoordinate);</span><br><span class="line">        <span class="keyword">if</span> (!jsonObject.getString(<span class="string">&quot;status&quot;</span>).equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(<span class="string">&quot;店铺地址解析失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数据解析</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">location</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;result&quot;</span>).getJSONObject(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">lat</span> <span class="operator">=</span> location.getString(<span class="string">&quot;lat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">lng</span> <span class="operator">=</span> location.getString(<span class="string">&quot;lng&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        店铺经纬度坐标</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopLngLat</span> <span class="operator">=</span> lat + <span class="string">&quot;,&quot;</span> + lng;</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;address&quot;</span>, address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取用户地址的经纬度坐标</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userCoordinate</span> <span class="operator">=</span> HttpClientUtil.doGet(<span class="string">&quot;https://api.map.baidu.com/geocoding/v3&quot;</span>, map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数据解析</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">userJson</span> <span class="operator">=</span> JSON.parseObject(userCoordinate);</span><br><span class="line">        <span class="keyword">if</span> (!userJson.getString(<span class="string">&quot;status&quot;</span>).equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(<span class="string">&quot;用户地址解析失败，错误码：&quot;</span> + userJson.getString(<span class="string">&quot;status&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据解析</span></span><br><span class="line">         location = userJson.getJSONObject(<span class="string">&quot;result&quot;</span>).getJSONObject(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">         lat = location.getString(<span class="string">&quot;lat&quot;</span>);</span><br><span class="line">         lng = location.getString(<span class="string">&quot;lng&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        用户收货地址经纬度坐标</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userLngLat</span> <span class="operator">=</span> lat + <span class="string">&quot;,&quot;</span> + lng;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;店铺坐标响应：&#123;&#125;&quot;</span>, shopCoordinate);</span><br><span class="line">        log.info(<span class="string">&quot;用户坐标响应：&#123;&#125;&quot;</span>, userCoordinate);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;origin&quot;</span>, shopLngLat);</span><br><span class="line">        map.put(<span class="string">&quot;destination&quot;</span>, userLngLat);</span><br><span class="line">        map.put(<span class="string">&quot;steps_info&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//路线规划</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> HttpClientUtil.doGet(<span class="string">&quot;https://api.map.baidu.com/directionlite/v1/driving&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        jsonObject = JSON.parseObject(json);</span><br><span class="line">        <span class="keyword">if</span> (!jsonObject.getString(<span class="string">&quot;status&quot;</span>).equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(<span class="string">&quot;配送线路规划失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数据解析</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> (JSONArray) result.get(<span class="string">&quot;routes&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">distance</span> <span class="operator">=</span> (Integer) ((JSONObject) jsonArray.get(<span class="number">0</span>)).get(<span class="string">&quot;distance&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(distance &gt; <span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="comment">//配送距离超过5000米</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(<span class="string">&quot;超出配送范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>原因是我创建应用的时候选择了sn校验，一直校验不通过（我是傻逼，不知道用Debug）,后面用debug发现一直提醒sn校验不通过，我就改为了地址白名单模式，然后将本机ip放了进去，然后就跑成功了，后面有点点小错误改了以下运行就成功了</p>
<p>我以后一定要好好用debug</p>
<h4 id="7-支付成功不提示订单信息也没有提示声音">7.
支付成功不提示订单信息也没有提示声音</h4>
<p>修改<code>orderServicelImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderPaymentVO <span class="title function_">payment</span><span class="params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 当前登录用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(userId);</span><br><span class="line">        </span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ORDERPAID&quot;</span>);</span><br><span class="line">        <span class="type">OrderPaymentVO</span> <span class="variable">vo</span> <span class="operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);</span><br><span class="line">        vo.setPackageStr(jsonObject.getString(<span class="string">&quot;package&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为替代微信支付成功后的数据库订单状态更新，多定义一个方法进行修改</span></span><br><span class="line">        paySuccess(ordersPaymentDTO.getOrderNumber());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功，修改订单状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outTradeNo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paySuccess</span><span class="params">(String outTradeNo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据订单号查询订单</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">ordersDB</span> <span class="operator">=</span> orderMapper.getByNumber(outTradeNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据订单id更新订单的状态、支付方式、支付状态、结账时间</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> Orders.builder()</span><br><span class="line">                .id(ordersDB.getId())</span><br><span class="line">                .status(Orders.TO_BE_CONFIRMED)</span><br><span class="line">                .payStatus(Orders.PAID)</span><br><span class="line">                .checkoutTime(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        orderMapper.update(orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过websocket向客户端浏览器推送消息 (type:1为来单提醒 2为客户催单 orderID content)</span></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">//1为来单提醒 2为客户催单</span></span><br><span class="line">        map.put(<span class="string">&quot;type&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 订单id</span></span><br><span class="line">        map.put(<span class="string">&quot;orderId&quot;</span>,ordersDB.getId());</span><br><span class="line">        <span class="comment">// 提示内容</span></span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;您有新的订单，请及时处理:&quot;</span>+outTradeNo);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;推送消息到客户端：&#123;&#125;&quot;</span>,map);</span><br><span class="line">        <span class="comment">// 将Map对象转换为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">        <span class="comment">// 向客户端浏览器推送消息</span></span><br><span class="line">        webSocketServer.sendToAllClient(jsonString);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>将之前付款成功时的手动更新的代码全部替换为了<code>paySuccess</code>里面的代码，这样支付成功就会调用WebSocket就会向前端发送消息</p>
<h2 id="四-总结">四、 总结</h2>
<p>7月11日这个项目也算是全部都结束了，迷迷糊糊感觉好像什么都没学</p>
<p>不说了抢单大厅来新单了</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>tlias 智能管理系统</title>
    <url>/posts/37847/</url>
    <content><![CDATA[<h1 id="tlias智能管理系统">tlias智能管理系统</h1>
<blockquote>
<p>跟着老师敲了部门管理和员工管理的内容</p>
<p>以下是自己写班级管理，学员管理，数据统计的历程</p>
<p>故余虽愚，卒获有所闻</p>
<p>因为在写代码的过程中发现就是简单的copy代码，所以这里没有提供更多的代码思路，详情请看github中具体的commit，那里会有详细注释解析</p>
</blockquote>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/tlias-web-managemen">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/03/20/67dc235380f8f.gif)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">tlias后端仓库</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://blog.baskly.fun/posts/49515/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/08/07/6893e6d9c807f.png)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">tlias前端笔记</div>
            <div class="tag-link-sitename">李阳的秘密小屋</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/vue-tlias-management/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/03/20/67dc235380f8f.gif)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">tlias前端仓库</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<h2 id="一代码开发">一、代码开发</h2>
<h3 id="1班级管理">1、班级管理</h3>
<h4 id="11-分页查询功能">1.1 分页查询功能</h4>
<p>劳资不会怎么办 不管了先写在说</p>
<p>一个很不好的问题，我的Controller要叫什么名字</p>
<p><code>ClazzController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Clazz;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.ClazzQueryParam;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/04/07/13:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 班级管理的一些列操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/clazzs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClazzController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 班级管理--分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(ClazzQueryParam clazzQueryParam)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;分页查询班级信息,参数：&#123;&#125;&quot;</span>, clazzQueryParam);</span><br><span class="line">        PageResult&lt;Clazz&gt; pageResult= clazzService.page(clazzQueryParam);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分页查询功能，我先写的controller，</p>
<p>操他奶奶的，控制台一直报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method parameter <span class="string">&#x27;id&#x27;</span>: Failed to convert value of type <span class="string">&#x27;java.lang.String&#x27;</span> to required type <span class="string">&#x27;java.lang.Integer&#x27;</span>; For input string: <span class="string">&quot;list&quot;</span></span><br></pre></td></tr></table></figure>

<p>劳资找了一下午错误，后面发现是方法上没加**@GetMapping**注解</p>
<p>代码基本上完成了，下面我们一起看看具体的实现</p>
<p><code>ClazzController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/clazzs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClazzController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClazzService clazzService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 班级管理--分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(ClazzQueryParam clazzQueryParam)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;分页查询班级信息,参数：&#123;&#125;&quot;</span>, clazzQueryParam);</span><br><span class="line">        PageResult&lt;Clazz&gt; pageResult = clazzService.page(clazzQueryParam);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参照那个部门的分页查询，基本代码一样，就修改了泛型
还有clazzQueryParam</p>
<p><code>clazzQueryParam</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/04/07/13:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 分页查询实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClazzQueryParam</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> LocalDate begin;</span><br><span class="line">    <span class="keyword">private</span> LocalDate end;</span><br><span class="line">    <span class="keyword">private</span> Integer page=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参照的接口文档，返回来的数据</p>
<p>service代码可以一键配置，这里不再多说</p>
<p><code>ClazzServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClazzMapper clazzMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;Clazz&gt; <span class="title function_">page</span><span class="params">(ClazzQueryParam clazzQueryParam)</span> &#123;</span><br><span class="line">        <span class="comment">//1.设置分页参数</span></span><br><span class="line">        PageHelper.startPage(clazzQueryParam.getPage(),clazzQueryParam.getPageSize());</span><br><span class="line">        <span class="comment">//2.调用分页查询的方法</span></span><br><span class="line">        List&lt;Clazz&gt; clazzList = clazzMapper.list(clazzQueryParam);</span><br><span class="line">        <span class="comment">//3.封装结果并返回</span></span><br><span class="line">        Page&lt;Clazz&gt; pageResult = (Page&lt;Clazz&gt;) clazzList;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span> (pageResult.getTotal(),pageResult.getResult());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>还是抄的代码，基本上没有改，就改了泛型</p>
<p><code>ClazzMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页条件查询--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Clazz&quot;</span>&gt;</span></span><br><span class="line">       select c.*, e.name masterName,</span><br><span class="line">       (case when begin_date &gt; now() then &#x27;未开班&#x27; when now() &gt; end_date then &#x27;已结课&#x27; else &#x27;在读中&#x27; end) status</span><br><span class="line">       from clazz as c left join emp e on c.master_id = e.id</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               c.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin !=null and end != null&quot;</span>&gt;</span></span><br><span class="line">               and c.end_date between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">       order by c.update_time desc</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们重点看一下xml语句，多了一个case，后面做了一个模糊查询，把开始时间结束时间和名称做了模糊查询，挺厉害的</p>
<p>我没有想到可以用case，我第一次思考的时候是用if语句</p>
<p>失之毫厘 差之千里</p>
<p>又因为大小写报错解决了半个小时的问题我草了</p>
<p>后面都是很简单的代码操作，基本上就是抄抄抄的代码，具体看github的commit</p>
<h3 id="2学员管理">2.学员管理</h3>
<h4 id="1分页查询">1.分页查询</h4>
<p>我在写分页查询时遇到了一些错误，控制台报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Validation failed <span class="keyword">for</span> argument [<span class="number">0</span>] in <span class="keyword">public</span> com.itheima.pojo.Result com.itheima.controller.StudentController.page(com.itheima.pojo.StudentQueryParam): [Field error in object <span class="string">&#x27;studentQueryParam&#x27;</span> on field <span class="string">&#x27;clazzId&#x27;</span>: rejected value [<span class="literal">null</span>]; codes [typeMismatch.studentQueryParam.clazzId,typeMismatch.clazzId,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [studentQueryParam.clazzId,clazzId]; arguments []; <span class="keyword">default</span> message [clazzId]]; <span class="keyword">default</span> message [Failed to convert property value of type <span class="string">&#x27;java.lang.String&#x27;</span> to required type <span class="string">&#x27;java.lang.Integer&#x27;</span> <span class="keyword">for</span> property <span class="string">&#x27;clazzId&#x27;</span>; For input string: <span class="string">&quot;null&quot;</span>]] </span><br><span class="line">	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:<span class="number">158</span>) ~[spring-web-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:<span class="number">122</span>) ~[spring-web-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:<span class="number">227</span>) ~[spring-web-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">181</span>) ~[spring-web-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">118</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">986</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">891</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1089</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">979</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1014</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">903</span>) ~[spring-webmvc-<span class="number">6.2</span><span class="number">.5</span>.jar:<span class="number">6.2</span><span class="number">.5</span>]</span><br></pre></td></tr></table></figure>

<p>好像是前端传的是null没办法转为Integer类型，一直未解决</p>
<p>也就是我的所属班级模块一直是错误的</p>
<p>奶奶的又找了一个小时的错误，后面看接口文档感觉像是班级管理模块的问题，一检查，查询所有班级模块没有加id，怪不得前端获取不到id，因为我都根本没有查，</p>
<p>感觉自己是一头猪，再也不自己想代码了，一定要好好参考文档</p>
<p>班级管理之类的代码也很简单，基本就是操操操，代码详情请看GitHub的commit</p>
<hr>
<h3 id="3-登录功能">3. 登录功能</h3>
<p>在 Java 中，过滤器和拦截器的区别如下：</p>
<ol type="1">
<li><strong>所属规范与使用范围</strong>：过滤器属于 Servlet
规范，可拦截进入容器的所有请求，包括静态和动态资源请求；拦截器通常是
Spring 框架的功能，只能拦截 Spring 管理的 Bean
所处理的请求，一般不拦截静态资源请求。</li>
<li><strong>实现方式</strong>：过滤器需实现 javax.servlet.Filter
接口，重写 doFilter、init 和 destroy 方法；拦截器需实现
org.springframework.web.servlet.HandlerInterceptor 接口，重写
preHandle、postHandle 和 afterCompletion 方法。</li>
<li><strong>执行时机</strong>：过滤器在 Servlet
处理请求之前和之后执行；拦截器的 preHandle 在 Controller
处理请求之前执行，postHandle 在 Controller
处理请求之后、视图渲染之前执行，afterCompletion
在视图渲染之后执行。</li>
<li><strong>依赖注入</strong>：过滤器中不能直接使用 Spring
的依赖注入；拦截器是 Spring 组件，可以方便地使用 Spring
的依赖注入。</li>
<li><strong>作用对象</strong>：过滤器作用于 Servlet
容器，对所有符合条件的请求都起作用；拦截器作用于 Spring
框架的处理器映射器（HandlerMapping）返回的处理器（Handler），针对特定的请求处理逻辑。</li>
</ol>
<h2 id="二aop">二、AOP</h2>
<p>AOP: Aspect Oriented
Programming(面向切面编程、面向方面编程)，可简单理解为就是面向特定方法编程。AOP的底层就是动态代理技术</p>
<h3 id="概念">概念</h3>
<p>场景∶案例中部分业务方法运行较慢，定位执行耗时较长的方法，此时需要统计每一个业务方法的执行耗时</p>
<ul>
<li>连接点:
JoinPoint，可以被AOP控制的方法（暗含方法执行时的相关信息)</li>
<li>通知:Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法)</li>
<li>切入点:PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用，实际被aop控制的方法</li>
<li>切面：Aspect，描述通知与切入点的对应关系（通知+切入点）</li>
<li>目标对象:Target，通知所应用的对象</li>
</ul>
<h3 id="通知">通知</h3>
<ul>
<li>@Around:环绕通知，此注解标注的通知方法在目标方法前、后都被执行
，返回值类型必须为object，需要手动调用proceed方法</li>
<li>@Before:前置通知，此注解标注的通知方法在目标方法前被执行</li>
<li>@After
:后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有虽常都会执行</li>
<li>@AfterReturning:返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li>
<li>@AfterThrowing :异常后通知，此注解标注的通知方法发生异常后执行</li>
</ul>
<h4 id="通知执行顺序">通知执行顺序</h4>
<ul>
<li><p>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行。</p></li>
<li><p>执行顺序:</p>
<ul>
<li><p>不同切面类中，默认按照切面类的类名字母排序:</p></li>
<li><p>目标方法前的通知方法:字母排名靠前的先执行</p></li>
<li><p>目标方法后的通知方法:字母排名靠前的后执行</p></li>
</ul></li>
</ul>
<h3 id="pointcut">@pointCut</h3>
<p><img src="https://bu.dusays.com/2025/04/10/67f7b295d32bf.png" alt="image-20250410195911547"></p>
<h3 id="切入点表达式">切入点表达式</h3>
<p><img src="https://bu.dusays.com/2025/04/10/67f7b489e71c5.png" alt="image-20250410200735189"></p>
<ul>
<li>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为:</li>
</ul>
<p>​ execution(包名.类名)</p>
<p>​
*∶单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</p>
<p>​
..∶多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p>
<p><img src="https://bu.dusays.com/2025/04/10/67f7b5bdd28f3.png" alt="image-20250410201243358"></p>
<h3 id="连接点">连接点</h3>
<p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p>
<ul>
<li><p>对于@Around
通知，获取连接点信息只能使用ProceedingJoinPoint</p></li>
<li><p>对于其它四种通知，获取连接点信息只能使用JoinPoint，它是
ProceedingJoinPoint的父类型</p></li>
</ul>
<p><strong>JoinPoint</strong></p>
<p><img src="https://bu.dusays.com/2025/04/10/67f7bb2b6d3df.png" alt="image-20250410203556008"></p>
<h2 id="三springboot零碎知识点">三、SpringBoot零碎知识点</h2>
<h3 id="1-配置优先级">1. 配置优先级</h3>
<p>properties&gt; yml &gt; yaml，一般使用yml</p>
<h3 id="2-bean管理">2. Bean管理</h3>
<p>@Scope()</p>
<p><img src="https://bu.dusays.com/2025/04/11/67f871731fdee.png" alt="image-20250411093330523"></p>
<h2 id="四docker入门">四、Docker入门</h2>
<p>参照另外一篇SpringCloud笔记</p>
<h2 id="致谢">致谢</h2>
<p>感谢黑马，感谢涛哥，感谢idea，感谢通义千问，感谢github上同样写这个项目的小伙伴</p>
<p>这个小项目在2025/4/10 23点正式完结</p>
<p>虽然只是一个很小很小的小项目，不过确实收获了很多，了解了很多关于Spring的注解，以及类之间的关系</p>
<p>没做这个小项目之前我基本上什么都不太明白，做完感觉对整个项目结构更清晰了</p>
<p>​ 2025/4/10</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习（tlias为例）</title>
    <url>/posts/49515/</url>
    <content><![CDATA[<blockquote>
<p>这段时间以来一直在帮别人写作业，然后在github上翻到了很多别人写的源码，后端部分代码我基本上都可以看的懂。不过前端部分总是感觉很迷糊，毕竟没有系统的学过。因此：以talis为例系统学习一下Vue，ElementPlus等前端的使用</p>
<p>谨以此篇记录我的前端学习过程</p>
<p><em>古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。</em></p>
<p>​ <em>——《晁错论》</em></p>
</blockquote>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/tlias-web-managemen">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/03/20/67dc235380f8f.gif)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">tlias后端仓库</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/vue-tlias-management/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/03/20/67dc235380f8f.gif)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">tlias前端仓库</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<h1 id="talis前端开发">talis前端开发</h1>
<h2 id="一-vue项目入门">一、 Vue项目入门</h2>
<h3 id="1-新建vue工程化项目">1. 新建vue工程化项目</h3>
<blockquote>
<p>npm create vite</p>
<p>选择vue与JavaScript</p>
<p>构建项目</p>
<p>cd到目录下</p>
<p>npm install</p>
<p>npm run dev</p>
</blockquote>
<p>这样就能看到项目的初始页面了</p>
<h3 id="2-项目文件简介">2. 项目文件简介</h3>
<ul>
<li><code>vite.config.js</code>:Vue项目的配置信息，如端口号</li>
<li><code>package.json</code>:项目配置文件，包括项目名，版本号、依赖包、版本等</li>
<li><code>src</code> 源代码文件夹</li>
<li><code>src/assets</code> 静态资源目录，存放图片、字体…</li>
<li><code>src/components</code> 组件目录，存放通用组件</li>
<li><code>src/App.vue</code>根目录</li>
<li><code>src/main.js</code> 入口文件</li>
</ul>
<p><img src="https://bu.dusays.com/2025/05/25/68327cf4ecef7.png" alt="image-20250525101404456"></p>
<h3 id="3-vue项目的开发访问流程">3. vue项目的开发访问流程</h3>
<ul>
<li><code>index.html</code> 默认首页</li>
<li><code>main.js</code> 入口文件。创建vue实例，将其挂载到某个区域</li>
</ul>
<h3 id="4-vue的api风格">4. Vue的API风格</h3>
<h4 id="1-选项式api">1. 选项式API</h4>
<p>选项式APT:可以用包含多个选项的对象来描述组件的逻辑，如:
data，methods,
mounted等。选项定义的属性都会暴露在函数内部的<code>this</code>上，它会指向当前的组件实例。</p>
<p><img src="https://bu.dusays.com/2025/05/25/68328349d7b48.png" alt="image-20250525104113454"></p>
<h4 id="2-组合式api">2. 组合式API</h4>
<p>组合式API:是Vue3提供的一种基于函数的组件编写方式，通过使用函数来组织和复用组件的逻辑。它提供了一种更灵活、更可组合的方式来编写组件。</p>
<p><img src="https://bu.dusays.com/2025/05/25/683283c5f25bd.png" alt="image-20250525104317715"></p>
<p>组合式API小demo</p>
<p><code>views/HelloWorld.vue</code></p>
<p>整体流程：</p>
<ul>
<li>点击按钮时会调用<code>increment</code>函数</li>
<li><code>increment</code>函数每点击一次就会将值++</li>
<li>最终将++后的结果展示在页面上</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入ref模块</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref,onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 说明响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="number">0</span>);<span class="comment">// 里面的值为0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 声明函数-在组合式API中没有this</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span>++ <span class="comment">//将上方的值0进行++</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 声明钩子函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue mounted&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--  使用响应式数据 @click与v-on:click操作类似，绑定个点击事件 将值进行输出 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在App.vue中引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./views/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在main.js中注销全局样式引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页面显示</p>
<p><img src="https://bu.dusays.com/2025/05/25/683289302b17d.png" alt="image-20250525110623881"></p>
<ul>
<li>setup:是一个标识，告诉Vue需要进行一些处理，让我们可以更简洁的使用组合式AP工。</li>
<li>ref()︰接收一个内部值，返回一个响应式的ref对象，此对象只有一个指向内部值的属性value。</li>
<li>onMounted():在组合式API中的钩子方法，注册一个回调函数，在组件挂载完成后执行。</li>
</ul>
<h3 id="5-组合式api小案例">5. 组合式API小案例</h3>
<p>🐱🐱🐱好像摸到一点点小头绪了呢好神奇</p>
<p>首先在<code>views/EmpList.vue</code>中新建以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入响应式数据</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123; ref ,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明响应式数据-(v-model绑定的)</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//姓名</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> gender = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//性别</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> job = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//职位</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> userList = <span class="title function_">ref</span>([]); <span class="comment">//用户列表-需要遍历数组</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// 声明函数</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">search</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 基于axios请求发送异步请求，请求服务器加载数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await 将异步请求变为同步请求(等待程序运行完毕来获取结果)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await必须与async一起使用</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> result =<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://web-server.itheima.net/emps/list?name=<span class="subst">$&#123;name.value&#125;</span>&amp;gender=<span class="subst">$&#123;gender.value&#125;</span>&amp;job=<span class="subst">$&#123;job.value&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// result.data.data 第一个 data 表示响应主体 (result.data)，第二个 data (result.data.data) 则是实际的数据列表。</span></span></span><br><span class="line"><span class="language-javascript">   userList.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义钩子函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>();<span class="comment">//自动加载收索功能</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    职位:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;job&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;job&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>讲师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>入职时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>更新时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- v-for 用于列表循环渲染元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in userList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;user.image&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.job == 1&quot;</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.job == 2&quot;</span>&gt;</span>讲师<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.job == 3&quot;</span>&gt;</span>学工主管<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.job == 4&quot;</span>&gt;</span>教研主管<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.job == 5&quot;</span>&gt;</span>咨询师<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.entrydate&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.updatetime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#center</span>,<span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">input</span>,<span class="selector-tag">select</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">17%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页面就会显示</p>
<p><img src="https://bu.dusays.com/2025/05/25/68329b21315d3.png" alt="image-20250525122256824"></p>
<h3 id="6-elementplus">6. ElementPlus</h3>
<p><a href="https://www.cwgj.xyz/zh-CN/component/form.html">组件地址</a></p>
<h4 id="1-导入步骤">1. 导入步骤</h4>
<blockquote>
<p>常见vue项目</p>
<p>npm install element-plus –save 在main.js中引用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入ElementPlus</span></span><br><span class="line"><span class="title function_">createApp</span>( <span class="title class_">App</span> ).<span class="title function_">use</span>(<span class="title class_">ElementPlus</span> ).<span class="title function_">mount</span>( <span class="string">&#x27; #app &#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-表格组件">2. 表格组件</h4>
<p>好像没有啥好说的基本上就是抄抄抄的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = [</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,<span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,<span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>, &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,<span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,&#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span>&gt;</span>Plain<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">plain</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">plain</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">plain</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span>&gt;</span>Round<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">round</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">round</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">round</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">round</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Edit&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Check&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Message&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Star&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">stripe</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;住址&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mb-4</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/05/25/6832b3dd76a5d.png" alt="image-20250525140829333"></p>
<h4 id="3-分页条组件">3. 分页条组件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> currentPage4 = <span class="title function_">ref</span>(<span class="number">1</span>) <span class="comment">// 当前页码</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pageSize4 = <span class="title function_">ref</span>(<span class="number">10</span>) <span class="comment">// 每页记录数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> small = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> background = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> disabled = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> total = <span class="title function_">ref</span>(<span class="number">40</span>)<span class="comment">// 总记录数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleSizeChange</span> = (<span class="params">val</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页展示：<span class="subst">$&#123;val&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleCurrentChange</span> = (<span class="params">val</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页码: <span class="subst">$&#123;val&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 分页条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model:current-page</span>=<span class="string">&quot;currentPage4&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model:page-size</span>=<span class="string">&quot;pageSize4&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[10, 20, 30, 40]&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:small</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:background</span>=<span class="string">&quot;background&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mb-4</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>天下苦秦已久矣！</p>
<p>劳资学ElementPlus就是为了解决这个分页条组件英文问题</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832b8b58017c.png" alt="image-20250525142909314"></p>
<p>之前翻人家写的代码一直不知道在哪里改，现在我就知道啦！</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832b96c65730.png" alt="image-20250525143212375"></p>
<p>呜呜呜终于等到你，还好我没放弃。</p>
<h4 id="4-对话框组件">4. 对话框组件</h4>
<p>就是抄抄抄</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = [</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogTableVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)<span class="comment">//重点</span></span></span><br><span class="line"><span class="language-javascript">&lt;template&gt;</span></span><br><span class="line"><span class="language-javascript"> &lt;!-- 对话框 --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">&quot;dialogTableVisible = true&quot;</span>&gt;</span>打开对话框<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogTableVisible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;配送地址&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832bf461f942.png" alt="image-20250525145710017"></p>
<h4 id="5-表单组件">5. 表单组件</h4>
<p>抄抄抄我抄</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 表单</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> formInline = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">birthday</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(formInline)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formInline&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formInline.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;你叫啥&quot;</span> <span class="attr">clearable</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;formInline.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;男/女/沃尔玛购物袋&quot;</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;沃尔玛购物袋&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;出生日期&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;formInline.birthday&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选一个日期&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> <span class="attr">clearable</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mb-4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-input-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-select</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-select-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终效果</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832c67332db5.png" alt="image-20250525152747155"></p>
<h4 id="6-elementplus的小案例">6. ElementPlus的小案例</h4>
<p><img src="https://bu.dusays.com/2025/05/25/6832c6d5455f5.png" alt="image-20250525152925015"></p>
<blockquote>
<p>我来挑战一下嘿嘿</p>
<p>分析主要是要有表单与表格组件，参考json定义变量名</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;谢逊&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/4.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;entrydate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-06-09&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updatetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-05-25T08:11:11&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

</blockquote>
<h5 id="1定义表单内容">1.定义表单内容</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 表单</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> formInline = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">birthday</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(formInline)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formInline&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formInline.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;你叫啥&quot;</span> <span class="attr">clearable</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;formInline.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;男/女/沃尔玛购物袋&quot;</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;沃尔玛购物袋&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;出生日期&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;formInline.birthday&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选一个日期&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> <span class="attr">clearable</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-input-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-select</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-select-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是我的格式好像不太对，会适应屏幕</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832c969bd997.png" alt="image-20250525154025875"></p>
<p>我去翻翻文档有没有固定的</p>
<p>文档没有但是找到了其他解决方案</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832d01b39293.png" alt="image-20250525160859203"></p>
<p>嗯嗯很完美</p>
<h5 id="2-完成表格内容">2. 完成表格内容</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//声明响应式数据-(v-model绑定的)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">//姓名</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span>  gender = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//性别</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span>  job = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">//职位</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span>  userList = <span class="title function_">ref</span>([])<span class="comment">//用户列表-需要遍历数组</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 收索方法</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">search</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 基于axios请求发送异步请求，请求服务器加载数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await 将异步请求变为同步请求(等待程序运行完毕来获取结果)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await必须与async一起使用</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> result =<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://web-server.itheima.net/emps/list?name=<span class="subst">$&#123;name.value&#125;</span>&amp;gender=<span class="subst">$&#123;gender.value&#125;</span>&amp;job=<span class="subst">$&#123;job.value&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// result.data.data 第一个 data 表示响应主体 (result.data)，第二个 data (result.data.data) 则是实际的数据列表。</span></span></span><br><span class="line"><span class="language-javascript">   userList.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//清空方法</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">onClean</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    name.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    gender.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    job.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>()</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义钩子函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 1500px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formInline&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">clearable</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;job&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;班主任&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;讲师&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;其他&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;search&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClean&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 1030px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>  /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;更新日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-input-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-select</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-select-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mb-3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">1300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完成了表格内容，不过页面显示的很不对劲</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832d78bd4dec.png" alt="image-20250525164043304"></p>
<p>目前只有姓名是显示正常的，其他都不太行我在改改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;更新日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>好像发现问题了，我这里没有绑定嘿嘿</p>
<h5 id="3-修改表格绑定内容">3. 修改表格绑定内容</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 1030px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;更新日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/05/25/6832d85c58693.png" alt="image-20250525164411643"></p>
<p>哇塞哇塞有效果了，不过图片不显示，感觉像是啥属性没有配置的原因，我去翻翻文档
<img src="https://bu.dusays.com/2025/05/25/6832d9481d553.png" alt="image-20250525164808143"></p>
<p>好像发现了，我改改</p>
<h5 id="4-更改图片属性">4. 更改图片属性</h5>
<p>啊？啊？啊？</p>
<p>这里去官方文档里找的代码没有成功回显图片，显示失败</p>
<p>查看了老师的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;scope.row.image&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40px&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>嗯…咱也不知道为啥反正就实现了</p>
<p><img src="https://bu.dusays.com/2025/05/25/6832db3771290.png" alt="image-20250525165622958"></p>
<p>测试功能一切正常</p>
<h5 id="5-最终效果">5. 最终效果</h5>
<p><img src="https://bu.dusays.com/2025/05/25/6832e1aed8646.png" alt="image-20250525172358734"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明响应式数据-(v-model绑定的)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">//姓名</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> gender = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//性别</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> job = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">//职位</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userList = <span class="title function_">ref</span>([])<span class="comment">//用户列表-需要遍历数组</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 收索方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">search</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 基于axios请求发送异步请求，请求服务器加载数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await 将异步请求变为同步请求(等待程序运行完毕来获取结果)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await必须与async一起使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://web-server.itheima.net/emps/list?name=<span class="subst">$&#123;name.value&#125;</span>&amp;gender=<span class="subst">$&#123;gender.value&#125;</span>&amp;job=<span class="subst">$&#123;job.value&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// result.data.data 第一个 data 表示响应主体 (result.data)，第二个 data (result.data.data) 则是实际的数据列表。</span></span></span><br><span class="line"><span class="language-javascript">    userList.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//清空方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">onClean</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    name.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    gender.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    job.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义钩子函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 1200px; margin: 0 auto; min-height: 100vh; display: flex; flex-direction: column; align-items: center; margin-top: 200px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formInline&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">clearable</span>  /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;job&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;班主任&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;讲师&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;其他&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;search&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClean&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 1030px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;110&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;110&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span>  <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;scope.row.image&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80px&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span>  <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;110&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                        &#123;&#123; scope.row.gender  === 1 ? &#x27;男&#x27; : &#x27;女&#x27; &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span>  <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;110&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;scope.row.job == 1&quot;</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job == 2&quot;</span>&gt;</span>讲师<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job == 3&quot;</span>&gt;</span>学工主管<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job == 4&quot;</span>&gt;</span>教研主管<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job == 5&quot;</span>&gt;</span>咨询师<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;220&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;更新日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-input-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-select</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--el-select-width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用自定义模板prop标签可以删除</p>
<h2 id="二tlias侧边栏开发">二、tlias侧边栏开发</h2>
<details class="folding-tag"><summary> @符的小知识点 </summary>
              <div class="content">
              <p>在老师的vue文件中有这样的一个代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout from <span class="string">&quot;@/views/layout/index.vue&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里的@就是完美Src的目录文件夹，定义在了<code>vite.config.js</code>文件中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>老师的页面布局代码使用的是Element的布局，需要在文档查看</p>
              </div>
            </details>

<h3 id="1-左侧侧边栏">1. 左侧侧边栏</h3>
<h4 id="1-左侧菜单基本定义">1. 左侧菜单基本定义</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 左侧菜单 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- 添加左侧侧边栏 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 一级菜单 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">message</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>Navigator One</span><br><span class="line">             <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>Option 1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>左侧侧边栏大致长这样，需要注意的是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代表的是默认展开，索引为1和3，开发过程中不需要展开，在这里就给删除了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;common-layout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Header 区域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Tlias智能学习辅助系统<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right_tool&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">EditPen</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span> 修改密码 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">SwitchButton</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span> 退出登录</span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧菜单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 添加左侧侧边栏 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 首页菜单 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/index&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">              <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Promotion</span>&gt;</span><span class="tag">&lt;/<span class="name">Promotion</span>&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>首页</span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 一级菜单 学员管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;/manage&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里导入了图标组件在文档里有 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Menu</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>班级学员管理</span><br><span class="line">              <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/clazz&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">HomeFilled</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>班级管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/stu&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">UserFilled</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 二级菜单 系统信息管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;/system&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里导入了图标组件在文档里有 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Tools</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>系统信息管理</span><br><span class="line">              <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/dept&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">HelpFilled</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/emp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Avatar</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 三级菜单 数据统计管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;/report&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里导入了图标组件在文档里有 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Histogram</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>数据统计管理</span><br><span class="line">              <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/empReport&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">InfoFilled</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>员工信息统计<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/stuReport&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Share</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>学员信息统计<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/log&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Document</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>日志信息统计<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">          右侧核心展示区域</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#00547d</span>, <span class="number">#007fa4</span>, <span class="number">#00aaa0</span>, <span class="number">#00d072</span>, <span class="number">#a8eb12</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: 楷体;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right_tool</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">730px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义完之后就长这样基本上就是抄代码</p>
<p><img src="https://bu.dusays.com/2025/05/25/68331aedd0274.png" alt="image-20250525212813258"></p>
<h4 id="2-动态菜单router路由">2. 动态菜单（Router路由）</h4>
<details class="folding-tag"><summary> Router 路由知识点 </summary>
              <div class="content">
              <ol type="1"><li><p>router组成</p><ul><li><p>Router实例:路由实例，基于createRouter函数创建，维护了应用的路由信息。</p><p>eg: /stu: /views/stu/index.vue 当配置stu时会访问的路径</p></li><li><p><code>&lt;router-link&gt;</code>:路由链接组件，浏览器会解析成<code>&lt;a&gt;</code>。</p><p>eg:<code>&lt;router-link to='/emp'&gt;</code>员工管理<code>&lt;/router-link&gt;</code>会被解析为超链接标签，点击会跳转（当点击员工管理会跳转emp页面。然后这个标签会去查找我们的实例中定义的/emp的组件路径）</p></li><li><p><code>&lt;router-view&gt;</code>:动态视图组件，用来渲染展示与路由路径对应的组件。</p><p>eg:<code>&lt;router-view&gt;&lt;/router-view&gt;</code>你想在哪里展示组件就在那里加这个标</p></li></ul></li></ol>
              </div>
            </details>

<h5 id="1-开启router">1. 开启router</h5>
<p><code>&lt;el-menu router&gt;</code>自需要在菜单栏上添加一个router既可以跳转了，好神奇</p>
<h5 id="2配置路由index">2.配置路由index</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IndexView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/index/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> clazzView <span class="keyword">from</span> <span class="string">&#x27;@/views/clazz/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DeptView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/dept/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EmpView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/emp/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LogView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/log/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> stuView <span class="keyword">from</span> <span class="string">&#x27;@/views/stu/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EmpReportView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/report/emp/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> stuReportView <span class="keyword">from</span> <span class="string">&#x27;@/views/report/stu/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/layout/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoginView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/login/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/index&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>, <span class="attr">component</span>: <span class="title class_">IndexView</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/clazz&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;clazz&#x27;</span>, <span class="attr">component</span>: clazzView &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/stu&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;stu&#x27;</span>, <span class="attr">component</span>: stuView &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/dept&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;dept&#x27;</span>, <span class="attr">component</span>: <span class="title class_">DeptView</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/emp&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;emp&#x27;</span>, <span class="attr">component</span>: <span class="title class_">EmpView</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/log&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;log&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LogView</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/empReport&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;empReport&#x27;</span>, <span class="attr">component</span>: <span class="title class_">EmpReportView</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/stuReport&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;stuReport&#x27;</span>, <span class="attr">component</span>: stuReportView &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LoginView</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>导入路由然后配置路径</p>
<h5 id="3-在需要展示的地方导入视图">3. 在需要展示的地方导入视图</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 右侧核心区 </span><br><span class="line"><span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4页面展示">4.页面展示</h5>
<p><img src="https://bu.dusays.com/2025/05/25/68332c5d8fc87.png" alt="image-20250525224232768"></p>
<p>神奇！</p>
<h4 id="3-嵌套路由">3. 嵌套路由</h4>
<p>案例引出：当我们在页面访问登录功能时会在右侧盒子中显示登陆页面。这肯定是不符合要求的，推测要在登录页面展示这个路由。</p>
<p>原因：我们在app.vue中引入了默认页面layout。当页面打开时默认显示layout，猜测修改：使用index包裹layout（卧槽卧槽卧槽）</p>
<p>老师说不能把这个页面写死，也就是说不要在app.vue中固定页面（猜错了嘿嘿）</p>
<h5 id="1-动态路由组件">1. 动态路由组件</h5>
<p>在app.vue中填写</p>
<p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>
<p>当匹配到哪个组件就需要在页面中展示哪个组件</p>
<p>咦~现在当我打开页面时变成空白了，也就是说没有指定默认访问页面</p>
<p><img src="https://bu.dusays.com/2025/05/26/683419aac3ffc.png" alt="image-20250526153458819"></p>
<p>推测修改：可能要在里面添加Layout组件</p>
<h5 id="2-路由嵌套">2. 路由嵌套</h5>
<p><img src="https://bu.dusays.com/2025/05/26/68341a5fa3da4.png" alt="image-20250526153807133"></p>
<p>也就是说要在大路由中嵌套layout</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">     <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     <span class="attr">component</span>: <span class="title class_">LayoutView</span>,</span><br><span class="line">     <span class="attr">redirect</span>:<span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">     <span class="attr">children</span>:[</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;index&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;index&#x27;</span>,<span class="attr">component</span>:<span class="title class_">IndexView</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;clazz&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;clazz&#x27;</span>,<span class="attr">component</span>:clazzView&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;dept&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;dept&#x27;</span>,<span class="attr">component</span>:<span class="title class_">DeptView</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;emp&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;emp&#x27;</span>,<span class="attr">component</span>:<span class="title class_">EmpView</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;log&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;log&#x27;</span>,<span class="attr">component</span>:<span class="title class_">LogView</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;stuReport&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;stuReport&#x27;</span>,<span class="attr">component</span>:stuView&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;empReport&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;empReport&#x27;</span>,<span class="attr">component</span>:stuReportView&#125;,</span><br><span class="line">     ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LoginView</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol type="1">
<li>当我们访问根路径时，默认访问的是LayoutView布局的页面，也就是我们最开始的页面。然后就能愉快的访问里面的页面啦。当我们访问login时也能正常显示</li>
<li>路由中配置了<code>redirect</code>，也就是说当我们访问layout的布局内容是，会重定向到index页面</li>
</ol>
<p>不过感觉这里应该会加拦截器相关的内容🍔(看到大汉堡突然想吃汉堡了😋)</p>
<h2 id="三部门管理-查询">三、部门管理-查询</h2>
<h3 id="1-页面分析">1. 页面分析</h3>
<p><img src="https://bu.dusays.com/2025/05/26/68342200a2ffd.png" alt="image-20250526161040143"></p>
<p>呜呼呜呼呜呼呜呼</p>
<ul>
<li>部门管理页面首先上面有一个部门管理标题</li>
<li>一个新增按钮（点击新增会有提示框）</li>
<li>4列表格</li>
<li>编辑，删除按钮</li>
</ul>
<h3 id="2-页面布局开发">2. 页面布局开发</h3>
<ol type="1">
<li><p>标题</p>
<p>直接使用的h1标签</p></li>
<li><p>新增部门按钮，使用Ele的按钮组件</p>
<p><img src="https://bu.dusays.com/2025/05/26/683423fe0c098.png" alt="image-20250526161909236"></p>
<p>这里不需要div吗，感觉也太紧凑了吧</p></li>
<li><p>为按钮设置一个div然后设置外边距</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>+新增部门<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="comment">/* 距离上下10px 左右0px */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就好看哆啦</p></li>
<li><p>新增表格组件</p>
<p>拷贝表格组件代码</p>
<div class="note info flat"><p>需要注意的是：部门id自增的，需要定义</p>
</div>

<p>设置<code>type</code>属性为index即可从1开始自增</p></li>
<li><p>设置操作</p>
<p>当我们使用表格标签时，默认显示的不能满足我们的需求，我们这就需要自定义标签（默认展示的是文字，我们现在要展示按钮）</p></li>
<li><p>完整布局代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;学工部&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">createTime</span>: <span class="string">&quot;2022-09-01T23:06:29&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">updateTime</span>: <span class="string">&quot;2022-09-01T23:06:29&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>+新增部门<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updateTime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>  <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Edit</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>编辑</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Delete</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>删除</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 距离上下10px 左右0px */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/05/26/68342c242cc4e.png" alt="image-20250526165355827"></p>
<p>太漂亮啦嘿嘿</p></li>
</ol>
<h3 id="3-列表查询-加载数据">3. 列表查询-加载数据</h3>
<p>根据需求，需要在打开页面之后，需要自动加载全部部门数据，展示在表格中。</p>
<details class="folding-tag" yellow><summary> 使用ApiFox创建mock模拟数据 </summary>
              <div class="content">
              <p>当我们前端在开发中，假设后端还没开发完毕，这时候我们想要动态查询数据可以使用ApiFox提供的mock模拟后端生成的数据</p><ol type="1"><li><p>打开ApiFox（没有就下载）</p></li><li><p>新建get请求接口，导入响应回来的接口数据（参考接口文档）</p></li><li><p>然后点击mock的云端在里面进行开启</p></li><li><p>我忘记截屏了，不过里面有一个停用按钮，我把开启就可以了（我选的是响应式优先）</p></li><li><p>具体请观看老师的视频：</p></li></ol><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1yGydYEE3H?t=1579.6&p=163">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style>          <i class="anzhiyufont anzhiyu-icon-link" style></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Bilibili</div>            <div class="tag-link-sitename">黑马程序员</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>
              </div>
            </details>

<p>在ApiFox中定义完接口还需要回到前端进行引用。这里要用到的技术是axios</p>
<p>完整代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref ,onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义钩子函数，当页面加载完毕就会调用这函数，然后这个函数就会调用serch方法，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 就会调用链接，将获取的值赋给deptList，然后就在页面显示了</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">//生命周期</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 查询部门列表</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> <span class="title function_">search</span>=<span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123; </span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://m1.apifoxmock.com/m1/6421010-6118327-default/depts&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// 如果code为1就显示数据，否则提示错误信息</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">if</span>(result.<span class="property">data</span>.<span class="property">code</span> == <span class="number">1</span>) &#123; <span class="comment">//布尔类型</span></span></span><br><span class="line"><span class="language-javascript">   deptList.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(result.<span class="property">data</span>.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> deptList = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>+新增部门<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;deptList&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updateTime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>  <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Edit</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>编辑</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Delete</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>删除</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 距离上下10px 左右0px */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页面显示（我的分辨率好像有问题，感觉页面显示的太小了）</p>
<p><img src="https://bu.dusays.com/2025/05/27/6835ab59de608.png" alt="6835ab59de608"></p>
<p>这里使用axios来进行异步请求，使用钩子函数来触发。</p>
<p>神奇！</p>
<h3 id="4-程序优化">4. 程序优化</h3>
<blockquote>
<p>当前程序问题：URL是写死的不方便维护</p>
</blockquote>
<h4 id="1-代码分析">1. 代码分析</h4>
<ol type="1">
<li><p>改进方案1</p>
<p>将异步请求提取到一个工具类中，这样就可以根据这个工具类来获取信息了</p>
<div class="note info flat"><p>这里定义了timout，是响应保留时间</p>
</div>

<p>太短了的话后端打断点会报错。</p></li>
<li><p>改进方案2</p>
<p>将与服务器进行异步请求交互的逻辑封装在一个单独的api中</p>
<p><img src="https://bu.dusays.com/2025/05/27/6835b0b46499c.png" alt="image-20250527203146290"></p>
<p>懂了懂了，全都懂了。我终于可以看懂别人的前端代码了</p></li>
</ol>
<h4 id="2-具体代码">2. 具体代码</h4>
<p><code>src/api/dept.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入封装好的axios实例（包含基础配置和响应拦截器）</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 查询全部部门数据信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise</span>&#125; 返回Promise对象，成功时返回部门列表数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * queryAllApi().then(data =&gt; &#123;</span></span><br><span class="line"><span class="comment"> *   console.log(&#x27;部门列表:&#x27;, data);</span></span><br><span class="line"><span class="comment"> * &#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="comment"> *   console.error(&#x27;获取部门列表失败:&#x27;, error);</span></span><br><span class="line"><span class="comment"> * &#125;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryAllApi</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 发起GET请求，路径为基础URL（/api）拼接/depts，即/api/depts</span></span><br><span class="line">  <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/depts&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>src/utils/request.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 创建axios实例对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">config</span> - axios实例配置对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">string</span>&#125; <span class="variable">baseURL</span> - 基础URL，用于拼接请求地址（示例：&#x27;/api&#x27;会自动添加到所有请求URL前面）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">number</span>&#125; <span class="variable">timeout</span> - 请求超时时间（单位：毫秒），超过600000毫秒未响应则请求失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://m1.apifoxmock.com/m1/6421010-6118327-default&#x27;</span>, <span class="comment">// 所有请求的基础路径，可根据后端接口地址统一配置</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">600000</span> <span class="comment">// 请求超时时间设置为10分钟（600000ms）</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> axios响应拦截器（处理响应数据的统一入口）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; response =&gt; response.data - 成功响应处理函数</span></span><br><span class="line"><span class="comment"> *   - 作用：对所有接口返回的response对象进行预处理</span></span><br><span class="line"><span class="comment"> *   - 常规操作：提取response中的data字段（后端返回的业务数据通常存储在此）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; error =&gt; Promise.reject(error) - 失败响应处理函数</span></span><br><span class="line"><span class="comment"> *   - 作用：统一处理请求失败的情况（如网络错误、超时、后端异常等）</span></span><br><span class="line"><span class="comment"> *   - 常规操作：将错误对象包装为Promise.reject以便上层调用捕获</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123; <span class="comment">// 响应成功时的回调函数</span></span><br><span class="line">    <span class="comment">// 这里默认返回response中的data字段，通常后端返回的结构为&#123;code: xxx, data: xxx, message: xxx&#125;</span></span><br><span class="line">    <span class="comment">// 可根据实际需求进一步处理（如统一错误码判断、数据格式化等）</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="comment">// 响应失败时的回调函数</span></span><br><span class="line">    <span class="comment">// 对请求错误进行统一处理（如记录错误日志、提示用户、重试机制等）</span></span><br><span class="line">    <span class="comment">// 此处直接返回 rejected 状态的Promise，以便调用方通过.catch()捕获错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出axios实例对象，供其他模块调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>

<p><code>src/views/dept/index.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref ,onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; queryAllApi&#125; <span class="keyword">from</span> <span class="string">&quot;@/api/dept&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义钩子函数，当页面加载完毕就会调用这函数，然后这个函数就会调用serch方法，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 就会调用链接，将获取的值赋给deptList，然后就在页面显示了</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">//生命周期</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 查询部门列表</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> <span class="title function_">search</span>=<span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123; </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注释掉旧代码  </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  const result = await axios.get(&quot;https://m1.apifoxmock.com/m1/6421010-6118327-default/depts&quot;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  // 如果code为1就显示数据，否则提示错误信息</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  if(result.data.code == 1) &#123; //布尔类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    deptList.value = result.data.data;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    this.$message.error(result.data.message);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">queryAllApi</span>();</span></span><br><span class="line"><span class="language-javascript">    deptList.<span class="property">value</span> = result.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> deptList = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页面正常显示数据，注意是在src目录下新建包，不是在views里面</p>
<h4 id="3-反向代理">3. 反向代理</h4>
<p>卧槽这几集全是干货啊，好爽好爽好好爽</p>
<p>经过上面的优化基础功能实现了，不过还没有解决跨域问题，以及URL在src中写死的问题，修改request.js的访问路径为<code>/api</code></p>
<p>同时修改vite.config.js代码解决跨域问题，访问后端8080路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span>; <span class="comment">// 导入Node.js的URL处理模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>; <span class="comment">// 导入Vite的配置定义函数</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>; <span class="comment">// 导入Vue插件，支持Vue单文件组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Vite项目配置文件</span></span><br><span class="line"><span class="comment"> * 配置参考：https://vitejs.dev/config/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// 插件配置（增强Vite功能）</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(), <span class="comment">// 启用Vue 3单文件组件支持</span></span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 路径解析配置（处理模块导入路径）</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="comment">// 配置别名 &#x27;@&#x27; 指向项目的src目录</span></span><br><span class="line">      <span class="comment">// 例如：import App from &#x27;@/App.vue&#x27; 等价于 import App from &#x27;./src/App.vue&#x27;</span></span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 开发服务器配置（仅在开发环境生效）</span></span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置代理服务器（解决跨域问题）</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 所有以/api开头的请求路径都会被代理</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="comment">// 目标服务器地址（后端API地址）</span></span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 不验证SSL证书</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 修改请求头中的Origin字段为目标服务器地址</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>), <span class="comment">// 重写请求路径，去除/api前缀</span></span><br><span class="line">        <span class="comment">// 例如：/api/users =&gt; http://localhost:8080/users</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这一段相当于固定代码</p>
<p>完成以上步骤请打开你的tlias后端尝试前后端联调吧🐱🐱🐱</p>
<p>要注释掉有关后端拦截器的代码，否则会报令牌校验错误</p>
<p>我这边前后端联调没有问题</p>
<p><img src="https://bu.dusays.com/2025/05/27/6835c0bbd7171.png" alt="image-20250527214008743"></p>
<p>呜呜呜谢谢老师，谢谢黑马。感觉离开发又近了一步</p>
<h2 id="四部门管理-新增">四、部门管理-新增</h2>
<h3 id="1-页面原型">1. 页面原型</h3>
<p><img src="https://bu.dusays.com/2025/05/28/6836c46130bd5.png" alt="image-20250528160750563"></p>
<p><img src="https://bu.dusays.com/2025/05/28/6836c4bea7896.png" alt="image-20250528160931086"></p>
<p>新增时点击会调用后端的新增操作</p>
<p>需要一个Dialog对话框组件和一个From表单组件</p>
<h3 id="2-新增部门">2. 新增部门</h3>
<h4 id="1-定义dialog">1. 定义dialog</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- Dialog对话框组件 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 为了让修改部门也可以复用这个Dialog，所以要将标题动态绑定，所以要使用插槽,注意这里需要加：插槽的标签是title，所以这里要写title，而不是fromTitle --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogFormVisible&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;fromTitle&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;80&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;dept.name&quot;</span>  /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--@click=&quot;dialogFormVisible = false&quot;是当点击按钮被点击的时候，dialogFormVisible被设置为false，即关闭对话框  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- @click=&quot;save&quot;是当点击按钮被点击的时候，调用save方法，即保存数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;save&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里需要注意的是：</p>
<ul>
<li>当我们点击新增按钮时，需要将对话框显示的调用出来。因此需要在新增按钮上添加点击事件，当点击时将按钮显示出来。然后在页面点击取消按钮会隐藏对话框</li>
<li>然后需要在保存按钮上添加保存方法。当点击时会调用后端的插入方法</li>
<li>为了我们的Dialog对话框能实现复用效果。将对话框的标题设置为了动态绑定效果，当点击新增时，将标题渲染为新增部门</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dialog对话框组件</span></span><br><span class="line"><span class="keyword">const</span> dialogFormVisible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 部门名称</span></span><br><span class="line"><span class="keyword">const</span> dept = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 动态表单标题，当新增时候标题为新增部门，否则为修改部门</span></span><br><span class="line"><span class="keyword">const</span> fromTitle = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 保存按钮</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">save</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门新增按钮</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addDept</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 先将表单显示出来</span></span><br><span class="line">  dialogFormVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 然后将表单标题设置为新增部门</span></span><br><span class="line">  fromTitle.<span class="property">value</span> = <span class="string">&#x27;新增部门&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-导入消息组件">2. 导入消息组件</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line">---</span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">if</span> (result.<span class="property">code</span> ) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 关闭对话框</span></span><br><span class="line">    dialogFormVisible.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询最新数据</span></span><br><span class="line">    <span class="title function_">search</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-初始代码功能完成未完成表单校验功能">3.
初始代码功能完成(未完成表单校验功能)</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dialog对话框组件</span></span><br><span class="line"><span class="keyword">const</span> dialogFormVisible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 部门名称</span></span><br><span class="line"><span class="keyword">const</span> dept = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 动态表单标题，当新增时候标题为新增部门，否则为修改部门</span></span><br><span class="line"><span class="keyword">const</span> fromTitle = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 保存按钮</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">save</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 发送请求，保存数据-调用接口，并且将部门数据传入给api接口，然后api在将数据使用post传入后端</span></span><br><span class="line">  <span class="comment">// await 是 await 是一个关键字，用来等待一个 Promise 对象。当发送请求的时候，await 会等待接口返回数据，然后返回数据</span></span><br><span class="line">  <span class="comment">// 否则会直接执行完毕用户看不到交互结果</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">addApi</span>(dept.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 做一个判断，如果返回的数据是成功，那么就提示用户，并且将表单清空</span></span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">code</span> ) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 关闭对话框</span></span><br><span class="line">    dialogFormVisible.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询最新数据</span></span><br><span class="line">    <span class="title function_">search</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门新增按钮</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addDept</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 先将表单显示出来</span></span><br><span class="line">  dialogFormVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 然后将表单标题设置为新增部门</span></span><br><span class="line">  fromTitle.<span class="property">value</span> = <span class="string">&#x27;新增部门&#x27;</span>;</span><br><span class="line">  <span class="comment">// 重置表单</span></span><br><span class="line">  dept.<span class="property">value</span> = &#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>emm 简单来描述一下吧</p>
<ul>
<li>首先我们在Ele上面copy了代码过来，这时候我们是不是要声明这个组件，将值默认设为false（默认关闭的）</li>
<li>那么我们怎么才能开启这个对话框呢？聪明的你肯定想到了。哎我们在点击新增部门时把对话框显示不就好了</li>
<li>那么这样我们是不是要在新增部门按钮上添加一个点击方法呀。定义一个新增部门的方法。当用户点击新增部门时将对话框的值设为true(这样就能显示对话框了)</li>
<li>同时呢我们还需要声明这个部门模块。<code>&lt;el-form :model="dept"&gt;</code></li>
<li>这时候当我们想要复用dialog表单的话，我们就要将标题设为动态（不再赘述）</li>
<li>部门名称填写完毕，这时候当我们点击保存按钮是不是要发送数据到后端？</li>
<li>使用我们就要在api.js里面定义后端方法。定义完成后再引用。</li>
<li>声明这个保存方法，然后使用<code>await</code>修饰这个方法，并且将我们部门名称这个值作为参数传入后端。当后端返回码为1时，我们就使用导入的消息通知给出提示插入成功，同时关闭对话框。否则给出失败提示（失败提示是后端返回的提示）</li>
<li>然后需要清空表单</li>
</ul>
<h4 id="4-新增优化">4. 新增优化</h4>
<p><img src="https://bu.dusays.com/2025/05/28/6836e6946cb83.png" alt="image-20250528183353157"></p>
<h5 id="1-效果展示">1. 效果展示</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单校验相关</span></span><br><span class="line"><span class="keyword">const</span> rules = <span class="title function_">ref</span>(&#123; </span><br><span class="line">  <span class="attr">name</span>: [</span><br><span class="line">    <span class="comment">// required: true部门名称必填，trigger: &quot;blur&quot; 表示失去焦点时触发校验</span></span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入部门名称&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&quot;长度在 2 到 10 个字符&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后指定校验规则，然后将prop设置为里面具体值</p>
<h5 id="2-表单规则校验拦截">2. 表单规则校验拦截</h5>
<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊我直接战吼起手…太几把折磨人了</p>
<p>好的现在我们一起来看一下这个校验规则上一条我们完成了表单校验，不过有个bug，就是虽然页面可以校验但是不能拦截，当我们点击保存时还是可以插入信息。下面我们来解决这个问题</p>
<ul>
<li>在表单上挂载<code>ref="deptFormRef"</code></li>
<li>然后声明这个变量，这样我们就可以对这个表单进行操作了</li>
<li>当我们表单为空时直接返回</li>
<li>不为空就调用这个验证规则</li>
<li>从我的表述中我可以发现我这一块没有听懂</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; queryAllApi, addApi &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/dept&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义钩子函数，当页面加载完毕就会调用这函数，然后这个函数就会调用serch方法，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 就会调用链接，将获取的值赋给deptList，然后就在页面显示了</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">//生命周期</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 查询部门列表</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">search</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注释掉旧代码  </span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  const result = await axios.get(&quot;https://m1.apifoxmock.com/m1/6421010-6118327-default/depts&quot;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  // 如果code为1就显示数据，否则提示错误信息</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  if(result.data.code == 1) &#123; //布尔类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//    deptList.value = result.data.data;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//    this.$message.error(result.data.message);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">queryAllApi</span>();</span></span><br><span class="line"><span class="language-javascript">  deptList.<span class="property">value</span> = result.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> deptList = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Dialog对话框组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogFormVisible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 部门名称</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dept = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 动态表单标题，当新增时候标题为新增部门，否则为修改部门</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> fromTitle = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 保存按钮</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">save</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 进行表单校验</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!deptFormRef.<span class="property">value</span>) &#123; <span class="keyword">return</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  deptFormRef.<span class="property">value</span>.<span class="title function_">validate</span>(<span class="title function_">async</span>(valid) =&gt; &#123; <span class="comment">// valid表示是否通过校验</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送请求，保存数据-调用接口，并且将部门数据传入给api接口，然后api在将数据使用post传入后端</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// await 是 await 是一个关键字，用来等待一个 Promise 对象。当发送请求的时候，await 会等待接口返回数据，然后返回数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 否则会直接执行完毕用户看不到交互结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">addApi</span>(dept.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 做一个判断，如果返回的数据是成功，那么就提示用户，并且将表单清空</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (result.<span class="property">code</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 关闭对话框</span></span></span><br><span class="line"><span class="language-javascript">        dialogFormVisible.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 查询最新数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;表单校验未通过&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 部门新增按钮</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addDept</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 先将表单显示出来</span></span></span><br><span class="line"><span class="language-javascript">  dialogFormVisible.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 然后将表单标题设置为新增部门</span></span></span><br><span class="line"><span class="language-javascript">  fromTitle.<span class="property">value</span> = <span class="string">&#x27;新增部门&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 重置表单</span></span></span><br><span class="line"><span class="language-javascript">  dept.<span class="property">value</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  清空表单校验</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(deptFormRef.<span class="property">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    deptFormRef.<span class="property">value</span>.<span class="title function_">resetFields</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 表单校验相关</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rules = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: [</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// required: true部门名称必填，trigger: &quot;blur&quot; 表示失去焦点时触发校验</span></span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入部门名称&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&quot;长度在 2 到 10 个字符&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  ],</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义响应式对象-用于校验表单数据（不通过不能提交）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> deptFormRef = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定点击事件，点击按钮，dialogFormVisible被设置为true，即打开对话框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addDept&quot;</span>&gt;</span>+新增部门<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 表格区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;deptList&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updateTime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Edit</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>编辑</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Delete</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>删除</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Dialog对话框组件 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 为了让修改部门也可以复用这个Dialog，所以要将标题动态绑定，所以要使用插槽,注意这里需要加：插槽的标签是title，所以这里要写title，而不是fromTitle --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogFormVisible&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;fromTitle&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;deptFormRef&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ref=&quot;deptFormRef&quot;通过这个响应式对象我们就能引用到表单数据了 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;dept.name&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--@click=&quot;dialogFormVisible = false&quot;是当点击按钮被点击的时候，dialogFormVisible被设置为false，即关闭对话框  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- @click=&quot;save&quot;是当点击按钮被点击的时候，调用save方法，即保存数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;save&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 距离上下10px 左右0px */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<h2 id="五部门管理-修改部门">五、部门管理-修改部门</h2>
<h3 id="1-页面原型-1">1. 页面原型</h3>
<p><img src="https://bu.dusays.com/2025/05/29/68380bf88c4bd.png" alt="image-20250529152536660"></p>
<ul>
<li>点击编辑按钮，根据ID进行查询，弹出对话框，完成页面回显展示。（查询回显)</li>
<li>点击确定按钮，保存修改后的数据，完成数据更新操作。（保存修改)</li>
</ul>
<h3 id="2-分析-查询回显">2. 分析-查询回显</h3>
<ul>
<li><p>当我们点击编辑按钮时是不是就要弹Dialog出对话框，那么我们就要先绑定点击事件。调用绑定事件时我们是不是要传数据，将我们部门id传给后端(通过scpore.row就拿到了这一行的数据在.id就拿到了这个id数据)</p></li>
<li><p>既然我们定义了点击事件我们是不是要声明</p></li>
<li><p>调用result将参数id传入进去，并且添加判断</p></li>
<li><p>需要展开对话框，设置标题，回显数据，重置表单校验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编辑操作-接收部门id</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">edit</span> = <span class="keyword">async</span> (<span class="params">id</span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 这样就调用了api中的根据id查询部门信息的接口</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">queryByIdApi</span>(id);</span><br><span class="line">  <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">    <span class="comment">// 展示对话框</span></span><br><span class="line">    dialogFormVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 设置表单标题为编辑部门</span></span><br><span class="line">    fromTitle.<span class="property">value</span> = <span class="string">&#x27;编辑部门&#x27;</span>;</span><br><span class="line">    <span class="comment">// 将部门数据设置给dept对象（将数据回显到表单输入框中）</span></span><br><span class="line">    dept.<span class="property">value</span> = result.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 重置表单校验</span></span><br><span class="line">    <span class="keyword">if</span>(deptFormRef.<span class="property">value</span>)&#123;</span><br><span class="line">      deptFormRef.<span class="property">value</span>.<span class="title function_">resetFields</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-分析-修改">3. 分析-修改</h3>
<p>当我们修改点击Dialog对话框确定时是不是要保存我们修改的信息。那么我们是不是要在确定按钮上添加点击事件。这时候就发现
我们已经在确定按钮上绑定点击事件了。那么什么时候我们需要修改方法，什么时候我们需要保存方法呢？就是当我们页面中有这个数据那我们就用修改方法，当页面没有这个数据就为保存方法</p>
<p>基于这个思路我们就要修改保存按钮中的代码</p>
<p>具体代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">save</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 进行表单校验</span></span><br><span class="line">  <span class="keyword">if</span> (!deptFormRef.<span class="property">value</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  deptFormRef.<span class="property">value</span>.<span class="title function_">validate</span>(<span class="title function_">async</span>(valid) =&gt; &#123; <span class="comment">// valid表示是否通过校验</span></span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 发送请求，保存数据-调用接口，并且将部门数据传入给api接口，然后api在将数据使用post传入后端</span></span><br><span class="line">      <span class="comment">// await 是 await 是一个关键字，用来等待一个 Promise 对象。当发送请求的时候，await 会等待接口返回数据，然后返回数据</span></span><br><span class="line">      <span class="comment">// 否则会直接执行完毕用户看不到交互结果</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> result;<span class="comment">// const不允许修改</span></span><br><span class="line">      <span class="comment">// 添加保存与修改的校验，如果id存在，那么就是修改，否则就是新增</span></span><br><span class="line">      <span class="keyword">if</span> (dept.<span class="property">value</span>.<span class="property">id</span>)&#123; <span class="comment">// 修改</span></span><br><span class="line">       result= <span class="keyword">await</span> <span class="title function_">updateApi</span>(dept.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; <span class="comment">// 新增</span></span><br><span class="line">       result = <span class="keyword">await</span> <span class="title function_">addApi</span>(dept.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 做一个判断，如果返回的数据是成功，那么就提示用户，并且将表单清空</span></span><br><span class="line">      <span class="keyword">if</span> (result.<span class="property">code</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        dialogFormVisible.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询最新数据</span></span><br><span class="line">        <span class="title function_">search</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;表单校验未通过&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对比 <img src="https://bu.dusays.com/2025/05/29/6838257c1f850.png" alt="image-20250529171435405"></p>
<p>就是根据这个id进行判断，然后调用不同的api</p>
<p>学到了</p>
<h2 id="六部门管理-删除部门">六、部门管理-删除部门</h2>
<h3 id="1-页面原型-2">1. 页面原型</h3>
<p><img src="https://bu.dusays.com/2025/05/29/68382803aa8a2.png" alt="image-20250529172523041"></p>
<h3 id="2-具体思路代码">2. 具体思路代码</h3>
<p>删除时我们前端是要给出信息提示是否真的删除，当点击确定时调用api中的删除api，向后端发送删除信息即可（我的前端后端还感觉好混乱，我写前端还在想是咋在前端写的删除功能😵）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delById</span> = <span class="keyword">async</span> (<span class="params">id</span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 弹框提示用户是否删除</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;此操作将永久删除该部门, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123; <span class="comment">// 确认</span></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">deleteApi</span>(id);</span><br><span class="line">   <span class="comment">// 如果删除成功，就提示用户删除成功，并且将dept</span></span><br><span class="line">   <span class="keyword">if</span>(result.<span class="property">code</span>)&#123; <span class="comment">//如果删除成功给出信息，并且刷新页面</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">    <span class="title function_">search</span>();</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;<span class="comment">//删除失败给出信息</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 取消</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">info</span>(<span class="string">&#x27;已取消删除&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>给删除按钮绑定点击事件，要通过scope获取这一行的id。</p>
<p>然后就是一些信息提示代码。仔细查看就会明白了，这里不再赘述</p>
<h2 id="七员工管理-员工查询">七、员工管理-员工查询</h2>
<h3 id="1页面原型">1.页面原型</h3>
<p><img src="https://bu.dusays.com/2025/06/01/683b9d7596e31.png" alt="image-20250601082308695"></p>
<h3 id="2-接口文档">2. 接口文档</h3>
<p>请求参数</p>
<p><img src="https://bu.dusays.com/2025/06/01/683b9e74ce924.png" alt="image-20250601082731925"></p>
<p>响应数据</p>
<p><img src="https://bu.dusays.com/2025/06/01/683b9e974e4bf.png" alt="image-20250601082806444"></p>
<h3 id="3-搜索栏制作">3. 搜索栏制作</h3>
<h4 id="1-基础页面设置">1. 基础页面设置</h4>
<details class="folding-tag" red><summary> 遇到的错误: 性别不显示 </summary>
              <div class="content">
              <p><img src="https://bu.dusays.com/2025/06/01/683c1b372cc1d.png" alt="image-20250601171950560"></p><p>当我第一次测试代码时我发现我的性别框无法显示</p><p>奶奶的，找了好长时间为啥，然后发现把官网下面的CSS代码拷过来就解决了</p><p>烤嫩羊！</p>
              </div>
            </details>

<div class="note info no-icon flat"><p>注意时间要规定格式 value-format=“YYYY-MM-DD”</p>
</div>

<p>整体流程就是抄代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 搜索表单对象-根据姓名，年龄，日期查询</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> searchEmp = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">gender</span>: <span class="literal">undefined</span>, <span class="attr">date</span>: [] &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 查询员工列表的函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">search</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清空函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将表单值置为空，然后再重新查询一次</span></span></span><br><span class="line"><span class="language-javascript">  searchEmp.<span class="property">value</span>=&#123;<span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">gender</span>: <span class="literal">undefined</span>, <span class="attr">date</span>: []&#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 制作搜索表单 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上栏搜索框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;searchEmp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchEmp.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工姓名&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;searchEmp.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择男女&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职时间&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;searchEmp.date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span> <span class="attr">range-separator</span>=<span class="string">&quot;到&quot;</span> <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span> <span class="attr">:size</span>=<span class="string">&quot;size&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;search&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attr">--el-input-width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo-form-inline</span> <span class="selector-class">.el-select</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attr">--el-select-width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-优化data数据块事件监听">2. 优化data数据块（事件监听）</h4>
<p>上一模块中，我们完成了页面的基本功能。不过还有一个功能需要解决，就是我们接口文档中的开始时间结束时间为begin和end，而我们的对象中定义的为数组。我们该怎么把data中的数组中的值给变成begin和end</p>
<p><strong>方案一</strong>：当点击查询按钮时，获取数组中的值，将第一个赋值给begin，第二个赋值给end</p>
<p><strong>方案二</strong>：在对象中增加两个属性（begin，end）。如果data数组中的数值发生变化（初始为null）就将第一个值给begin，第二个给end</p>
<details class="folding-tag" blue><summary> 知识点：Watch监听 </summary>
              <div class="content">
              <p>作用:侦听一个或多个响应式<strong>数据源</strong>，并在数据源变化时调用传入的<strong>回调函数</strong>。</p><p>用法:</p><ul><li>导入watch函数</li><li>执行watch函数，传入要侦听的响应式数据源（ref对象）和回调函数;</li></ul><p><img src="https://bu.dusays.com/2025/06/01/683c284e2af5e.png" alt="image-20250601181541922"></p><p>第一个参数为数据源，第二个参数就是回调函数，回调函数可以传递两个值</p><p>第一个参数<code>newVal</code>代表响应式数据变化前的数据，第二个<code>oldVal</code>代表变化之后的值</p><p>那么这样我们就可以通过watch监听，来监听响应式数据a的变化。一旦a发生变化就会调用后面的函数</p><ul><li>2 监听所有属性变化</li></ul><p>当我们要监听对象的全部属性时可以使用深度监听在方法末尾添加,{deep:true}</p><p>表示对象的任意属性变化都会执行后面的函数</p><p><img src="https://bu.dusays.com/2025/06/01/683c454fc9518.png" alt="image-20250601201926124"></p><ul><li>3 监听单个对象</li></ul><p><img src="https://bu.dusays.com/2025/06/01/683c485f66cdf.png" alt="image-20250601203231403"></p>
              </div>
            </details>

<h5 id="使用watch监听函数监听日期">使用watch监听函数监听日期</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -------------watch监听----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听data属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>searchEmp.<span class="property">value</span>.<span class="property">date</span>,<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(newVal.<span class="property">length</span> == <span class="number">2</span>)&#123;</span><br><span class="line">    searchEmp.<span class="property">value</span>.<span class="property">begin</span>=newVal[<span class="number">0</span>];</span><br><span class="line">    searchEmp.<span class="property">value</span>.<span class="property">end</span>=newVal[<span class="number">1</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    searchEmp.<span class="property">value</span>.<span class="property">begin</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    searchEmp.<span class="property">value</span>.<span class="property">end</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>监听单个对象：监听serchEmp的值里面的数据，当里面数据发生变化时newVal就会被调用</p>
<p>那么当日期发生变化时我们的newVal就会变化。那么就将newVal里面的第一个值给begin，第二个给newVal</p>
<p><img src="https://bu.dusays.com/2025/06/01/683c4c46a591f.png" alt="image-20250601204910251"></p>
<p>这样我们的开始结束就获取到了值</p>
<h3 id="4表单制作详细版">4.表单制作（详细版）</h3>
<blockquote>
<p>为了让我下次写表单时有个参考，这里我会写的很详细</p>
</blockquote>
<ol type="1">
<li>第一步：在官网找到表单项下载源码拷贝到代码里，最好包裹一个div里面</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格区域 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Address&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>初始代码长这样</p>
<ol start="2" type="1">
<li>第二步：table里面的data里面的<code>tableData</code>代表表格数据来源。那么我们这里就声明一个empList，代表表格的数据来源。那么这里就将data里面的数据改一改名字。然后去声明对象。这里要考虑：因为要传多个值，所以要声明数组，然后去查看接口文档看看具体是哪些的值</li>
</ol>
<p><img src="https://bu.dusays.com/2025/06/01/683c56a16f2ad.png" alt="image-20250601213320967"></p>
<p>根据这个文档我们来定义数组函数，将需要的值作为参数(里面的值在后面要删除，这里只是示例用于测试的数据，后面查询时需要将里面替换为后端传入到数据)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 员工列表数据</span></span><br><span class="line"><span class="keyword">const</span> empList=<span class="title function_">ref</span>([</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;job&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;salary&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;entryDate&quot;</span>: <span class="string">&quot;2019-08-24&quot;</span>,</span><br><span class="line">        <span class="string">&quot;deptId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;deptName&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2019-08-24T14:15:22.123Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2019-08-24T14:15:22.123Z&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<ol start="3" type="1">
<li><p>然后根据参数我们去完善表格的列元素</p>
<p>prop是元素名称，label是表格名称。必要时要使用自定义表格。使用<code>align="center"</code>让元素居中显示。</p>
<p>删除修改按钮使用的是自定义列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;所属部门&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entryDate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updateTime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Edit</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Delete</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>删除</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/06/02/683d16469aa19.png" alt="image-20250602111053403"></p></li>
<li><p>在表头添加复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用自定义列模板优化性别展示框</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span>  <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">       &#123;&#123; scope.row.gender ==1?&#x27;男&#x27;:&#x27;女&#x27;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>scope.row</code>获取一行中的性别，当等于1时显示男，否则显示女</p>
<p><img src="https://bu.dusays.com/2025/06/02/683d1ca3acdd5.png" alt="image-20250602113810005"></p></li>
<li><p>使用自定义列模板完善图像处理</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span>  <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;scope.row.image&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>img</code>标签，然后别忘了添加高度，不然会很大</p>
<p><img src="https://bu.dusays.com/2025/06/02/683d1e371394e.png" alt="image-20250602114453082"></p></li>
<li><p>使用自定义模板定义职位</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;scope.row.job==1&quot;</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job==2&quot;</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job==3&quot;</span>&gt;</span>学工主管<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job==4&quot;</span>&gt;</span>教研主管<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;scope.row.job==5&quot;</span>&gt;</span>咨询师<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/06/02/683d21a592998.png" alt="image-20250602115931820"></p></li>
</ol>
<h3 id="5-分页条制作">5. 分页条制作</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下方分页条 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model:current-page</span>=<span class="string">&quot;currentPage&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[5,10, 20, 30, 50,75,100]&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:background</span>=<span class="string">&quot;background&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span> </span></span><br><span class="line"><span class="tag">      @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页操作相关数据模型</span></span><br><span class="line"><span class="keyword">const</span> currentPage = <span class="title function_">ref</span>(<span class="number">1</span>) <span class="comment">// 页码</span></span><br><span class="line"><span class="keyword">const</span> pageSize = <span class="title function_">ref</span>(<span class="number">10</span>) <span class="comment">// 默认每页展示的记录数</span></span><br><span class="line"><span class="keyword">const</span> background = <span class="title function_">ref</span>(<span class="literal">true</span>) <span class="comment">//背景色（是否）</span></span><br><span class="line"><span class="keyword">const</span> total =<span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 总记录数-后端传入的</span></span><br><span class="line"><span class="comment">// 每页展示记录数发生变化时会触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSizeChange</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页展示<span class="subst">$&#123;val&#125;</span>条记录 `</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页码发生变化时会触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCurrentChange</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页码: <span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们的页面布局就完成了</p>
<h3 id="6-列表查询">6. 列表查询</h3>
<h4 id="1-查询功能页面分析">1. 查询功能页面分析</h4>
<p>我们要实现查询就要先分析有哪些功能需要查询</p>
<p>首先进入页面需要查询，根据条件进行查询，清空时需要查询，每页记录数时需要查询页码切换时需要查询</p>
<h4 id="2-功能书写">2. 功能书写</h4>
<ol type="1">
<li><p>我们要写查询功能时是不是要向后端传输请求。那么我们就要定义api了是不是。那么打开api文件夹新建<code>emp.js</code>的api,在里面来写查询相关请求。根据请求参数模板来定义请求方式</p>
<p><img src="https://bu.dusays.com/2025/06/02/683d375970655.png" alt="image-20250602133207916"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入封装好的axios实例（包含基础配置和响应拦截器）</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询员工列表数据</span></span><br><span class="line"><span class="comment">// 定义分页查询-那么我们要传递条件以及分页参数</span></span><br><span class="line"><span class="comment">// 请求示例/emps?name=张&amp;gender=1&amp;begin=2007-09-e1&amp;end=2022-09-e1&amp;page=1&amp;pageSize=10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryPageApi</span> =(<span class="params">name,gender,begin,end,page,pageSize</span>)=&gt; </span><br><span class="line">    request.<span class="title function_">get</span>(<span class="string">`/emps?name=<span class="subst">$&#123;name&#125;</span>&amp;gender=<span class="subst">$&#123;gender&#125;</span>&amp;begin=<span class="subst">$&#123;begin&#125;</span>&amp;end=<span class="subst">$&#123;end&#125;</span>&amp;page=<span class="subst">$&#123;page&#125;</span>&amp;pageSize=<span class="subst">$&#123;pageSize&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增员工</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据id查询部门信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  修改部门信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除部门信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义完请求之后需要在<code>index.vue</code>里面引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;queryPageApi&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/emp&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询员工方法</p>
<p>引用之后我们就要在声明search方法。在search方法里面声明一个result方法，使用await来修饰，并且将参数声明进去，将表单里面的数据传入请求路径中</p>
<p>当返回值结果为200时：我们要将返回值结果中的数据传入到表格对象的值里面去。并且我们还需要将分页相关的功能动态传入分页相关内容中去</p>
<p>最后将声明的empList里面的数据删除掉即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询员工列表的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">search</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> result =<span class="keyword">await</span> <span class="title function_">queryPageApi</span>(searchEmp.<span class="property">value</span>.<span class="property">name</span>,searchEmp.<span class="property">value</span>.<span class="property">gender</span>,</span><br><span class="line">                         searchEmp.<span class="property">value</span>.<span class="property">begin</span>,searchEmp.<span class="property">value</span>.<span class="property">end</span>,currentPage.<span class="property">value</span>,pageSize.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">    empList.<span class="property">value</span>=result.<span class="property">data</span>.<span class="property">rows</span>;</span><br><span class="line">    total.<span class="property">value</span>=result.<span class="property">data</span>.<span class="property">total</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 员工列表数据</span></span><br><span class="line"><span class="keyword">const</span> empList = <span class="title function_">ref</span>([])</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/06/02/683d69b0a7df5.png" alt="image-20250602170654354"></p></li>
<li><p>声明钩子函数，这样在页面加载完毕时就会自动触发搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 钩子函数</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">search</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在页面与记录数发生变化时查询数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每页展示记录数发生变化时会触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSizeChange</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">search</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页码发生变化时会触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCurrentChange</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">search</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样查询功能基本没有问题了</p></li>
</ol>
<h2 id="八-员工管理-新增员工">八、 员工管理-新增员工</h2>
<h3 id="1-页面布局">1. 页面布局</h3>
<p><img src="https://bu.dusays.com/2025/06/02/683d6f2f72053.png" alt="image-20250602173022378"></p>
<h3 id="2-接口文档-1">2. 接口文档</h3>
<p><img src="https://bu.dusays.com/2025/06/02/683d6f785a45d.png" alt="image-20250602173133916"></p>
<p>请求方式为post，路径为<code>/emps</code></p>
<h3 id="3-dialog-对话框">3. Dialog 对话框</h3>
<h4 id="1-页面基本布局">1. 页面基本布局</h4>
<p>新增员工的对话框与修改员工的对话框可以共用</p>
<p>这里老师选择Copy准备好的代码，为了锻炼自己我决定自己敲一下</p>
<details class="folding-tag" green><summary> 手敲对话框历程 </summary>
              <div class="content">
              <p>折磨自己干啥，我是大傻逼，我再也不装逼手敲了</p>
              </div>
            </details>

<p>我抄我抄我抄</p>
<p>完整代码示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//新增/修改表单</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> employee = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">phone</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">job</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">salary</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">deptId</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">entryDate</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">exprList</span>: []</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 控制弹窗</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogTitle = <span class="title function_">ref</span>(<span class="string">&#x27;新增员工&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//文件上传</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 图片上传成功后触发</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleAvatarSuccess</span> = (<span class="params">response</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 文件上传之前触发</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">beforeAvatarUpload</span> = (<span class="params">rawFile</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (rawFile.<span class="property">type</span> !== <span class="string">&#x27;image/jpeg&#x27;</span> &amp;&amp; rawFile.<span class="property">type</span> !== <span class="string">&#x27;image/png&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;只支持上传图片&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawFile.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &gt; <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;只能上传10M以内图片&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ...... 省略 ...... --&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">&lt;!-- 新增/修改员工的对话框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogVisible&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;dialogTitle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本信息 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工用户名，2-20个字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工姓名，2-10个字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 第二行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择性别&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;手机号&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.phone&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 第三行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.job&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择职位&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;班主任&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;讲师&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;学工主管&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;教研主管&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;咨询师&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;薪资&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.salary&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工薪资&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 第四行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;所属部门&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.deptId&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择部门&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;研发部&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;市场部&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.entryDate&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span> <span class="attr">format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 第五行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">action</span>=<span class="string">&quot;/api/upload&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:before-upload</span>=<span class="string">&quot;beforeAvatarUpload&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;employee.image&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;employee.image&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader-icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Plus</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         </span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 工作经历 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第六行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;工作经历&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span>+ 添加工作经历<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">&lt;!-- 第七行 ...  工作经历 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;时间&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span> <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span> <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span> <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span> <span class="attr">format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;公司&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;60px&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入公司名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;60px&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入职位&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> &gt;</span>- 删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">      <span class="comment">&lt;!-- 底部按钮 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar-uploader</span> <span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">78px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">78px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar-uploader</span> <span class="selector-class">.el-upload</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar-uploader</span> <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">78px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">78px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 添加灰色的虚线边框 */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样我们的对话框组件就完成了</p>
<h4 id="2-显示对话框">2. 显示对话框</h4>
<p>完成了我们的表单项目是不是要当点击添加员工时要显示对话框</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明添加员工的箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addEmp</span> =  (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  dialogVisible.<span class="property">value</span>=<span class="literal">true</span>;</span><br><span class="line">  dialogTitle.<span class="property">value</span>=<span class="string">&#x27;新增员工&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;addEmp&quot;</span>&gt;+新增员工&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/06/03/683e5eb8024a0.png" alt="image-20250603103213889"></p>
<h4 id="3表单解析">3.表单解析</h4>
<blockquote>
<p>一行里面是怎么只显示两列的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工用户名，2-20个字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工姓名，2-10个字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>el-row</code>布局方式，代表一行，里面有两个<code>el-col</code>代表有两列</p>
<p><code>el-col :span="12"</code>代表一行所占的宽度。总计为<code>24</code>块。这里的两个代表是一行2个</p>
<p><code>gutter="20"</code>代表分栏间隔</p>
<h3 id="4页面布局优化性别职位所属部门">4.页面布局优化（性别，职位，所属部门）</h3>
<blockquote>
<p>性别，职位，所属部门这些都不应该是页面写死的，性别与职位可以单独定义出来，所属部门由后端传入。</p>
<p>性别与职位是规定死的，而所属部门是动态的可以通过添加部门动态添加），因此部门相关要在后端处理</p>
</blockquote>
<h5 id="1-性别与职位">1. 性别与职位</h5>
<blockquote>
<p>在<code>index.vue</code>中定义性别与职位的元数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --------元数据相关----------</span></span><br><span class="line"><span class="comment">//职位列表数据</span></span><br><span class="line"><span class="keyword">const</span> jobs = <span class="title function_">ref</span>([&#123; <span class="attr">name</span>: <span class="string">&#x27;班主任&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,&#123; <span class="attr">name</span>: <span class="string">&#x27;讲师&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;,&#123; <span class="attr">name</span>: <span class="string">&#x27;学工主管&#x27;</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;,&#123; <span class="attr">name</span>: <span class="string">&#x27;教研主管&#x27;</span>, <span class="attr">value</span>: <span class="number">4</span> &#125;,&#123; <span class="attr">name</span>: <span class="string">&#x27;咨询师&#x27;</span>, <span class="attr">value</span>: <span class="number">5</span> &#125;,&#123; <span class="attr">name</span>: <span class="string">&#x27;其他&#x27;</span>, <span class="attr">value</span>: <span class="number">6</span> &#125;])</span><br><span class="line"><span class="comment">//性别列表数据</span></span><br><span class="line"><span class="keyword">const</span> genders = <span class="title function_">ref</span>([&#123; <span class="attr">name</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;])</span><br><span class="line"><span class="comment">// --------元数据结束--------</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/06/03/683e6fcf4a491.png" alt="image-20250603114516663"></p>
<blockquote>
<p>然后修改之前的定义，改为使用v-for进行动态查找。这样当我们需要添加性别与职位时就可以在表头进行修改了</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第二行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择性别&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;g in genders&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;g.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;g.value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.job&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择职位&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;j in jobs&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;j.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;j.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;j.value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用v-for来遍历我们上面的对象</p>
<p><code>v-for="j in jobs"</code>: j就是变量名称 in jobs就是对象名称</p>
<p><code>:key="j.value"</code>
注意这里要加：号，进行动态绑定，将jobs的value作为唯一标识</p>
<p><code>:label="j.name"</code> 动态绑定具体是那个名字
。对应&lt;el-option label=“研发部” value=“1”&gt;</p>
<p><code>:value="j.value"</code> 动态绑定他们的值。 对应&lt;el-option
label=“研发部” value=“1”&gt;</p>
<p><img src="https://bu.dusays.com/2025/06/03/683e783d6251c.png" alt="image-20250603122112852"></p>
<p>正常回显，没有问题啦🐻‍❄️🐻‍❄️</p>
<h5 id="2-所属部门动态优化">2. 所属部门动态优化</h5>
<blockquote>
<p>部门与部门管理的部门内容会向关联，那么什么时候需要展示呢？
当我们点击编辑和新增时都需要展示部门，因此可以在页面加载时就加载部门。那么就在钩子函数中定义查询部门数据</p>
</blockquote>
<ol type="1">
<li><p>查询所有部门数据首先要声明一个部门数组，便于我们后面的引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有部门功能</span></span><br><span class="line"><span class="keyword">const</span> depts =<span class="title function_">ref</span>([]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>既然要查询所有部门是不是要导入查询部门的API。这里的名称会与员工查询向混淆，所以起了别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; queryAllApi as queryAllDeptApi &#125; from &#x27;@/api/dept&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>导入进来了我们肯定要用啊是不是，那么就声明一个查询所有部门的函数方法。调用api查询出结果，然后将结果给我们上面声明函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有部门数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">queryAllDepts</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> result=<span class="keyword">await</span> <span class="title function_">queryAllDeptApi</span>();</span><br><span class="line">  <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">    depts.<span class="property">value</span>=result.<span class="property">data</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就要在钩子函数中引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 钩子函数</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 查询员工列表数据</span></span><br><span class="line">  <span class="title function_">search</span>();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 查询所有部门数据</span></span><br><span class="line">  <span class="title function_">queryAllDepts</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后使用for循环遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-select v-model=<span class="string">&quot;employee.deptId&quot;</span> placeholder=<span class="string">&quot;请选择部门&quot;</span> style=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;d in depts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;d.id&quot;</span>  <span class="attr">:label</span>=<span class="string">&quot;d.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;d.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure>

<p>这里的id和name参照接口文档</p>
<p><img src="https://bu.dusays.com/2025/06/03/683e828dcff88.png" alt="image-20250603130515355"></p></li>
<li><p>最终页面显示</p>
<p><img src="https://bu.dusays.com/2025/06/03/683e82a59518c.png" alt="image-20250603130538985"></p></li>
</ol>
<h3 id="5-图片上传相关">5. 图片上传相关</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-row :gutter=<span class="string">&quot;20&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/api/upload&quot;</span> <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span> <span class="attr">:before-upload</span>=<span class="string">&quot;beforeAvatarUpload&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;employee.image&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;employee.image&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Plus</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line">      &lt;/el-row&gt;</span><br></pre></td></tr></table></figure>

<p><code>class="avatar-uploader"</code>给一个class属性，方便我们属性css的相关</p>
<p><code>action="/api/upload"</code>
我们在上传文件时要调用的那个接口，请求地址</p>
<p><code>:show-file-list="false"</code>是否展示已经上传的文件列表</p>
<p><code>:on-success="handleAvatarSuccess" </code>文件上传成功调用的函数方法</p>
<p><code>:before-upload="beforeAvatarUpload"</code>文件上传之前要调用的函数（检查格式与大小是否符合要求）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件上传</span></span><br><span class="line"><span class="comment">// 图片上传成功后触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleAvatarSuccess</span> = (<span class="params">response</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件上传之前触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">beforeAvatarUpload</span> = (<span class="params">rawFile</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (rawFile.<span class="property">type</span> !== <span class="string">&#x27;image/jpeg&#x27;</span> &amp;&amp; rawFile.<span class="property">type</span> !== <span class="string">&#x27;image/png&#x27;</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;只支持上传图片&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawFile.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;只能上传10M以内图片&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>校验了文件类型是不是图片，不是就返回错误信息。然后查看文件大小是否小于10M，然后阻止上传</p>
<h5 id="头像回显逻辑">头像回显逻辑</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img v-<span class="keyword">if</span>=<span class="string">&quot;employee.image&quot;</span> :src=<span class="string">&quot;employee.image&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;avatar&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader-icon&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这里先做一个判断<code>v-if="employee.image"</code>里面有没有值呢？有就展示图片，没有就展示一个+号的图标</p>
<p>那么我们该如何回显图片呢？我们只需要将我们上传图片的URL传给image属性值就可以了</p>
<p>那么我们就在文件上传成功时把URL给image属性即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片上传成功后触发</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleAvatarSuccess</span> = (<span class="params">response</span>) =&gt; &#123;</span><br><span class="line">  employee.<span class="property">value</span>.<span class="property">image</span>=response.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>response.data;</code>为啥就是图像路径呢，可能与系统设计的有关。返回的就是一个URL</p>
<p><img src="https://bu.dusays.com/2025/06/03/683eeb881ff4b.png" alt="image-20250603203300769"></p>
<h3 id="6-工作经历的页面交互">6. 工作经历的页面交互</h3>
<h4 id="1-页面原型-3">1. 页面原型</h4>
<p><img src="https://bu.dusays.com/2025/06/03/683ef0bcbf818.png" alt="image-20250603205520481"></p>
<p>当点击新增按钮时会往<code>exprList[]</code>数组中新增一条数据。</p>
<p>当点击删除按钮时会在<code>exprList[]</code>数组中删除一条数据</p>
<p>vue是基于数据驱动视图展示的</p>
<h4 id="2-实现思路">2. 实现思路</h4>
<ol type="1">
<li><p>既然我们要点击添加工作经历就新增一个表格那么我们是不是需要绑定一个点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-row :gutter=<span class="string">&quot;10&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;工作经历&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addExprItem&quot;</span>&gt;</span>+ 添加工作经历<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定完点击事件然后就要去声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -------------添加工作经历相关-----------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addExprItem</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 为数组添加元素数据</span></span><br><span class="line">  employee.<span class="property">value</span>.<span class="property">exprList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">company</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">job</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">begin</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">end</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">exprDate</span>:[]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明一个点击事件，点击新增按钮是就调用<code>employee</code>对象里面的值中的<code>exprList</code>然后使用<code>push</code>函数就可以新增数据了。</p>
<p>这里面要放公式，职位，开始时间，结束时间，以及一个时间数组</p>
<p>欸？这时候就要问了，这个时间数组是干嘛的？？</p>
<p>我们页面中的开始时间和结束时间使用的是一个范围日期选择器。所以这个返回时间会存放进那个时间数组。然后就要使用我们的<code>watch</code>监听事件去监听数组变化，在将数组中的值传入开始时间结束时间里面去</p>
<p><img src="https://bu.dusays.com/2025/06/03/683ef5c364c07.png" alt="image-20250603211647019"></p>
<p>哇可以了耶。</p></li>
<li><p>页面新增添加工作经历表格</p>
<p>既然我们已经成功可以添加员工工作经历了，那么我们该如何让页面回显呢？</p>
<p>嘿嘿我们使用一个for循环不就好啦。循环遍历这个数组元素然后回显到页面上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第七行 ...  工作经历 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;3&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;expr in employee.exprList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;时间&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;expr.exprDate&quot;</span> <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span> <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span> <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;公司&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;60px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入公司名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;expr.company&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;60px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入职位&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;expr.job&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>- 删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/06/03/683ef942f2daf.png" alt="image-20250603213140053"></p>
<p>在工作经历上添加for循环，循环遍历数组。使用<code>v-model</code>来绑定数据</p></li>
<li><p>删除功能</p>
<p>当我们点击某一个按钮时就要删除某一条工作经历</p>
<p>所以我们要先往删除按钮上绑定点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item size=<span class="string">&quot;small&quot;</span> label-width=<span class="string">&quot;0px&quot;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delExprItem&quot;</span>&gt;</span>- 删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>

<p>那我们怎么样才能指定某一条进行删除呢？</p>
<p>我们可以在调用这个函数时将当前的索引传递过去。那我们这么样才能获取到这个数据呢</p>
<p>我们可以根据v-for来获取当前索引，当我们遍历时拿到这个索引，在删除时将索引传递给删除按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第七行 ...  工作经历 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;3&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(expr,index) in employee.exprList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;时间&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;expr.exprDate&quot;</span> <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span> <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span> <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;公司&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;60px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入公司名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;expr.company&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;60px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入职位&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;expr.job&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delExprItem(index)&quot;</span>&gt;</span>- 删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点看绑定的<code>index</code></p>
<p>然后我们声明函数，根据索引进行删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除工作经历</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delExprItem</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">  employee.<span class="property">value</span>.<span class="property">exprList</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就能实现功能了，前端太麻烦了😫😫😫</p></li>
<li><p>使用Watch监听绑定开始与结束时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听employee员工对象中的工作经历信息将值传给开始与结束时间</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span>employee.<span class="property">value</span>.<span class="property">exprList</span>,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(employee.<span class="property">value</span>.<span class="property">exprList</span> &amp;&amp; employee.<span class="property">value</span>.<span class="property">exprList</span>.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">   employee.<span class="property">value</span>.<span class="property">exprList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">expr</span>) =&gt;</span>&#123;</span><br><span class="line">    expr.<span class="property">begin</span>=expr.<span class="property">exprDate</span>[<span class="number">0</span>];</span><br><span class="line">    expr.<span class="property">end</span>=expr.<span class="property">exprDate</span>[<span class="number">1</span>];</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">// 深度监听</span></span><br></pre></td></tr></table></figure>

<p>这里使用watch监听函数，首先要指明监听的是哪个对象，我们要监听employee的员工数组对象，然后声明数组变化时的值。</p>
<p>当我们的数组中有值，并且值大于1时我们需要监听数组</p>
<p>使用forEach循环遍历数组，定义变量名称，然后将数组里面的第一个值给开始时间，第二个给结束时间</p>
<p>这里最关键的是要使用深度监听，如果直接监听数组只有数组的引用发生变化才会生效，这里当数组里面内容发生变化都需要监听，因此要使用深度监听</p></li>
</ol>
<h3 id="7-保存员工">7. 保存员工</h3>
<h4 id="1-页面分析-1">1. 页面分析</h4>
<ol type="1">
<li>当点击提交按钮时向后端发送异步请求，将参数传入后端来保存数据</li>
<li>保存成功要给出提示信息。然后关闭当前对话框</li>
<li>重新查询列表数据</li>
<li>保存失败给出对应的错误信息</li>
</ol>
<h4 id="2-功能开发">2. 功能开发</h4>
<ol type="1">
<li><p>首先在<code>api/js</code>文件中说明添加操作的请求，然后在<code>index</code>中引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addApi</span> = (<span class="params">emp</span>) =&gt; request.<span class="title function_">post</span>(<span class="string">&#x27;/emps&#x27;</span>, emp);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在保存按钮上添加点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;save&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">      &lt;/span&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后去声明这个按钮。调用api当返回值为200说明插入成功了，然后发送信息关闭对话框重新搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------保存员工相关--------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">save</span>= <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">addApi</span>(employee.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    dialogVisible.<span class="property">value</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">search</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入成功</p>
<p><img src="https://bu.dusays.com/2025/06/04/683f9b2ba28a7.png" alt="image-20250604090222231"></p></li>
<li><p>哎
这时候又有一个bug，当我们已经新增完毕用户了，但是用户的信息还在表单里面</p>
<p><img src="https://bu.dusays.com/2025/06/04/683f9b9bd6db0.png" alt="image-20250604090421609"></p></li>
<li><p>解决</p>
<p>当点击新增员工时将之前的数据全部置为空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明添加员工的箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addEmp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">  dialogTitle.<span class="property">value</span> = <span class="string">&#x27;新增员工&#x27;</span>;</span><br><span class="line">  employee.<span class="property">value</span>=&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">salary</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">deptId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">entryDate</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">exprList</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表单验证规则</p>
<p><img src="https://bu.dusays.com/2025/06/04/683fa31083c1a.png" alt="image-20250604093605566"></p>
<ul>
<li><p>首先在<code>el-form</code>表单项上添加<code>:rules="reles"</code>的表单绑定项，然后在具体的<code>el-form-item</code>使用<code>prop</code>绑定名称</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-form :model=<span class="string">&quot;employee&quot;</span> label-width=<span class="string">&quot;80px&quot;</span> :rules=<span class="string">&quot;rules&quot;</span> &gt;</span><br><span class="line">      &lt;!-- 基本信息 --&gt;</span><br><span class="line">      &lt;!-- 第一行 --&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;employee.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工用户名，2-20个字&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后去声明这个对象在里面添加校验规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------表单校验相关-------</span></span><br><span class="line"><span class="keyword">const</span> rules = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">20</span>, <span class="attr">message</span>: <span class="string">&#x27;用户名长度应在2到20个字符之间&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">name</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入姓名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&#x27;姓名长度应在2到10个字符之间&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">gender</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择性别&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">phone</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入手机号&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">pattern</span>: <span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入有效的手机号&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>这时候会发现我们表单校验虽然校验了但是没有实现，因此还需要再提交表单时进行校验</p>
<p>声明一个表单引用对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单验证的响应式对象</span></span><br><span class="line"><span class="keyword">const</span> empFromRef =<span class="title function_">ref</span>();</span><br></pre></td></tr></table></figure>

<p>然后再<code>el-form</code>进行引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-form :model=<span class="string">&quot;employee&quot;</span> label-width=<span class="string">&quot;80px&quot;</span> :rules=<span class="string">&quot;rules&quot;</span> ref=<span class="string">&quot;empFromRef&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>这样我们就可以通过这个响应式对象来操作表单对象了</p></li>
<li><p>重新修改保存员工的代码，添加表单校验信息，校验通过才可以执行添加代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------保存员工相关--------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">save</span>= <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="comment">// 表单校验-只有通过了才可以执行下面的代码</span></span><br><span class="line">  <span class="keyword">if</span>(!empFromRef.<span class="property">value</span>) <span class="keyword">return</span>;</span><br><span class="line">  empFromRef.<span class="property">value</span>.<span class="title function_">validate</span>(<span class="title function_">async</span> (valid) =&gt;&#123; <span class="comment">// valid标识是否通过：true通过/false不通过</span></span><br><span class="line">   <span class="keyword">if</span>(valid)&#123; <span class="comment">// 通过</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">addApi</span>(employee.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">      dialogVisible.<span class="property">value</span>=<span class="literal">false</span>;</span><br><span class="line">      <span class="title function_">search</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123; <span class="comment">//不通过</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;表单校验不通过&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后一步：当重新添加时需要清空表单校验规则</p>
<p>修改添加员工的相关代码，添加清空表单校验规则代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明添加员工的箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addEmp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">  dialogTitle.<span class="property">value</span> = <span class="string">&#x27;新增员工&#x27;</span>;</span><br><span class="line">  employee.<span class="property">value</span>=&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">salary</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">deptId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">entryDate</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">exprList</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置表单校验规则</span></span><br><span class="line"><span class="keyword">if</span>(empFromRef.<span class="property">value</span>)&#123;</span><br><span class="line">  empFromRef.<span class="property">value</span>.<span class="title function_">resetFields</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul></li>
</ol>
<h2 id="九修改员工">九、修改员工</h2>
<h3 id="1-页面原型-4">1. 页面原型</h3>
<p><img src="https://bu.dusays.com/2025/06/04/683fafa014d0a.png" alt="image-20250604102946823"></p>
<h3 id="2-查询回显功能">2. 查询回显功能</h3>
<blockquote>
<p>为编辑按钮绑定点击事件</p>
<p>发送异步请求，根据id查询员工的详细信息，页面进行回显</p>
</blockquote>
<ol type="1">
<li><p>在<code>api/js</code>里面添加异步请求的相关数据，然后在<code>index</code>里面引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id查询部门信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryInfoApi</span> = (<span class="params">id</span>) =&gt; request.<span class="title function_">get</span>(<span class="string">`/emps/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>为编辑按钮绑定点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;edit(scope.row.id)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Edit</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后使用<code>scope.row.id</code>获取这一行的id，并且作为参数传入点击事件</p></li>
<li><p>声明这个点击函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------根据id查询员工信息相关-----</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">edit</span> =<span class="keyword">async</span>(<span class="params">id</span>) =&gt;&#123;</span><br><span class="line"> <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">queryInfoApi</span>(id);</span><br><span class="line"> <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">  dialogVisible.<span class="property">value</span>=<span class="literal">true</span>;</span><br><span class="line">  dialogTitle.<span class="property">value</span>=<span class="string">&#x27;修改员工&#x27;</span>;</span><br><span class="line">  employee.<span class="property">value</span>=result.<span class="property">data</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们点击按钮是将<code>id</code>作为参数，而后调用查询api，将结果封装在result结果里面。当返回值为200就打开对话框，将标题改为修改员工，然后将结果集中的数据作为参数进行回显</p></li>
<li><p>回显失败错误</p>
<details class="folding-tag"><summary> 问题出现背景 </summary>
              <div class="content">
              <p>当我在页面点击编辑按钮时不会弹出对话框，反而报了错误 index.vue:161Uncaught (in promise) TypeError: Cannot read properties of undefined(reading ‘0’) at index.vue:161:29 at watch.deep (index.vue:160:28)</p><p>但是前端可以正确发送请求，我的后端控制台也有正确的数据返回</p>
              </div>
            </details>

<details class="folding-tag" red><summary> 问题解析 </summary>
              <div class="content">
              <ol type="1"><li><p>当点击“编辑”按钮时，会调用 edit 函数。</p></li><li><p>edit 函数从后端API (queryInfoApi) 获取员工数据，并将其赋值给employee.value。</p></li><li><p>后端返回的员工数据中，工作经历 (exprList) 里的每个条目包含 begin和 end 日期，但不包含前端日期选择器所绑定的 exprDate 数组。</p></li><li><p>将后端数据直接赋值给 employee.value 后，exprList 中的条目没有exprDate 属性。</p></li><li><p>此时，侦听 employee.value.exprList 的 watch 回调被触发。</p></li><li><p>在这个 watch 回调中，代码尝试通过 expr.exprDate[0] 和expr.exprDate[1] 来更新 expr.begin 和 expr.end。但由于此时 expr.exprDate是 undefined，访问 expr.exprDate[0]就会导致报错，对话框也因此无法弹出。</p></li></ol>
              </div>
            </details>

<details class="folding-tag" green><summary> 问题修改 </summary>
              <div class="content">
              <ol type="1"><li><p>修改 edit 函数：在从后端获取到员工数据后，但在将其赋值给employee.value 之前，我们需要遍历 exprList(如果存在)，并根据每个工作经历条目的 begin 和 end 属性来初始化其对应的exprDate 数组。同时，要确保 exprList 本身如果从后端返回为 null 或undefined，会被正确处理为一个空数组。</p></li><li><p>修改 exprList 的侦听器：使其更健壮，能处理 expr.exprDate可能不是一个包含两个元素的数组的情况（例如，当用户清空日期选择器或新添加一条工作经历时，exprDate可能是空数组 []）。</p></li></ol>
              </div>
            </details>
</li>
<li><p>解决完错误后的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------根据id查询员工信息相关-----</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">edit</span> =<span class="keyword">async</span>(<span class="params">id</span>) =&gt;&#123;</span><br><span class="line"> <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">queryInfoApi</span>(id);</span><br><span class="line"> <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">  dialogVisible.<span class="property">value</span>=<span class="literal">true</span>;</span><br><span class="line">  dialogTitle.<span class="property">value</span>=<span class="string">&#x27;修改员工&#x27;</span>;</span><br><span class="line">  employee.<span class="property">value</span>=result.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对工作经历进行处理</span></span><br><span class="line">  <span class="keyword">let</span> exprList= employee.<span class="property">value</span>.<span class="property">exprList</span>;</span><br><span class="line">  <span class="keyword">if</span>(exprList &amp;&amp; exprList.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    exprList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">expr</span>) =&gt;</span>&#123;</span><br><span class="line">      expr.<span class="property">exprDate</span>=[expr.<span class="property">begin</span>,expr.<span class="property">end</span>];</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>奶奶的，找了半个小时的错误结果老师后面又讲了。</p>
<p>这里对工作经历进行处理，获取到工作经历的值，然后进行遍历，将开始时间结束时间封装在<code>exprDate</code>里面去，这个时间段数据就可以在页面回显出来了</p></li>
<li><p>页面显示</p>
<p><img src="https://bu.dusays.com/2025/06/04/683fbe1c2b386.png" alt="image-20250604113134418"></p></li>
</ol>
<h3 id="3-点击保存修改员工数据">3. 点击保存修改员工数据</h3>
<p>我们的新增员工与修改员工复用的是同一个对话框，那么当我们新增员工时或修改员工时怎么才能区分不同的操作呢？</p>
<p>当有员工id时就为修改，没有就新增</p>
<ol type="1">
<li><p>在<code>api</code>中定义更新员工信息的异步请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  修改部门信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">updateApi</span> = (<span class="params">emp</span>) =&gt; request.<span class="title function_">put</span>(<span class="string">&#x27;/emps&#x27;</span>, emp);</span><br></pre></td></tr></table></figure>

<p>当将我们整个emp对象都要传入后端进行修改，然后在index里面引用</p></li>
<li><p>代码逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------保存员工相关--------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">save</span>= <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="comment">// 表单校验-只有通过了才可以执行下面的代码</span></span><br><span class="line">  <span class="keyword">if</span>(!empFromRef.<span class="property">value</span>) <span class="keyword">return</span>;</span><br><span class="line">  empFromRef.<span class="property">value</span>.<span class="title function_">validate</span>(<span class="title function_">async</span> (valid) =&gt;&#123; <span class="comment">// valid标识是否通过：true通过/false不通过</span></span><br><span class="line">   <span class="keyword">if</span>(valid)&#123; <span class="comment">// 通过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">if</span>(employee.<span class="property">value</span>.<span class="property">id</span>)&#123;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title function_">updateApi</span>(employee.<span class="property">value</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title function_">addApi</span>(employee.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">      dialogVisible.<span class="property">value</span>=<span class="literal">false</span>;</span><br><span class="line">      <span class="title function_">search</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123; <span class="comment">//不通过</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;表单校验不通过&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们点击按钮时会去判断有没有id，如果有就执行更新，没有就执行添加。同时需要将<code>result</code>由变量变为常量</p></li>
</ol>
<h2 id="十删除功能">十、删除功能</h2>
<h3 id="1-删除单个员工">1. 删除单个员工</h3>
<h4 id="1-页面原型-5">1. 页面原型</h4>
<p><img src="https://bu.dusays.com/2025/06/04/683fc9d845e31.png" alt="image-20250604122139036"></p>
<h4 id="2-api设计">2. api设计</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除部门信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">deleteApi</span> = (<span class="params">ids</span>) =&gt; request.<span class="title function_">delete</span>(<span class="string">`/emps?ids=<span class="subst">$&#123;ids&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-为删除按钮绑定点击事件">3. 为删除按钮绑定点击事件</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------删除员工相关-----</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteById</span> = <span class="keyword">async</span>(<span class="params">id</span>) =&gt;&#123;</span><br><span class="line">  <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;此操作将永久删除该员工, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">deleteApi</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">      <span class="title function_">search</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-批量删除">2. 批量删除</h3>
<h4 id="1-页面分析-2">1. 页面分析</h4>
<p><img src="https://bu.dusays.com/2025/06/04/683fc9d845e31.png" alt="image-20250604122139036.png"></p>
<ul>
<li>为表格的复选框绑定事件，点击复选框之后，获取到目前选中的条件的id(多个id可以封装到数组中）。</li>
<li>为“批量删除”按钮绑定事件，发送异步请求到服务端，根据id批量删除员工信息。</li>
</ul>
<h4 id="2-代码设计">2. 代码设计</h4>
<ol type="1">
<li>参照官方文档需要在<code>form</code> 表单上绑定</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">&quot;empList&quot;</span> border style=<span class="string">&quot;width: 100%&quot;</span> @selection-change=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>这个函数代表当复选框发生变化时就触发</p>
<ol start="2" type="1">
<li><p>然后去声明这个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量删除员工</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSelectionChange</span> = (<span class="params">selection</span>) =&gt; &#123;<span class="comment">// selection代表当前选中的员工数据记录</span></span><br><span class="line">  selectedIds.<span class="property">value</span> = selection.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为批量删除按钮绑定事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录勾选的员工id</span></span><br><span class="line"><span class="keyword">const</span> selectedIds = <span class="title function_">ref</span>([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除员工</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSelectionChange</span> = (<span class="params">selection</span>) =&gt; &#123;<span class="comment">// selection代表当前选中的员工数据记录</span></span><br><span class="line">  selectedIds.<span class="property">value</span> = selection.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteByIds</span>  = (<span class="params"></span>) =&gt;&#123; </span><br><span class="line"><span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;此操作将永久删除该员工, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(selectedIds.<span class="property">value</span> &amp;&amp; selectedIds.<span class="property">value</span>.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">deleteApi</span>(selectedIds.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">      <span class="title function_">search</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;请选择要删除的员工&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">info</span>(<span class="string">&#x27;已取消删除&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="十一-员工登录">十一、 员工登录</h2>
<h3 id="1-页面原型-6">1. 页面原型</h3>
<p><img src="https://bu.dusays.com/2025/06/04/683fdc264d83a.png" alt="image-20250604133945257"></p>
<h3 id="2-准备工作">2. 准备工作</h3>
<p>在<code>api/</code>目录下新建<code>login.js</code>里面存放与登录有关的请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录相关</span></span><br><span class="line"><span class="comment">// 导入封装好的axios实例（包含基础配置和响应拦截器）</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loginApi</span> = (<span class="params">data</span>) =&gt;request.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>,data);</span><br></pre></td></tr></table></figure>

<p>并且在index中引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; loginApi &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/login&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> loginForm = <span class="title function_">ref</span>(&#123;<span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Tlias智能学习辅助系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span>登 录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span>重 置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">410px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../../assets/bg1.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.login-form</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: <span class="string">&#x27;楷体&#x27;</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-初始登录功能">3. 初始登录功能</h3>
<p>当我们点击登录按钮时需要进行登录，点击重置按钮可以重置，因此首先要为他们绑定点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">import</span> &#123; loginApi &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/login&#x27;</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> loginForm = <span class="title function_">ref</span>(&#123;<span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>&#125;)</span><br><span class="line">  <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123; </span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">loginApi</span>(loginForm.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span>(result.<span class="property">code</span>)&#123;</span><br><span class="line">    <span class="comment">// 1. 提示登录成功</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 跳转到首页</span></span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/index&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">msg</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 重置</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt;&#123; </span><br><span class="line">    loginForm.<span class="property">value</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    loginForm.<span class="property">value</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里要使用<code>useRouter</code>进行跳转</p>
<h3 id="4存储登录token">4.存储登录token</h3>
<h4 id="1-localstorage">1. localStorage</h4>
<p><img src="https://bu.dusays.com/2025/06/04/683fe223bb76c.png" alt="image-20250604140517700"></p>
<h4 id="2-将用户返回到token存储在浏览器中">2.
将用户返回到token存储在浏览器中</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;loginUser&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result.<span class="property">data</span>));</span><br></pre></td></tr></table></figure>

<p><code>JSON.stringify(result.data)</code>因为我们的<code>result.data</code>是一个对象，要转为字符串的形式，因此要使用<code>JSON.stringify</code></p>
<h3 id="5-用户携带令牌登录">5. 用户携带令牌登录</h3>
<h4 id="1-功能引入">1. 功能引入</h4>
<p>现在我们打开久违的idea，开启拦截器的相关功能这时登录会发现</p>
<p><img src="https://bu.dusays.com/2025/06/04/683fe5637e884.png" alt="image-20250604141909896"></p>
<p>咦我明明登了呀 怎么会没有数据。后端就显示没有令牌了。</p>
<p>也就是说我们在后序的所有请求中没有将token令牌到服务器端</p>
<h4 id="2-axios的拦截器">2. axios的拦截器</h4>
<p><img src="https://bu.dusays.com/2025/06/04/683fec84ac0c5.png" alt="image-20250604144935575"></p>
<p>使用<code>axios</code>的拦截器拦截请求，并在请求中添加token</p>
<p>在<code>request.js</code>中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器-获取localStorage中的token数据，在请求头中增加token</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123; <span class="comment">// 请求成功时的回调函数</span></span><br><span class="line">    <span class="comment">// 获取localStorage中的token数据</span></span><br><span class="line">   <span class="keyword">const</span> loginUser= <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;loginUser&#x27;</span>));</span><br><span class="line">    <span class="comment">// 判断token是否存在，如果存在则将其添加到请求头中</span></span><br><span class="line">    <span class="keyword">if</span> (loginUser&amp;&amp;loginUser.<span class="property">token</span>) &#123;</span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">token</span>=loginUser.<span class="property">token</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="comment">// 请求失败时的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意这里的<code>loginUser</code>
要与<code>index</code>里面的存入token的键保持一致</p>
<h4 id="3-解决文件上传问题">3. 解决文件上传问题</h4>
<p>在上一节代码中我们解决了token问题，不过我们的文件上传功能却不能实现了，原因是文件上传组件不是发送的异步请求，而是我们自定义的vue进行发送的。因此不能携带令牌也就不能进行文件上传了</p>
<p>怎么说不好说</p>
<p>参照官方文档我们需要在<code>el-update</code>标签里面声明一个<code>:headers="&#123;'token':token&#125;"</code>用于存放的token。这里的token不能写死因此用了动态绑定</p>
<p>写了token我们就要声明一个token函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明token的响应式数据</span></span><br><span class="line"><span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>那我们是什么时候加载这个请求呢？要在页面加载时就要携带请求头，因此要在钩子函数中声明</p>
<p>要在钩子函数中声明就要先来获取token</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取token</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getToken</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> loginUser=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;loginUser&#x27;</span>))</span><br><span class="line">  <span class="keyword">if</span>(loginUser &amp;&amp; loginUser.<span class="property">token</span>)&#123;</span><br><span class="line">    token.<span class="property">value</span> = loginUser.<span class="property">token</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为localStorage里面放的是字符串，我们要将其转化为对象</p>
<p>获取成功后将里面的token赋值给token里面去，这时候就会动态绑定到upload里面去。最后在钩子函数中应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 钩子函数</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 查询员工列表数据</span></span><br><span class="line">  <span class="title function_">search</span>();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 查询所有部门数据</span></span><br><span class="line">  <span class="title function_">queryAllDepts</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取token</span></span><br><span class="line">  <span class="title function_">getToken</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>携带令牌登录功能完成</p>
<h3 id="6未登录显示401跳转到登录页面">6.未登录显示401跳转到登录页面</h3>
<p>使用axios的拦截器的响应拦截器进行拦截，然后进行判断，如果返回的状态码是401就跳转到登陆页面</p>
<p><img src="https://bu.dusays.com/2025/06/04/683ff96d89fe2.png" alt="image-20250604154440344"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123; <span class="comment">// 响应成功时的回调函数</span></span><br><span class="line">    <span class="comment">// 这里默认返回response中的data字段，通常后端返回的结构为&#123;code: xxx, data: xxx, message: xxx&#125;</span></span><br><span class="line">    <span class="comment">// 可根据实际需求进一步处理（如统一错误码判断、数据格式化等）</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="comment">// 响应失败时的回调函数</span></span><br><span class="line">     <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123; <span class="comment">// 全等-类型与值相同</span></span><br><span class="line">      <span class="comment">// 提示信息</span></span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录超时，请重新登录&#x27;</span>);</span><br><span class="line">      <span class="comment">// 跳转到登陆页面</span></span><br><span class="line">      router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对请求错误进行统一处理（如记录错误日志、提示用户、重试机制等）</span></span><br><span class="line">    <span class="comment">// 此处直接返回 rejected 状态的Promise，以便调用方通过.catch()捕获错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="7-退出登录">7. 退出登录</h3>
<h4 id="1-页面显示当前用户姓名">1. 页面显示当前用户姓名</h4>
<p>我们该如何获取当前登录的用户名呢，当我们登录时员工信息已经封装在了localStorage里面了,只要从里面获取就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 当前登录员工</span></span><br><span class="line"><span class="keyword">const</span> loginName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 定义钩子函数</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前登录用户名</span></span><br><span class="line">  <span class="keyword">const</span> loginUser = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;loginUser&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span>(loginUser&amp;&amp;loginUser.<span class="property">name</span>)&#123;</span><br><span class="line">    loginName.<span class="property">value</span> = loginUser.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>从本地中获取用户名</p>
<h4 id="2-退出登录">2. 退出登录</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:;&quot;</span> @click=<span class="string">&quot;logout&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SwitchButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span> 退出登录【&#123;&#123;loginName&#125;&#125;】</span><br><span class="line">  &lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>退出登录需要绑定一个退出按钮，同时需要将超链接变为死链接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logout</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line"><span class="comment">// 弹框提示用户是否删除</span></span><br><span class="line">   <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;您确定要退出登录吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123; <span class="comment">// 确认</span></span><br><span class="line">   <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;已退出登录&#x27;</span>);</span><br><span class="line">   <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;loginUser&#x27;</span>);</span><br><span class="line">   router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 取消</span></span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">info</span>(<span class="string">&#x27;已取消退出&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>退出时给出提示信息，然后删除本地用户信息，最后进行跳转</p>
<h2 id="十一项目打包">十一、项目打包</h2>
<ol type="1">
<li><p>在vscode中运行<code>build</code>脚本命令，这样会生成<code>dish</code>文件夹代表打包成功</p></li>
<li><p>将项目部署在<code>Nginx</code>上</p></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/posts/42622/</url>
    <content><![CDATA[<blockquote>
<p>跌跌撞撞终于来到这里，我会记得这一天。</p>
<p>知不可乎骤得，托遗响于悲风。 <em>—— 苏轼《赤壁赋》</em></p>
</blockquote>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://b11et3un53m.feishu.cn/wiki/PsyawI04ei2FQykqfcPcmd7Dnsc">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/07/29/68888113f2ea7.png)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">飞书详细文档</div>
            <div class="tag-link-sitename">黑马程序员</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/hmall-SpringCloud">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/07/29/6888ac51b0913.png)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">hmall黑马商城</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<h1 id="一前置课程">一、前置课程</h1>
<h2 id="1mybatisplus">1、MybatisPlus</h2>
<h3 id="11-项目启动">1.1 项目启动</h3>
<ol type="1">
<li><p>导入起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;!―-MybatisPlus--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">grouprd</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/ dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自义定<code>Mapper</code>继承<code>MyBatisPlus</code>提供的<code>BaseMapper</code>接口,并且指定实体类泛型</p>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="12-常用注解">1.2 常用注解</h3>
<p>约定大于配置</p>
<ul>
<li><code>@TableName</code>:用来指定表名</li>
<li><code>@Table</code>: 用来指定表中主键字段信息</li>
<li><code>@TableField</code>:用来指定表中的普通字段信息</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/13/687309fd4d023.png" alt="image-20250713092057985"></p>
<p>使用<code>@TableField</code>注解的常见场景</p>
<ul>
<li>成员变量名与数据库字段名不一致</li>
<li>成员变量名以is开头且是布尔值</li>
<li>成员变量名与数据库关键字冲突</li>
<li>成员变量不是数据库字段</li>
</ul>
<h3 id="13-常见配置">1.3 常见配置</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">   <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.mp.domain.po</span> <span class="comment">#别名扫描包</span></span><br><span class="line">   <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath* : /mapper/**/*,xml&quot;</span> <span class="comment"># Mapper.xml文件地址，默认值</span></span><br><span class="line">   <span class="attr">configuration:</span></span><br><span class="line">     <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#是否开启下划线和驼峰的映射</span></span><br><span class="line">     <span class="attr">cache-enabled:</span> <span class="literal">false</span> <span class="comment">#是否开启二级缓存</span></span><br><span class="line">   <span class="attr">global-config:</span></span><br><span class="line">     <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span> <span class="comment"># id为雪花算法生成</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment">#更新策略:只更新非空字段</span></span><br></pre></td></tr></table></figure>

<h3 id="14-核心功能">1.4 核心功能</h3>
<h4 id="模糊查询">模糊查询</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询名字中带o,balance&gt;1000的id，user等</span></span><br><span class="line">/ /<span class="number">1.</span>构建查询条件</span><br><span class="line">Querywrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">Querywrapper</span>&lt;User&gt;()</span><br><span class="line">                   .select( <span class="string">&quot;id&quot;</span>，<span class="string">&quot;username&quot;</span>，<span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">                   .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">                   .ge( <span class="string">&quot;balance&quot;</span>,<span class="number">1000</span>) ;</span><br><span class="line"><span class="comment">// 2.查询</span></span><br><span class="line">userMapper.selectList(wrapper) ;</span><br></pre></td></tr></table></figure>

<h4 id="条件更新">条件更新</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新用户名为jack的的余额为2000元</span></span><br><span class="line"><span class="comment">// 1.要更新的数据</span></span><br><span class="line"><span class="type">user</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setBalance (<span class="number">2000</span>);</span><br><span class="line"><span class="comment">// 2.更新的条件</span></span><br><span class="line">Querywrapperuser&gt; wrapper = <span class="keyword">new</span> <span class="title class_">Querywrapper</span>&lt;User&gt;()</span><br><span class="line">    .eq( column: <span class="string">&quot;username&quot;</span>，val: <span class="string">&quot;jack&quot;</span>);</span><br><span class="line"><span class="comment">//3.执行更新</span></span><br><span class="line">userMapper.update(user,wrapper);</span><br></pre></td></tr></table></figure>

<h4 id="条件更新-1">条件更新</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新id为1，2，4的用户余额扣100</span></span><br><span class="line">List&lt;Long&gt; ids = List.of(<span class="number">1L</span>，<span class="number">2L</span>，<span class="number">4L</span>);</span><br><span class="line">updatewrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">Updatewrapper</span>&lt;User&gt; ()</span><br><span class="line">    .setsql( <span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">    .in( column: <span class="string">&quot;id, ids);</span></span><br><span class="line"><span class="string">userMapper.update( null, wrapper) ;</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义sql">自定义SQL</h4>
<p>我们可以利用MyBatisPlus的Wrapper来构建复杂的Where条件，然后自己定义SQL语句中剩下的部分。</p>
<ol type="1">
<li>基于Wrapper构建where条件</li>
<li>在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew</li>
<li>自定义SQL，并且使用wrapper条件</li>
</ol>
<p><img src="https://bu.dusays.com/2025/07/13/68731e6092394.png" alt="image-20250713104756971"></p>
<h4 id="service接口iservice">Service接口–IService</h4>
<p><img src="https://bu.dusays.com/2025/07/13/687321021b3e5.png" alt="image-20250713105909031"></p>
<p><img src="https://bu.dusays.com/2025/07/13/687322560f0d9.png" alt="image-20250713110450874"></p>
<p>自定义Service去继承Iservice（要指定实体泛型），自定义ServiceImpl去继承ServiceImpl（要指定Mapper泛型和实体泛型）</p>
<p>eg：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserserice</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServigeImpl</span>&lt;UserMapper，User&gt; <span class="keyword">implements</span> <span class="title class_">TUserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-restful风格接口">1.5 Restful风格接口</h3>
<p><img src="https://bu.dusays.com/2025/07/13/68733109e18c1.png" alt="image-20250713120734859"></p>
<p>后端传给前端要定义VO，前端传给后端定义DTO</p>
<p>这里有一个我之前没有注意的点，po要转为vo，可以使用<code>hutool</code>工具包进行拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanUtil.copyproperties(原始实体，目标实体)</span><br></pre></td></tr></table></figure>

<h3 id="16-逻辑删除">1.6 逻辑删除</h3>
<p><img src="https://bu.dusays.com/2025/07/13/68734a0b9ec3e.png" alt="image-20250713135411266"></p>
<h3 id="17-枚举处理器">1.7 枚举处理器</h3>
<ol type="1">
<li>在枚举类的值上添加<code>@EnumValue</code>注解</li>
</ol>
<p><img src="https://bu.dusays.com/2025/07/13/68734c7b05f15.png" alt="image-20250713140439923"></p>
<ol start="2" type="1">
<li><p>配置全局枚举处理器</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="18-json类型处理器">1.8 JSON类型处理器</h3>
<ol type="1">
<li>首先定义一个单独的JSON实体</li>
</ol>
<p><img src="https://bu.dusays.com/2025/07/13/68734ef1d9262.png" alt="image-20250713141511161"></p>
<ol start="2" type="1">
<li>然后将User类的info字段修改为UserInfo类型，并声明类型处理器：</li>
</ol>
<p><img src="https://bu.dusays.com/2025/07/13/68734ee32877a.png" alt="image-20250713141456253"></p>
<ol start="3" type="1">
<li>在类上开启自动映射（这里设置autoResultMap =
true是因为MyBatis-Plus对于这种类中再嵌套一个自定义类的，是需要手动在.xml中定义相关字段等，或者像这样开启自动映射）</li>
</ol>
<p><img src="https://bu.dusays.com/2025/07/13/68734f1e6a5ac.png" alt="image-20250713141555704"></p>
<h3 id="19-分页插件">1.9 分页插件</h3>
<p>在未引入分页插件的情况下，<code>MybatisPlus</code>是不支持分页功能的，<code>IService</code>和<code>BaseMapper</code>中的分页方法都无法正常起效。
所以，我们必须配置分页插件。</p>
<p>新建<code>MybatisConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写分页查询的测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span></span><br><span class="line">    Page&lt;User&gt; p = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 2.总条数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + p.getTotal());</span><br><span class="line">    <span class="comment">// 3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + p.getPages());</span><br><span class="line">    <span class="comment">// 4.数据</span></span><br><span class="line">    List&lt;User&gt; records = p.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以支持排序(根据balance排序，false是降序)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>, pageSize = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 分页参数</span></span><br><span class="line">Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line"><span class="comment">// 排序参数, 通过OrderItem来指定</span></span><br><span class="line">page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">userService.page(page);</span><br></pre></td></tr></table></figure>

<h4 id="通用分页查询案例">通用分页查询案例</h4>
<p><img src="https://bu.dusays.com/2025/07/13/68735433538aa.png" alt="image-20250713143735745"></p>
<ol type="1">
<li><p>定义一个统一的分页查询条件的实体，包含分页、排序参数、过滤条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;分页查询实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isAsc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后让我们需要分页的实体去继承分页实体</p>
<p><code>callSuper = true</code>根据子类自身的字段值和从父类继承的字段值
来生成hashcode，当两个子类对象比较时，只有子类对象的本身的字段值和继承父类的字段值都相同，equals方法的返回值是true</p>
<p><code>@EqualsAndHashCode</code> 用于自动生成 equals() 和 hashCode()
方法，并且在比较时，调用父类（super）的 equals() 和 hashCode() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建统一返回结果集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;分页结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;总条数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;总页数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;集合&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页查询代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(PageQuery query)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件</span></span><br><span class="line">    <span class="comment">// 1.1.分页条件</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class="line">    <span class="comment">// 1.2.排序条件</span></span><br><span class="line">    <span class="keyword">if</span> (query.getSortBy() != <span class="literal">null</span>) &#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(query.getSortBy(), query.getIsAsc()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 默认按照更新时间排序</span></span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    page(page);</span><br><span class="line">    <span class="comment">// 3.数据非空校验</span></span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(page.getTotal(), page.getPages(), Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.有数据，转换</span></span><br><span class="line">    List&lt;UserVO&gt; list = BeanUtil.copyToList(records, UserVO.class);</span><br><span class="line">    <span class="comment">// 5.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;UserVO&gt;(page.getTotal(), page.getPages(), list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="将分页条件封装在工具类中">将分页条件封装在工具类中</h4>
<p><code>PageQuery</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pageNo=<span class="number">1</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pageSize=<span class="number">10</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt;  Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(OrderItem ... orders)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.分页条件</span></span><br><span class="line">        Page&lt;T&gt; p = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="comment">// 2.排序条件</span></span><br><span class="line">        <span class="comment">// 2.1.先看前端有没有传排序字段</span></span><br><span class="line">        <span class="keyword">if</span> (sortBy != <span class="literal">null</span>) &#123;</span><br><span class="line">            p.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(sortBy, isAsc));</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2.再看有没有手动指定排序字段</span></span><br><span class="line">        <span class="keyword">if</span>(orders != <span class="literal">null</span>)&#123;</span><br><span class="line">            p.addOrder(orders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(String defaultSortBy, <span class="type">boolean</span> isAsc)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toMpPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(defaultSortBy, isAsc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageDefaultSortByCreateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="string">&quot;create_time&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageDefaultSortByUpdateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="string">&quot;update_time&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PageDTO</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="keyword">private</span> List&lt;V&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回空分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">empty</span><span class="params">(Page&lt;P&gt; p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MybatisPlus分页结果转为 VO分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voClass 目标VO类型的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">of</span><span class="params">(Page&lt;P&gt; p, Class&lt;V&gt; voClass)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.非空校验</span></span><br><span class="line">        List&lt;P&gt; records = p.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> empty(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.数据转换</span></span><br><span class="line">        List&lt;V&gt; vos = BeanUtil.copyToList(records, voClass);</span><br><span class="line">        <span class="comment">// 3.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MybatisPlus分页结果转为 VO分页结果，允许用户自定义PO到VO的转换方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> convertor PO到VO的转换函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">of</span><span class="params">(Page&lt;P&gt; p, Function&lt;P, V&gt; convertor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.非空校验</span></span><br><span class="line">        List&lt;P&gt; records = p.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> empty(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.数据转换</span></span><br><span class="line">        List&lt;V&gt; vos = records.stream().map(convertor).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 3.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>业务层代码可简化为</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUserByPage</span><span class="params">(PageQuery query)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件</span></span><br><span class="line">    Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    page(page);</span><br><span class="line">    <span class="comment">// 3.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> PageDTO.of(page, user -&gt; &#123;</span><br><span class="line">        <span class="comment">// 拷贝属性到VO</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">vo</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">        <span class="comment">// 用户名脱敏</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> vo.getUsername();</span><br><span class="line">        vo.setUsername(username.substring(<span class="number">0</span>, username.length() - <span class="number">2</span>) + <span class="string">&quot;**&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2docker">2.Docker</h2>
<h3 id="1-安装问题">1. 安装问题</h3>
<h4 id="1-解决配置网络时es33显示被已拔出问题">1.
解决配置网络时es33显示被已拔出问题</h4>
<p>在电脑服务中开启VMware DHCP Service”和“VMware NAT Service”。即可</p>
<h4 id="2-解决docker镜像问题">2. 解决Docker镜像问题</h4>
<p>操她奶奶的，你妹的傻鸟Docker，用老师安装的方式一直不成功，最终在评论区找到答案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">无法安装docker 建议直接：bash &lt;(curl -sSL https:<span class="comment">//linuxmirrors.cn/docker.sh)  这条命令，一次性全安装完毕</span></span><br></pre></td></tr></table></figure>

<h3 id="2-安装mysql">2. 安装MySQL</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=abc123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;  <span class="string">&quot;registry-mirrors&quot;</span>: [   </span><br><span class="line">        <span class="string">&quot;https://docker-0.unsee.tech&quot;</span>,  </span><br><span class="line">        <span class="string">&quot;https://docker-cf.registry.cyou&quot;</span>,   </span><br><span class="line">        <span class="string">&quot;https://docker.1panel.live&quot;</span>  </span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="3-docker常见命令">3. Docker常见命令</h3>
<p><img src="https://bu.dusays.com/2025/07/14/68743df04bd52.png" alt="img"></p>
<table>
<thead>
<tr>
<th style="text-align: center;">命令</th>
<th style="text-align: center;">说明</th>
<th style="text-align: center;">文档地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">docker images</td>
<td style="text-align: center;">查看本地镜像</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker
images</a></td>
</tr>
<tr>
<td style="text-align: center;">docker rmi</td>
<td style="text-align: center;">删除本地镜像</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker
rmi</a></td>
</tr>
<tr>
<td style="text-align: center;">docker run</td>
<td style="text-align: center;">创建并运行容器（不能重复创建）</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker
run</a></td>
</tr>
<tr>
<td style="text-align: center;">docker stop</td>
<td style="text-align: center;">停止指定容器</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker
stop</a></td>
</tr>
<tr>
<td style="text-align: center;">docker start</td>
<td style="text-align: center;">启动指定容器</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker
start</a></td>
</tr>
<tr>
<td style="text-align: center;">docker restart</td>
<td style="text-align: center;">重新启动容器</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker
restart</a></td>
</tr>
<tr>
<td style="text-align: center;">docker rm</td>
<td style="text-align: center;">删除指定容器</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker ps</td>
<td style="text-align: center;">查看容器</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker
ps</a></td>
</tr>
<tr>
<td style="text-align: center;">docker logs</td>
<td style="text-align: center;">查看容器运行日志</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker
logs</a></td>
</tr>
<tr>
<td style="text-align: center;">docker exec</td>
<td style="text-align: center;">进入容器</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker
exec</a></td>
</tr>
<tr>
<td style="text-align: center;">docker save</td>
<td style="text-align: center;">保存镜像到本地压缩文件</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker
save</a></td>
</tr>
<tr>
<td style="text-align: center;">docker load</td>
<td style="text-align: center;">加载本地压缩文件到镜像</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker
load</a></td>
</tr>
<tr>
<td style="text-align: center;">docker inspect</td>
<td style="text-align: center;">查看容器详细信息</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker
inspect</a></td>
</tr>
</tbody>
</table>
<p><img src="https://bu.dusays.com/2025/07/14/68743f28292ae.png" alt="image-20250714072007387"></p>
<p>如何把镜像交给运维人员：1.使用docker
save形成本地压缩包，运维人员再使用docker
load将本地这个压缩包进行解压；2.将镜像推送到镜像仓库，运维人员再从镜像仓库进行拉取</p>
<h3 id="4-数据卷">4. 数据卷</h3>
<p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p>
<ul>
<li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li>
<li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li>
<li>我想要让Nginx代理我的静态资源怎么办？</li>
</ul>
<p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p>
<h4 id="41-什么是数据卷">4.1 什么是数据卷</h4>
<p><strong>数据卷（volume）<strong>是一个虚拟目录，是</strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。（ps：其实类似于双向绑定，修改数据卷里面的nginx内容，实际的nginx的内容也会修改）</p>
<p>以Nginx为例，我们知道Nginx中有两个关键的目录：</p>
<ul>
<li><code>html</code>：放置一些静态资源</li>
<li><code>conf</code>：放置配置文件</li>
</ul>
<p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p>
<p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p>
<p><img src="https://bu.dusays.com/2025/07/14/687441cd20ef8.png" alt="image-20250714073124180"></p>
<p>在上图中：</p>
<ul>
<li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li>
<li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li>
<li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li>
</ul>
<p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就
与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p>
<h4 id="42-数据卷的命令">4.2 数据卷的命令</h4>
<table>
<thead>
<tr>
<th style="text-align: center;"><strong>命令</strong></th>
<th style="text-align: center;"><strong>说明</strong></th>
<th style="text-align: center;"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">docker volume create</td>
<td style="text-align: center;">创建数据卷</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker
volume create</a></td>
</tr>
<tr>
<td style="text-align: center;">docker volume ls</td>
<td style="text-align: center;">查看所有数据卷</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker volume rm</td>
<td style="text-align: center;">删除指定数据卷</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker volume inspect</td>
<td style="text-align: center;">查看某个数据卷的详情</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker volume prune</td>
<td style="text-align: center;">清除数据卷</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker
volume prune</a></td>
</tr>
</tbody>
</table>
<p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p>
<p>如何挂载数据卷？</p>
<ul>
<li>在创建容器时，利用-v数据卷名:容器内目录完成挂载</li>
<li>容器创建时，如果发现挂载的数据卷不存在时，会自动创建</li>
</ul>
<h4 id="43-创建nginx-数据卷">4.3 创建Nginx 数据卷</h4>
<p><img src="https://bu.dusays.com/2025/07/14/68744990bc1b6.png" alt="image-20250714080431521"> 哇神奇</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker rm -f nginx</span></span><br><span class="line">nginx</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span></span><br><span class="line">d7d95a4dd8cb76b5a4baeb1a17ab2f5acbfdfe34844da319d3c7e30bfa1be047</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED             STATUS             PORTS                                                  NAMES</span><br><span class="line">d7d95a4dd8cb   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">8</span> seconds ago       Up <span class="number">7</span> seconds       <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp, :::<span class="number">80</span>-&gt;<span class="number">80</span>/tcp                      nginx</span><br><span class="line"><span class="number">5</span>bb7b84c208d   mysql     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   About an hour ago   Up About an hour   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, :::<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="number">33060</span>/tcp   mysql</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     f029801a77bbe84d7ee550a9cce21abf4644a56906111cc68be691efd9495a9e</span><br><span class="line">local     html</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker volume inspect html</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2025-07-13T22:12:13+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd /var/lib/docker/volumes/html/_data</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">_data</span>]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是 Docker 的默认存储位置，所有命名卷都会存放在
<code>/var/lib/docker/volumes/&lt;卷名&gt;/_data</code> 下</p>
<p>volume对应的宿主机目录，html是虚拟目录
，<code>/usr/share/nginx/html</code> 容器内的对应目录</p>
<p><img src="https://bu.dusays.com/2025/07/14/68746bec07642.png" alt="image-20250714103106907"></p>
<h4 id="44-mysql-容器的数据挂载">4.4 MySQL 容器的数据挂载</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker inspect mysql</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;e4c3c8923f08031b15e4590cbc0a10209867ac4793a46ac409e4ae3d6923cea9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2025-07-13T18:25:21.488931875Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;docker-entrypoint.sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;mysqld&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="type">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: <span class="number">52260</span>,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2025-07-13T18:25:21.819305537Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;c5ab9bdf061d55de6fc1d602ff8e644d915611171539536ea48f1ba0b5092d5e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/c5ab9bdf061d55de6fc1d602ff8e644d915611171539536ea48f1ba0b5092d5e/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="type">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;e4c3c8923f08&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;3306/tcp&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;33060/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;TZ=Asia/Shanghai&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MYSQL_ROOT_PASSWORD=abc123&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;GOSU_VERSION=1.17&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MYSQL_MAJOR=innovation&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MYSQL_VERSION=9.3.0-1.el9&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MYSQL_SHELL_VERSION=9.3.0-1.el9&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;mysqld&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;/var/lib/mysql&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;docker-entrypoint.sh&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;NetworkSettings&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Bridge&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SandboxID&quot;</span>: <span class="string">&quot;bbc2939d84f12f3ba3b2063229491abfaf2b0ee8a52b7b3d605792017b49f3a5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SandboxKey&quot;</span>: <span class="string">&quot;/var/run/docker/netns/bbc2939d84f1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Ports&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;3306/tcp&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;HostIp&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;HostPort&quot;</span>: <span class="string">&quot;3306&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;HostIp&quot;</span>: <span class="string">&quot;::&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;HostPort&quot;</span>: <span class="string">&quot;3306&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;33060/tcp&quot;</span>: <span class="type">null</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;HairpinMode&quot;</span>: <span class="type">false</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;SecondaryIPv6Addresses&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;67d5ed6abb8444918c766a0e9be1ba00a6ed7d9f32d55155e1b7924466ee1a0d&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: <span class="type">null</span>,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: <span class="type">null</span>,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: <span class="type">null</span>,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;2bcb6623ac17cfcba762bc1efedf14674fe023680a15b89e4f5f687f76ad2d90&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;67d5ed6abb8444918c766a0e9be1ba00a6ed7d9f32d55155e1b7924466ee1a0d&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: <span class="type">null</span>,</span><br><span class="line">                    <span class="string">&quot;DNSNames&quot;</span>: <span class="type">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现有默认的数据挂载，但是默认匿名挂载名字复杂目录太深了，下面给他修改到挂载到根目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line"><span class="literal">--name</span> mysql \</span><br><span class="line"><span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line"><span class="literal">-e</span> Tz=Asia/Shanghai \</span><br><span class="line"><span class="literal">-e</span> MYSQL_ROOT_PASSWORD=abc123 \</span><br><span class="line"><span class="literal">-v</span> /root/mysql/<span class="keyword">data</span>:/var/lib/mysql \</span><br><span class="line"><span class="literal">-v</span> /root/mysq1/conf:/etc/mysq1/conf.d \</span><br><span class="line"><span class="literal">-v</span> /root/mysql/init:/docker<span class="literal">-entrypoint-initdb</span>.d \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>

<p>注意：SQL文件必须要有创建数据库的命令，不然无法创建成功数据库</p>
<p>然后将SQL文件放在init文件夹里面</p>
<p>运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line"><span class="literal">--name</span> mysql \</span><br><span class="line"><span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line"><span class="literal">-e</span> Tz=Asia/Shanghai \</span><br><span class="line"><span class="literal">-e</span> MYSQL_ROOT_PASSWORD=abc123 \</span><br><span class="line"><span class="literal">-v</span> /root/mysql/<span class="keyword">data</span>:/var/lib/mysql \</span><br><span class="line"><span class="literal">-v</span> /root/mysq1/conf:/etc/mysq1/conf.d \</span><br><span class="line"><span class="literal">-v</span> /root/mysql/init:/docker<span class="literal">-entrypoint-initdb</span>.d \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>

<p>即可</p>
<h3 id="5-自定义镜像">5. 自定义镜像</h3>
<p>镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p>
<p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。而这种记录镜像结构的文件就称为<strong>Dockerfile</strong></p>
<table>
<thead>
<tr>
<th style="text-align: center;"><strong>指令</strong></th>
<th style="text-align: center;"><strong>说明</strong></th>
<th style="text-align: center;"><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><strong>FROM</strong></td>
<td style="text-align: center;">指定基础镜像</td>
<td style="text-align: center;"><code>FROM centos:6</code></td>
</tr>
<tr>
<td style="text-align: center;"><strong>ENV</strong></td>
<td style="text-align: center;">设置环境变量，可在后面指令使用</td>
<td style="text-align: center;"><code>ENV key value</code></td>
</tr>
<tr>
<td style="text-align: center;"><strong>COPY</strong></td>
<td style="text-align: center;">拷贝本地文件到镜像的指定目录</td>
<td style="text-align: center;"><code>COPY ./xx.jar /tmp/app.jar</code></td>
</tr>
<tr>
<td style="text-align: center;"><strong>RUN</strong></td>
<td style="text-align: center;">执行Linux的shell命令，一般是安装过程的命令</td>
<td style="text-align: center;"><code>RUN yum install gcc</code></td>
</tr>
<tr>
<td style="text-align: center;"><strong>EXPOSE</strong></td>
<td style="text-align: center;">指定容器运行时监听的端口，是给镜像使用者看的</td>
<td style="text-align: center;"><code>EXPOSE 8080</code></td>
</tr>
<tr>
<td style="text-align: center;"><strong>ENTRYPOINT</strong></td>
<td style="text-align: center;">镜像中应用的启动命令，容器运行时调用</td>
<td style="text-align: center;"><code>ENTRYPOINT java -jar xx.jar</code></td>
</tr>
</tbody>
</table>
<h3 id="6-网络">6. 网络</h3>
<p>容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p>
<p>所以，我们必须借助于docker的网络功能来解决这个问题 常见命令</p>
<table>
<thead>
<tr>
<th style="text-align: center;"><strong>命令</strong></th>
<th style="text-align: center;"><strong>说明</strong></th>
<th style="text-align: center;"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">docker network create</td>
<td style="text-align: center;">创建一个网络</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker
network create</a></td>
</tr>
<tr>
<td style="text-align: center;">docker network ls</td>
<td style="text-align: center;">查看所有网络</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker network rm</td>
<td style="text-align: center;">删除指定网络</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker network prune</td>
<td style="text-align: center;">清除未使用的网络</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker network connect</td>
<td style="text-align: center;">使指定容器连接加入某网络</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td>
</tr>
<tr>
<td style="text-align: center;">docker network disconnect</td>
<td style="text-align: center;">使指定容器连接离开某网络</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker
network disconnect</a></td>
</tr>
<tr>
<td style="text-align: center;">docker network inspect</td>
<td style="text-align: center;">查看网络详细信息</td>
<td style="text-align: center;"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker
network inspect</a></td>
</tr>
</tbody>
</table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">mysql</span>]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f1a34d4477b4   baskly    bridge    local</span><br><span class="line"><span class="number">2</span>bcb6623ac17   bridge    bridge    local</span><br><span class="line">e693457ba93b   host      host      local</span><br><span class="line"><span class="number">028</span>d2b795efa   none      null      local</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">mysql</span>]<span class="comment"># docker network connect baskly mysql</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">mysql</span>]<span class="comment"># docker inspect mysql</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7使用docker打包项目tlias为例">7.使用Docker打包项目（tlias为例）</h3>
<blockquote>
<p>老东西 终于把焚决交出来了</p>
</blockquote>
<h4 id="71后端打包">7.1后端打包</h4>
<ol type="1">
<li><p>准备MySQL容器，并且创建tlias数据库以及表结构（上面在本地目录挂载MySQL时已经2完成）</p></li>
<li><p>准备Java应用（tlias）镜像，部署Docker容器，运行测试</p>
<ul>
<li><p>修改tlias项目的配置文件，修改数据库服务地址及logback日志文件存放地址，打jar包。</p></li>
<li><p>编写Dockerfile文件。</p></li>
<li><p>构建Docker镜像。</p></li>
<li><p>部署Docker容器。</p></li>
</ul></li>
</ol>
<h5 id="具体步骤">具体步骤</h5>
<ol type="1">
<li><p>打开idea将yml中数据库连接部分改为Docker中的MySQL</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">   <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">   <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/tlias?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">   <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">   <span class="attr">password:</span> <span class="string">abc123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在idea中的Maven中的Lifecycle中点击<code>package</code>,等待build成功。然后我们的target文件夹中会出现我们的Jar包了。jar包名字很长可以适当重命名</p></li>
<li><p>新建Dockerfile</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 CentOS 7 作为基础镜像</span></span><br><span class="line">FROM centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 JDK 到镜像中</span></span><br><span class="line"><span class="built_in">COPY</span> jdk21.tar.gz /usr/local/</span><br><span class="line">RUN tar <span class="literal">-xzf</span> /usr/local/jdk21.tar.gz <span class="literal">-C</span> /usr/local/ &amp;&amp;  <span class="built_in">rm</span> /usr/local/jdk21.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=/usr/local/jdk<span class="literal">-21</span>.<span class="number">0.1</span></span><br><span class="line">ENV PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置阿里云OSS</span></span><br><span class="line">ENV OSS_ACCESS_KEY_ID=[你的]</span><br><span class="line">ENV OSS_ACCESS_KEY_SECRET=[你的]</span><br><span class="line"><span class="comment">#统一编码</span></span><br><span class="line">ENV LANG=en_US.UTF<span class="literal">-8</span></span><br><span class="line">ENV LANGUAGE=en_US:en</span><br><span class="line">ENV LC_ALL=en_US.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建应用目录</span></span><br><span class="line">RUN mkdir <span class="literal">-p</span> /tlias</span><br><span class="line">WORKDIR /tlias</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用 JAR 文件到容器</span></span><br><span class="line"><span class="built_in">COPY</span>  tlias.jar  tlias.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/tlias/tlias.jar&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>/usr/local/</code>下新建<code>tlias-docker-app</code>文件夹，里面上传进去我们的<code>tlias.jar</code>,<code>Dockerfile</code>,<code>jdk21</code></p></li>
<li><p>然后去构建Docker镜像</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tlias</span>-<span class="type">docker</span>-<span class="type">app</span>]<span class="comment"># docker build -t tlias:1.0 .</span></span><br><span class="line">[+] Building <span class="number">266.8</span>s (<span class="number">11</span>/<span class="number">11</span>) FINISHED                             docker:default</span><br><span class="line"> =&gt; [<span class="built_in">int</span><span class="type">ernal</span>] load build definition from Dockerfile                       <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: <span class="number">818</span>B                                       <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="built_in">int</span><span class="type">ernal</span>] load metadata <span class="keyword">for</span> docker.io/library/centos:<span class="number">7</span>              <span class="number">146.9</span>s</span><br><span class="line"> =&gt; [<span class="built_in">int</span><span class="type">ernal</span>] load .dockerignore                                          <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; transferring context: <span class="number">2</span>B                                            <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="number">1</span>/<span class="number">6</span>] FROM docker.io/library/centos:<span class="number">7</span>@sha256:be65f488b7764ad3638f23  <span class="number">111.2</span>s</span><br><span class="line"> =&gt; =&gt; resolve docker.io/library/centos:<span class="number">7</span>@sha256:be65f488b7764ad3638f236b  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809 <span class="number">2.75</span>kB / <span class="number">2.75</span>kB  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; sha256:<span class="number">2</span>d473b07cdd5f0912cd6f1a703352c82b512407 <span class="number">76.10</span>MB / <span class="number">76.10</span>MB  <span class="number">103.9</span>s</span><br><span class="line"> =&gt; =&gt; sha256:be65f488b7764ad3638f236b7b515b3678369a5124c <span class="number">1.20</span>kB / <span class="number">1.20</span>kB  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; sha256:dead07b4d8ed7e29e98de0f4504d87e8880d4347859d839 <span class="number">529</span>B / <span class="number">529</span>B  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; extracting sha256:<span class="number">2</span>d473b07cdd5f0912cd6f1a703352c82b512407db6b05b43  <span class="number">7.1</span>s</span><br><span class="line"> =&gt; [<span class="built_in">int</span><span class="type">ernal</span>] load build context                                          <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; transferring context: <span class="number">173</span>B                                          <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="number">2</span>/<span class="number">6</span>] <span class="built_in">COPY</span> jdk21.tar.gz /usr/local/                                    <span class="number">2.0</span>s</span><br><span class="line"> =&gt; [<span class="number">3</span>/<span class="number">6</span>] RUN tar <span class="literal">-xzf</span> /usr/local/jdk21.tar.gz <span class="literal">-C</span> /usr/local/ &amp;&amp;  <span class="built_in">rm</span> /usr  <span class="number">5.4</span>s</span><br><span class="line"> =&gt; [<span class="number">4</span>/<span class="number">6</span>] RUN mkdir <span class="literal">-p</span> /tlias                                              <span class="number">0.4</span>s</span><br><span class="line"> =&gt; [<span class="number">5</span>/<span class="number">6</span>] WORKDIR /tlias                                                   <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="number">6</span>/<span class="number">6</span>] <span class="built_in">COPY</span>  tlias.jar  tlias.jar                                       <span class="number">0.1</span>s</span><br><span class="line"> =&gt; exporting to image                                                     <span class="number">0.7</span>s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                    <span class="number">0.6</span>s</span><br><span class="line"> =&gt; =&gt; writing image sha256:<span class="number">8</span>b8dd47f37a8752599c8d24b4b01dcce96ccb2469d4f4  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/tlias:<span class="number">1.0</span>                               <span class="number">0.0</span>s</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tlias</span>-<span class="type">docker</span>-<span class="type">app</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">tlias        <span class="number">1.0</span>       <span class="number">8</span>b8dd47f37a8   About a minute ago   <span class="number">783</span>MB</span><br><span class="line">redis        latest    f2cd22713a18   <span class="number">7</span> days ago           <span class="number">128</span>MB</span><br><span class="line">nginx        latest    <span class="number">9592</span>f5595f2b   <span class="number">2</span> weeks ago          <span class="number">192</span>MB</span><br><span class="line">mysql        latest    <span class="number">4</span>c2531d6bf10   <span class="number">2</span> months ago         <span class="number">859</span>MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>取名字为tlias，版本1.0，在当前文件夹里</p></li>
<li><p>部署docker容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tlias</span>-<span class="type">docker</span>-<span class="type">app</span>]<span class="comment"># docker run -d --name tlias-server -p 8080:8080 --network baskly tlias:1.0</span></span><br><span class="line">ffc30c9fde8cf187b0c035e1fd27b12417ebcf988af34b3779c2cf50040f7a4d</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tlias</span>-<span class="type">docker</span>-<span class="type">app</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS          PORTS   NAMES</span><br><span class="line">ffc30c9fde8c   tlias:<span class="number">1.0</span>   <span class="string">&quot;java -jar /tlias/tl…&quot;</span>   <span class="number">18</span> seconds ago   Up <span class="number">17</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp   tlias<span class="literal">-server</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>docker logs -f tlias-service</code>
查看后端启动日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> tlias-docker-app]# docker logs -f tlias-server</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v3.4.4)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2025-07-13T21:02:32.843Z  INFO 1 --- [tlias-web-managemen] [           main] c.itheima.TliasWebManagemenApplication   : Starting TliasWebManagemenApplication v0.0.1-SNAPSHOT using Java 21.0.1 with PID 1 (/tlias/tlias.jar started by root in /tlias)</span></span><br><span class="line"><span class="string">2025-07-13T21:02:32.849Z  INFO 1 --- [tlias-web-managemen] [           main] c.itheima.TliasWebManagemenApplication   : No active profile set, falling back to 1 default profile: &quot;default&quot;</span></span><br><span class="line"><span class="string">2025-07-13T21:02:35.395Z  INFO 1 --- [tlias-web-managemen] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)</span></span><br><span class="line"><span class="string">2025-07-13T21:02:35.427Z  INFO 1 --- [tlias-web-managemen] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="string">2025-07-13T21:02:35.428Z  INFO 1 --- [tlias-web-managemen] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]</span></span><br><span class="line"><span class="string">2025-07-13T21:02:35.493Z  INFO 1 --- [tlias-web-managemen] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="string">2025-07-13T21:02:35.495Z  INFO 1 --- [tlias-web-managemen] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2524 ms</span></span><br><span class="line"><span class="string">Logging initialized using &#x27;</span><span class="keyword">class</span> <span class="title class_">org</span>.apache.ibatis.logging.stdout.StdOutImpl<span class="string">&#x27; adapter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,------.                           ,--.  ,--.         ,--.</span></span><br><span class="line"><span class="string">|  .--. &#x27;</span>  ,--,--.  ,---.   ,---.  |  <span class="string">&#x27;--&#x27;</span>  |  ,---.  |  |  ,---.   ,---.  ,--.--.</span><br><span class="line">|  <span class="string">&#x27;--&#x27;</span> | <span class="string">&#x27; ,-.  | | .-. | | .-. : |  .--.  | | .-. : |  | | .-. | | .-. : |  .--&#x27;</span></span><br><span class="line">|  | --<span class="string">&#x27;  \ &#x27;</span>-<span class="string">&#x27;  | &#x27;</span> <span class="string">&#x27;-&#x27;</span> <span class="string">&#x27; \   --. |  |  |  | \   --. |  | | &#x27;</span>-<span class="string">&#x27; &#x27;</span> \   --. |  |</span><br><span class="line">`--<span class="string">&#x27;       `--`--&#x27;</span> .`-  /   `----<span class="string">&#x27; `--&#x27;</span>  `--<span class="string">&#x27;  `----&#x27;</span> `--<span class="string">&#x27; |  |-&#x27;</span>   `----<span class="string">&#x27; `--&#x27;</span></span><br><span class="line">                   `---<span class="string">&#x27;                                   `--&#x27;</span>                        is intercepting.</span><br><span class="line"></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-13T21:<span class="number">02</span>:<span class="number">37.</span>128Z  INFO <span class="number">1</span> --- [tlias-web-managemen] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port <span class="number">8080</span> (http) with context path <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-13T21:<span class="number">02</span>:<span class="number">37.</span>149Z  INFO <span class="number">1</span> --- [tlias-web-managemen] [           main] c.itheima.TliasWebManagemenApplication   : Started TliasWebManagemenApplication in <span class="number">5.209</span> seconds (process running <span class="keyword">for</span> <span class="number">5.838</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>这样我们的项目就启动成功了使用ApiFox发送请求也能正常输出结果 <img src="https://bu.dusays.com/2025/07/14/6874a49234ca3.png" alt="image-20250714143249324"></p></li>
</ol>
<h4 id="72-前端项目部署">7.2. 前端项目部署</h4>
<p>创建一个新的nginx容器，将资料中提供的前端项目的静态资源部署到nginx中。</p>
<p><img src="https://bu.dusays.com/2025/07/14/6874a598518f0.png" alt="image-20250714143712192"></p>
<ol type="1">
<li><p>在root文件夹下创建一个新文件夹用于映射Nginx，名字叫<code>tlias-nginx</code>。</p></li>
<li><p>然后配置挂载</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line"> <span class="literal">--name</span> nginx<span class="literal">-tlias</span> \</span><br><span class="line"> <span class="literal">-v</span> /root/tlias<span class="literal">-nginx</span>/html:/usr/share/nginx/html \</span><br><span class="line"> <span class="literal">-v</span> /root/tlias<span class="literal">-nginx</span>/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line"> <span class="literal">--network</span> baskly \</span><br><span class="line"> <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> \</span><br><span class="line">nginx:<span class="number">1.20</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后访问（未开启需要开启一下服务）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ntpdate（若未安装）</span></span><br><span class="line">sudo yum install <span class="literal">-y</span> ntpdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步阿里云时间服务器（北京时间）</span></span><br><span class="line">sudo ntpdate ntp.aliyun.com</span><br></pre></td></tr></table></figure>

<p>解决因为Linux时间和系统系统不符导致的时区不同步问题</p></li>
</ol>
<h3 id="8-dockercompose">8. DockerCompose</h3>
<blockquote>
<p>老东西 把异火也交出来了</p>
</blockquote>
<p>Docker Compose通过一个单独的docker-compose.yml模板文件（YANL
格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</p>
<p><img src="https://bu.dusays.com/2025/07/14/6874b22bd22c4.png" alt="image-20250714153048956"></p>
<p>现在我们使用DockerCompose来重新构建项目</p>
<ul>
<li>准备资源（tlias.sql，服务端的jdk17、jar包、Dockerfile，前端项目打包文件、nginx.conf)</li>
<li>准备docker-compose.yml配置文件</li>
<li>基于DockerCompose快速构建项目</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">abc123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/usr/local/app/mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/usr/local/app/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/usr/local/app/mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlias-net</span></span><br><span class="line">  <span class="attr">tlias:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tlias-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlias-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-tlias</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/usr/local/app/nginx/conf/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/usr/local/app/nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlias</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlias-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">tlias-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">itheima</span></span><br></pre></td></tr></table></figure>

<p>根据compose定义的路径在文件夹下新建空文件夹，然后将以下文件存放在文件夹中</p>
<p><img src="https://bu.dusays.com/2025/07/14/6874bc04e9c7b.png" alt="image-20250714161252989"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker compose [<span class="type">OPTIONS</span>] [<span class="type">COMMAND</span>]</span><br></pre></td></tr></table></figure>

<p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>参数或指令</strong></th>
<th style="text-align: center;"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Options</td>
<td>-f</td>
<td style="text-align: center;">指定compose文件的路径和名称</td>
</tr>
<tr>
<td></td>
<td>-p</td>
<td style="text-align: center;">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td>
</tr>
<tr>
<td>Commands</td>
<td>up</td>
<td style="text-align: center;">创建并启动所有service容器</td>
</tr>
<tr>
<td></td>
<td>down</td>
<td style="text-align: center;">停止并移除所有容器、网络</td>
</tr>
<tr>
<td></td>
<td>ps</td>
<td style="text-align: center;">列出所有启动的容器</td>
</tr>
<tr>
<td></td>
<td>logs</td>
<td style="text-align: center;">查看指定容器的日志</td>
</tr>
<tr>
<td></td>
<td>stop</td>
<td style="text-align: center;">停止容器</td>
</tr>
<tr>
<td></td>
<td>start</td>
<td style="text-align: center;">启动容器</td>
</tr>
<tr>
<td></td>
<td>restart</td>
<td style="text-align: center;">重启容器</td>
</tr>
<tr>
<td></td>
<td>top</td>
<td style="text-align: center;">查看运行的进程</td>
</tr>
<tr>
<td></td>
<td>exec</td>
<td style="text-align: center;">在指定的运行中容器中执行命令</td>
</tr>
</tbody>
</table>
<ol type="1">
<li><p>创建容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">app</span>]<span class="comment"># docker compose up -d</span></span><br><span class="line">[+] Running <span class="number">11</span>/<span class="number">11</span></span><br><span class="line"> ✔ mysql Pulled                                                           <span class="number">94.0</span>s</span><br><span class="line">   ✔ <span class="number">90</span>dac1e734aa Already exists                                           <span class="number">0.0</span>s</span><br><span class="line">   ✔ bf40b60a847d Pull complete                                           <span class="number">32.0</span>s</span><br><span class="line">   ✔ <span class="number">9</span>d9cb66e1171 Pull complete                                           <span class="number">32.1</span>s</span><br><span class="line">   ✔ <span class="number">31</span>b29e08d2d1 Pull complete                                           <span class="number">32.8</span>s</span><br><span class="line">   ✔ <span class="number">1</span>f5a1dfb5b55 Pull complete                                           <span class="number">32.8</span>s</span><br><span class="line">   ✔ <span class="number">7</span>becd864c61c Pull complete                                           <span class="number">32.8</span>s</span><br><span class="line">   ✔ <span class="number">00</span>a0a1479659 Pull complete                                           <span class="number">35.0</span>s</span><br><span class="line">   ✔ cff841917be4 Pull complete                                           <span class="number">35.0</span>s</span><br><span class="line">   ✔ <span class="number">8</span>e98c1c43da6 Pull complete                                           <span class="number">76.4</span>s</span><br><span class="line">   ✔ <span class="number">61</span>ba5ff08093 Pull complete                                           <span class="number">76.4</span>s</span><br><span class="line">[+] Building <span class="number">38.5</span>s (<span class="number">11</span>/<span class="number">11</span>) FINISHED                              docker:default</span><br><span class="line"> =&gt; [<span class="type">tlias</span> <span class="built_in">int</span><span class="type">ernal</span>] load build definition from Dockerfile                 <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: <span class="number">818</span>B                                       <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="type">tlias</span> <span class="built_in">int</span><span class="type">ernal</span>] load metadata <span class="keyword">for</span> docker.io/library/centos:<span class="number">7</span>         <span class="number">36.3</span>s</span><br><span class="line"> =&gt; [<span class="type">tlias</span> <span class="built_in">int</span><span class="type">ernal</span>] load .dockerignore                                    <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; transferring context: <span class="number">2</span>B                                            <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="type">tlias</span> <span class="number">1</span>/<span class="number">6</span>] FROM docker.io/library/centos:<span class="number">7</span>@sha256:be65f488b7764ad363  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="type">tlias</span> <span class="built_in">int</span><span class="type">ernal</span>] load build context                                    <span class="number">2.1</span>s</span><br><span class="line"> =&gt; =&gt; transferring context: <span class="number">232.73</span>MB                                      <span class="number">2.1</span>s</span><br><span class="line"> =&gt; CACHED [<span class="type">tlias</span> <span class="number">2</span>/<span class="number">6</span>] <span class="built_in">COPY</span> jdk21.tar.gz /usr/local/                       <span class="number">0.0</span>s</span><br><span class="line"> =&gt; CACHED [<span class="type">tlias</span> <span class="number">3</span>/<span class="number">6</span>] RUN tar <span class="literal">-xzf</span> /usr/local/jdk21.tar.gz <span class="literal">-C</span> /usr/local  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; CACHED [<span class="type">tlias</span> <span class="number">4</span>/<span class="number">6</span>] RUN mkdir <span class="literal">-p</span> /tlias                                 <span class="number">0.0</span>s</span><br><span class="line"> =&gt; CACHED [<span class="type">tlias</span> <span class="number">5</span>/<span class="number">6</span>] WORKDIR /tlias                                      <span class="number">0.0</span>s</span><br><span class="line"> =&gt; CACHED [<span class="type">tlias</span> <span class="number">6</span>/<span class="number">6</span>] <span class="built_in">COPY</span>  tlias.jar  tlias.jar                          <span class="number">0.0</span>s</span><br><span class="line"> =&gt; [<span class="type">tlias</span>] exporting to image                                             <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                    <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; writing image sha256:e2a98bd74211094262b8ba068f777e782edeba8b11cdf  <span class="number">0.0</span>s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/app<span class="literal">-tlias</span>                               <span class="number">0.0</span>s</span><br><span class="line">[+] Running <span class="number">4</span>/<span class="number">4</span></span><br><span class="line"> ✔ Network itheima         Created                                         <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container mysql         Started                                         <span class="number">1.2</span>s</span><br><span class="line"> ✔ Container tlias<span class="literal">-server</span>  Started                                         <span class="number">1.2</span>s</span><br><span class="line"> ✔ Container nginx<span class="literal">-tlias</span>   Started   </span><br></pre></td></tr></table></figure>
</li>
<li><p>开始停止容器</p>
   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">app</span>]<span class="comment"># docker compose stop</span></span><br><span class="line">[+] Stopping <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> ✔ Container nginx<span class="literal">-tlias</span>   Stopped                                         <span class="number">0.2</span>s</span><br><span class="line"> ✔ Container tlias<span class="literal">-server</span>  Stopped                                         <span class="number">0.2</span>s</span><br><span class="line"> ✔ Container mysql         Stopped                                         <span class="number">2.9</span>s</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">app</span>]<span class="comment"># docker compose start</span></span><br><span class="line">[+] Running <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> ✔ Container mysql         Started                                         <span class="number">0.3</span>s</span><br><span class="line"> ✔ Container tlias<span class="literal">-server</span>  Started                                         <span class="number">0.3</span>s</span><br><span class="line"> ✔ Container nginx<span class="literal">-tlias</span>   Started                                         <span class="number">0.4</span>s</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">app</span>]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>🥲心心念念的Docker终于结束了</p></li>
</ol>
<h1 id="二微服务01">二、微服务01</h1>
<h3 id="1-导入后端项目">1. 导入后端项目</h3>
<p>导入后端项目启动项目时报了错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.InaccessibleObjectException</span><br></pre></td></tr></table></figure>

<p>看弹幕说时因为MyBatisPlus版本与Java高版本冲突导致的反射问题</p>
<p><img src="https://bu.dusays.com/2025/07/14/6874f9c876c67.png" alt="image-20250714203620847"></p>
<p>配置vm</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">--add-opens</span> java.base/java.lang.invoke=ALL<span class="literal">-UNNAMED</span></span><br></pre></td></tr></table></figure>

<p>即可解决</p>
<h4 id="解决时区不同步问题">解决时区不同步问题</h4>
<p><img src="https://bu.dusays.com/2025/07/15/68759b7de967c.png" alt="image-20250715080613698"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># date</span></span><br><span class="line"><span class="number">2025</span>年 <span class="number">07</span>月 <span class="number">14</span>日 星期一 <span class="number">21</span>:<span class="number">22</span>:<span class="number">05</span> CST</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># hwclock</span></span><br><span class="line"><span class="number">2025</span>年<span class="number">07</span>月<span class="number">14</span>日 星期一 <span class="number">21</span>时<span class="number">22</span>分<span class="number">51</span>秒  <span class="literal">-0</span>.<span class="number">695010</span> 秒</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># systemctl status ntpd</span></span><br><span class="line">● ntpd.service - Network Time Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 一 <span class="number">2025</span><span class="literal">-07-14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> CST; <span class="number">10</span><span class="built_in">h</span> ago</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">43362</span> ExecStart=/usr/sbin/ntpd <span class="literal">-u</span> ntp:ntp <span class="variable">$OPTIONS</span> (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">43363</span> (ntpd)</span><br><span class="line">    Tasks: <span class="number">1</span></span><br><span class="line">   Memory: <span class="number">624.0</span>K</span><br><span class="line">   CGroup: /system.slice/ntpd.service</span><br><span class="line">           └─<span class="number">43363</span> /usr/sbin/ntpd <span class="literal">-u</span> ntp:ntp <span class="literal">-g</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost ntpd[<span class="number">43363</span>]: Listen normally on <span class="number">9</span> ens33 fe80::<span class="number">8396</span>:<span class="number">4</span>bf:<span class="number">9262</span>:f21 UDP <span class="number">123</span></span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost ntpd[<span class="number">43363</span>]: Listen normally on <span class="number">10</span> veth1ba4f03 fe80::<span class="number">3</span>cd2:e1ff:fe8b:fa0a UDP <span class="number">123</span></span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost ntpd[<span class="number">43363</span>]: Listening on routing socket on fd <span class="comment">#27 for interface updates</span></span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost ntpd[<span class="number">43363</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c016 <span class="number">06</span> restart</span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost ntpd[<span class="number">43363</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c012 <span class="number">02</span> freq_set kernel <span class="number">0.000</span> PPM</span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost ntpd[<span class="number">43363</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c011 <span class="number">01</span> freq_not_set</span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">01</span> localhost systemd[<span class="number">1</span>]: Started Network Time Service.</span><br><span class="line"><span class="number">7</span>月 <span class="number">14</span> <span class="number">21</span>:<span class="number">22</span>:<span class="number">09</span> localhost ntpd[<span class="number">43363</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c61c <span class="number">0</span>c clock_step +<span class="number">38329.171798</span> s</span><br><span class="line"><span class="number">7</span>月 <span class="number">15</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">58</span> localhost ntpd[<span class="number">43363</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c614 <span class="number">04</span> freq_mode</span><br><span class="line"><span class="number">7</span>月 <span class="number">15</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">59</span> localhost ntpd[<span class="number">43363</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c618 <span class="number">08</span> no_sys_peer</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># date</span></span><br><span class="line"><span class="number">2025</span>年 <span class="number">07</span>月 <span class="number">15</span>日 星期二 <span class="number">08</span>:<span class="number">02</span>:<span class="number">44</span> CST</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-单体架构与微服务">2. 单体架构与微服务</h3>
<p>单体架构:将业务的所有功能集中在一个项目中开发，打成一个包部署。</p>
<p>优点：架构简单，部署成本低</p>
<p>缺点：团队协作成本高，系统发布效率低，系统可用性差</p>
<p>微服务架构，是服务化思想指导下的一套最佳实践架构方案。服务化，就是把单体架构中的功能模块拆分为多个独立项目。</p>
<h3 id="3-微服务拆分原则">3. 微服务拆分原则</h3>
<p><img src="https://bu.dusays.com/2025/07/15/68759e54a2d78.png" alt="image-20250715081827665"></p>
<p>什么时候需要拆分微服务？</p>
<ul>
<li>如果是创业型公司，最好先用单体架构快速迭代开发，验证市场运作模型，快速试错。当业务跑通以后，随着业务规模扩大、人员规模增加，再考虑拆分微服务。</li>
<li>如果是大型企业，有充足的资源，可以在项目开始之初就搭建微服务架构</li>
</ul>
<p>如何拆分？</p>
<ul>
<li>首先要做到高内聚、低耦合</li>
<li>从拆分方式来说，有横向拆分和纵向拆分两种。纵向就是按照业务功能模块，横向则是拆分通用性业务，提高复用性</li>
</ul>
<p>服务拆分之后，不可避免的会出现跨微服务的业务，此时微服务之间就需要进行远程调用。微服务之间的远程调用被称为RPC，即远程过程调用。RPC的实现方式有很多，比如：</p>
<ul>
<li>基于Http协议</li>
<li>基于Dubbo协议</li>
</ul>
<p>我们使用的是Http方式，这种方式不关心服务提供者的具体技术实现，只要对外暴露Http接口即可，更符合微服务的需要。</p>
<h3 id="4-远程调用rpc">4. 远程调用（RPC）</h3>
<p>在拆分的时候，我们发现一个问题：就是购物车业务中需要查询商品信息，但商品信息查询的逻辑全部迁移到了<code>item-service</code>服务，导致我们无法查询。</p>
<p>最终结果就是查询到的购物车数据不完整，因此要想解决这个问题，我们就必须改造其中的代码，把原本本地方法调用，改造成跨微服务的远程调用（RPC，即<strong>R</strong>emote
<strong>P</strong>roduce <strong>C</strong>all）。</p>
<p>因此，现在查询购物车列表的流程变成了这样：</p>
<p><img src="https://bu.dusays.com/2025/07/15/6875bf1040313.png" alt="image-20250715103806173"></p>
<p>那么问题来了：我们该如何跨服务调用，准确的说，如何在<code>cart-service</code>中获取<code>item-service</code>服务中的提供的商品数据呢？</p>
<p>答案是肯定的，我们前端向服务端查询数据，其实就是从浏览器远程查询服务端数据。比如我们刚才通过Swagger测试商品查询接口，就是向<code>http://localhost:8081/items</code>这个接口发起的请求：</p>
<p>而这种查询就是通过http请求的方式来完成的，不仅仅可以实现远程查询，还可以实现新增、删除等各种远程请求。
那么：我们该如何用Java代码发送Http的请求呢？</p>
<h4 id="41-resttemplate">4.1 RestTemplate</h4>
<p>Java发送http请求可以使用Spring提供的RestTemplate，使用的基本步骤如下：</p>
<ul>
<li>注册RestTemplate到Spring容器</li>
<li>调用RestTemplate的API发送请求，常见方法有：
<ul>
<li>getForObject：发送Get请求并返回指定类型对象</li>
<li>PostForObject：发送Post请求并返回指定类型对象</li>
<li>put：发送PUT请求</li>
<li>delete：发送Delete请求</li>
<li>exchange：发送任意类型请求，返回ResponseEntity</li>
</ul></li>
</ul>
<p>感觉这种如果有大量用户同时请求不会变的很卡吗？？？？？？</p>
 <div class="note blue anzhiyufont anzhiyu-icon-bullhorn modern"><p>构造器注入</p>
</div>

<details class="folding-tag" green><summary> 构造器注入 </summary>
              <div class="content">
              <p>Spring推荐我们使用Lombok构造器注入而不是使用<code>@Autowired</code></p><p>因此我们可以在类上添加<code>@RequiredArgsConstructor</code>注解，使用<code>final</code>注入类</p><p>eg：</p><p><img src="https://bu.dusays.com/2025/07/15/6875c44601fb1.png" alt="image-20250715110020446"></p>
              </div>
            </details>

<h4 id="42-注册中心">4.2 注册中心</h4>
<p>在微服务远程调用的过程中，包括两个角色：</p>
<ul>
<li>服务提供者：提供接口供其它微服务访问，比如<code>item-service</code></li>
<li>服务消费者：调用其它微服务提供的接口，比如<code>cart-service</code></li>
<li>服务者可以是消费者，消费者也可以是服务者</li>
</ul>
<p>在大型微服务项目中，服务提供者的数量会非常多，为了管理这些服务就引入了<strong>注册中心</strong>的概念。注册中心、服务提供者、服务消费者三者间关系如下：</p>
<p><img src="https://bu.dusays.com/2025/07/15/687642f91dee1.png" alt="image-20250715200054715"></p>
<p>流程如下：</p>
<ul>
<li>服务启动时就会注册自己的服务信息（服务名、IP、端口）到注册中心</li>
<li>调用者可以从注册中心订阅想要的服务，获取服务对应的实例列表（1个服务可能多实例部署）</li>
<li>调用者自己对实例列表负载均衡，挑选一个实例</li>
<li>调用者向该实例发起远程调用</li>
</ul>
<p>当服务提供者的实例宕机或者启动新实例时，调用者如何得知呢？</p>
<ul>
<li>服务提供者会定期向注册中心发送请求，报告自己的健康状态（心跳请求）</li>
<li>当注册中心长时间收不到提供者的心跳时，会认为该实例宕机，将其从服务的实例列表中剔除</li>
<li>注册中心一旦认为某个实例宕机并将其剔除实例列表，那么其他服务的调用者就无法再调用这个实例。</li>
<li>当服务有新实例启动时，会发送注册服务请求，其信息会被记录在注册中心的服务实例列表</li>
<li>当注册中心服务列表变更时，会主动通知微服务，更新本地服务列表</li>
</ul>
<h4 id="43-nacos注册中心">4.3 Nacos注册中心</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line"><span class="literal">--name</span> nacos \</span><br><span class="line"><span class="literal">--env-file</span> ./nacos/custom.env \</span><br><span class="line"><span class="literal">-p</span> <span class="number">8848</span>:<span class="number">8848</span> \</span><br><span class="line"><span class="literal">-p</span> <span class="number">9848</span>:<span class="number">9848</span> \</span><br><span class="line"><span class="literal">-p</span> <span class="number">9849</span>:<span class="number">9849</span> \</span><br><span class="line"><span class="literal">--restart</span>=always \</span><br><span class="line"><span class="literal">--network</span> hm<span class="literal">-net</span> \</span><br><span class="line">nacos/nacos<span class="literal">-server</span>:v2.<span class="number">1.0</span><span class="literal">-slim</span></span><br></pre></td></tr></table></figure>

<p>访问路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8848</span>/nacos</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/07/15/68764c4d39516.png" alt="image-20250715204042672"></p>
<h4 id="44-openfeign">4.4 OpenFeign</h4>
<p><img src="https://bu.dusays.com/2025/07/16/687759c72d8e2.png" alt="image-20250716155017015"></p>
<p><img src="https://bu.dusays.com/2025/07/16/68775a37c9c09.png" alt="image-20250716155218953"></p>
<p>哇神奇</p>
<p><img src="https://bu.dusays.com/2025/07/16/68775f9635517.png" alt="image-20250716161513007"></p>
<p><img src="https://bu.dusays.com/2025/07/16/687765ea25acb.png" alt="image-20250716164213666"></p>
<ol type="1">
<li>将来Feign可以根据服务名称去注册中心中去拉取实例列表</li>
<li>Feign会使用负载均衡自动获取一个实例（我们在pom中引入了负载均衡的依赖了）</li>
<li>然后定义GET请求，路径为<code>/items</code>,</li>
</ol>
<h4 id="45-连接池">4.5 连接池</h4>
<p>连接池指的是一组预先创建的 HTTP
连接，这些连接可以被重复使用，而不是每次请求都创建一个新的连接。</p>
<p>在 Feign 中，不同的 HTTP 客户端实现对连接池的支持有所不同：</p>
<p><code>HttpURLConnection</code>：</p>
<p>这是 Java 的默认 HTTP
客户端实现，不支持连接池。每次请求都会创建一个新的连接，请求完成后连接会被关闭。这种方式在高并发场景下性能较差。</p>
<p><code>Apache HttpClient</code>：</p>
<p>这是一个功能强大的 HTTP
客户端库，支持连接池。通过配置连接池，可以复用连接，提高性能。</p>
<p><code>OKHttp</code>：</p>
<p>这是另一个流行的 HTTP 客户端库，也支持连接池。OKHttp
的连接池实现高效且易于配置，适合在高并发场景下使用。</p>
<p>OpenFeign对Http请求做了优雅的伪装，不过其底层发起http请求，依赖于其它的框架。这些框架可以自己选择，包括以下三种:</p>
<ul>
<li>HttpURLConnection:默认实现，不支持连接池</li>
<li>Apache Httpclient:支持连接池</li>
<li>OKHttp:支持连接池</li>
</ul>
<p>具体源码可以参考FeignBlockingLoadBalancerClient类中的delegate成员变量。</p>
<p>因此我们通常会使用带有连接池的客户端来代替默认的HttpURLConnection。比如，我们使用OK
Http</p>
<p>在<code>cart-service</code>的<code>pom.xml</code>中引入依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--OK http 的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>cart-service</code>的<code>application.yml</code>配置文件中开启Feign的连接池功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  okhttp:</span><br><span class="line">    enabled: <span class="literal">true</span> # 开启OKHttp功能</span><br></pre></td></tr></table></figure>

<h4 id="46-最佳实践">4.6 最佳实践</h4>
<p><img src="https://bu.dusays.com/2025/07/19/687b4ef5b6320.png" alt="image-20250719155315118"></p>
<p>方案1抽取更加简单，工程结构也比较清晰，但缺点是整个项目耦合度偏高。</p>
<p>方案2抽取相对麻烦，工程结构相对更复杂，但服务之间耦合度降低。</p>
<p>@SpringBootApplication这个注解中包含了@ComponentScan,
这个注解会扫描当前包(com.hmall.cart)中的文件,
而ItemClient由于被抽离到hm-api模块包下(com.hmall.api), 两者包的位置不同,
所以springboot扫描不到. 那么解决方法有: 1. 扩大扫描包的范围,
那么在启动类上添加“@ComponentScan({“com.hmall.cart”,“com.hmall.api”})“,
但此方法不推荐. 2. 使用”@import“注解,
“@EnableFeignClients“就包含了@import注解, 由第三方依赖提供的
@EnableXxxxx注解, basePackages选项可以简化我们的操作,
不需要自己使用@Import.</p>
<p><img src="https://bu.dusays.com/2025/07/19/687b550a170a4.png" alt="image-20250719161917933"></p>
<h4 id="46-日志输出">4.6 日志输出</h4>
<p>OpenFeign只会在FeignClient所在包的日志级别为<strong>DEBUG</strong>时，才会输出日志。而且其日志级别有4级：</p>
<ul>
<li><strong>NONE</strong>：不记录任何日志信息，这是默认值。</li>
<li><strong>BASIC</strong>：仅记录请求的方法，URL以及响应状态码和执行时间</li>
<li><strong>HEADERS</strong>：在BASIC的基础上，额外记录了请求和响应的头信息</li>
<li><strong>FULL</strong>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>
</ul>
<p>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。一般也不开启feign的日志配置，只有在需要调试feign的时候才开启日志，因为日志输出的内容有很多，输出时会影响性能。</p>
<h5 id="定义日志级别">定义日志级别</h5>
<p>在hm-api模块下新建一个配置类，定义Feign的日志级别：</p>
<p>接下来，要让日志级别生效，还需要配置这个类。有两种方式：</p>
<ul>
<li><strong>局部</strong>生效：在某个<code>FeignClient</code>中配置，只对当前<code>FeignClient</code>生效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>全局</strong>生效：在<code>@EnableFeignClients</code>中配置，针对所有<code>FeignClient</code>生效。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure>

<h1 id="三-微服务02">三、 微服务02</h1>
<p>由于每个微服务都有不同的地址或端口，入口不同，相信大家在与前端联调的时候发现了一些问题：</p>
<ul>
<li>请求不同数据时要访问不同的入口，需要维护多个入口地址，麻烦</li>
<li>前端无法调用nacos，无法实时更新服务列表</li>
</ul>
<p>单体架构时我们只需要完成一次用户登录、身份校验，就可以在所有业务中获取到用户信息。而微服务拆分后，每个微服务都独立部署，这就存在一些问题：</p>
<ul>
<li>每个微服务都需要编写登录校验、用户信息获取的功能吗？</li>
<li>当微服务之间调用时，该如何传递用户信息？</li>
</ul>
<p>不要着急，这些问题都可以在今天的学习中找到答案，我们会通过<strong>网关</strong>技术解决上述问题。今天的内容会分为3章：</p>
<ul>
<li>第一章：网关路由，解决前端请求入口的问题。</li>
<li>第二章：网关鉴权，解决统一登录校验和用户信息获取的问题。</li>
<li>第三章：统一配置管理，解决微服务的配置文件重复和配置热更新问题。</li>
</ul>
<p>通过今天的学习你将掌握下列能力：</p>
<ul>
<li>会利用微服务网关做请求路由</li>
<li>会利用微服务网关做登录身份校验</li>
<li>会利用Nacos实现统一配置管理</li>
<li>会利用Nacos实现配置热更新</li>
</ul>
<h2 id="1-网关路由">1. 网关路由</h2>
<p>网关就是<strong>网</strong>络的<strong>关</strong>口。数据在网络间传输，从一个网络传输到另一网络时就需要经过网关来做数据的<strong>路由和转发以及数据安全的校验</strong>。</p>
<p>更通俗的来讲，网关就像是以前园区传达室的大爷。</p>
<ul>
<li>外面的人要想进入园区，必须经过大爷的认可，如果你是不怀好意的人，肯定被直接拦截。</li>
<li>外面的人要传话或送信，要找大爷。大爷帮你带给目标人。</li>
</ul>
<p>现在，微服务网关就起到同样的作用。前端请求不能直接访问微服务，而是要请求网关：</p>
<ul>
<li>网关可以做安全控制，也就是登录身份校验，校验通过才放行</li>
<li>通过认证后，网关再根据请求判断应该访问哪个微服务，将请求转发过去</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/20/687c38bd937a6.png" alt="image-20250720083051495"></p>
<p><code>Route</code>（路由）:
网关的基本构件。它由一个ID、一个目的地URI、一个断言（Predicate）集合和一个过滤器（Filter）集合定义。如果断言为真，则路由被匹配。</p>
<p>网关也相当于一个微服务，其会注册到nacos，并拉取所有的服务信息，所以要获取某个微服务对网关来说不是难事</p>
<p>迷迷糊糊说这么多还是不知道网关是什么🥲🥲</p>
<ol type="1">
<li>前端发送的请求先发给网关，网关进行校验完毕之后使用负载均衡请求到具体的微服务中</li>
<li>前端只要知道网关地址即可（8080），前端所有请求地址都为8080那么就会到达网关，然后网关会根据前端的请求来去判断应该由哪个微服务来处理（判断过程就是请求的路由
），然后网关就会帮你的请求转发到具体的微服务（路由转发）</li>
<li>网关可以利用注册中心（所有的微服务接口都存放在了注册中心），拉取所有的服务中心</li>
<li>网关来负责身份校验，这样转发就不用在此校验了</li>
</ol>
<h3 id="11-网关快速入门">1.1 网关快速入门</h3>
<p>网关也相当于一个微服务，其会注册到nacos，并拉取所有的服务信息，所以要获取某个微服务对网关来说不是难事。</p>
<p>接下来，在<code>hm-gateway</code>模块的<code>resources</code>目录新建一个<code>application.yaml</code>文件，内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item</span> <span class="comment"># 路由规则id，自定义，唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span> <span class="comment"># 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,/search/**</span> <span class="comment"># 这里是以请求路径作为判断规则</span></span><br></pre></td></tr></table></figure>

<h3 id="12-路由属性">1.2 路由属性</h3>
<p>网关路由对应的Java类型是RouteDefinition，其中常见的属性有</p>
<ul>
<li>id:路由唯一标示</li>
<li>uri:路由目标地址</li>
<li>predicates:路由断言，判断请求是否符合当前路由。</li>
<li>filters:路由过滤器，对请求或响应做特殊处理。</li>
</ul>
<h4 id="路由断言">路由断言</h4>
<table>
<thead>
<tr>
<th style="text-align: center;"><strong>名称</strong></th>
<th style="text-align: center;"><strong>说明</strong></th>
<th style="text-align: center;"><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">After</td>
<td style="text-align: center;">是某个时间点后的请求</td>
<td style="text-align: center;">-
After=2037-01-20T17:42:47.789-07:00[America/Denver]</td>
</tr>
<tr>
<td style="text-align: center;">Before</td>
<td style="text-align: center;">是某个时间点之前的请求</td>
<td style="text-align: center;">-
Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td>
</tr>
<tr>
<td style="text-align: center;">Between</td>
<td style="text-align: center;">是某两个时间点之前的请求</td>
<td style="text-align: center;">-
Between=2037-01-20T17:42:47.789-07:00[America/Denver],
2037-01-21T17:42:47.789-07:00[America/Denver]</td>
</tr>
<tr>
<td style="text-align: center;">Cookie</td>
<td style="text-align: center;">请求必须包含某些cookie</td>
<td style="text-align: center;">- Cookie=chocolate, ch.p</td>
</tr>
<tr>
<td style="text-align: center;">Header</td>
<td style="text-align: center;">请求必须包含某些header</td>
<td style="text-align: center;">- Header=X-Request-Id, \d+</td>
</tr>
<tr>
<td style="text-align: center;">Host</td>
<td style="text-align: center;">请求必须是访问某个host（域名）</td>
<td style="text-align: center;">-
Host=.somehost.org,.anotherhost.org</td>
</tr>
<tr>
<td style="text-align: center;">Method</td>
<td style="text-align: center;">请求方式必须是指定方式</td>
<td style="text-align: center;">- Method=GET,POST</td>
</tr>
<tr>
<td style="text-align: center;">Path</td>
<td style="text-align: center;">请求路径必须符合指定规则</td>
<td style="text-align: center;">- Path=/red/{segment},/blue/**</td>
</tr>
<tr>
<td style="text-align: center;">Query</td>
<td style="text-align: center;">请求参数必须包含指定参数</td>
<td style="text-align: center;">- Query=name, Jack或者- Query=name</td>
</tr>
<tr>
<td style="text-align: center;">RemoteAddr</td>
<td style="text-align: center;">请求者的ip必须是指定范围</td>
<td style="text-align: center;">- RemoteAddr=192.168.1.1/24</td>
</tr>
<tr>
<td style="text-align: center;">weight</td>
<td style="text-align: center;">权重处理</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h4 id="路由过滤器">路由过滤器</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">说明</th>
<th style="text-align: center;">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">AddRequestHeader</td>
<td style="text-align: center;">给当前请求添加一个请求头</td>
<td style="text-align: center;">AddrequestHeader=headerName,
headerValue</td>
</tr>
<tr>
<td style="text-align: center;">RemoveRequestHeader</td>
<td style="text-align: center;">移除请求中的一个请求头</td>
<td style="text-align: center;">RemoveRequestHeader=headerName</td>
</tr>
<tr>
<td style="text-align: center;">AddResponseHeader</td>
<td style="text-align: center;">给响应结果中添加一个响应头</td>
<td style="text-align: center;">AddResponseHeader=headerName ,
headerValue</td>
</tr>
<tr>
<td style="text-align: center;">RemoveResponseHeader</td>
<td style="text-align: center;">从响应结果中移除有一个响应头</td>
<td style="text-align: center;">RemoveResponseHeader=headerName</td>
</tr>
<tr>
<td style="text-align: center;">RewritePath</td>
<td style="text-align: center;">请求路径重写</td>
<td style="text-align: center;">RewritePath=/red/ ? (
?&lt;segment&gt;.*)，/$\l{segment]</td>
</tr>
<tr>
<td style="text-align: center;">StripPrefix</td>
<td style="text-align: center;">去除请求路径中的N段前缀</td>
<td style="text-align: center;">StripPrefix=1，则路径/a/b转发时只保留/b</td>
</tr>
</tbody>
</table>
<h2 id="2-网关登录">2. 网关登录</h2>
<p>单体架构时我们只需要完成一次用户登录、身份校验，就可以在所有业务中获取到用户信息。而微服务拆分后，每个微服务都独立部署，不再共享数据。也就意味着每个微服务都需要做登录校验，这显然不可取。</p>
<p>我们的登录是基于JWT来实现的，校验JWT的算法复杂，而且需要用到秘钥。如果每个微服务都去做登录校验，这就存在着两大问题：</p>
<ul>
<li>每个微服务都需要知道JWT的秘钥，不安全</li>
<li>每个微服务重复编写登录校验代码、权限校验代码，麻烦</li>
</ul>
<p>既然网关是所有微服务的入口，一切请求都需要先经过网关。我们完全可以把登录校验的工作放到网关去做，这样之前说的问题就解决了：</p>
<ul>
<li>只需要在网关和用户服务保存秘钥</li>
<li>只需要在网关开发登录校验功能</li>
</ul>
<p>此时，登录校验的流程如图：</p>
<p><img src="https://bu.dusays.com/2025/07/20/687c55b28e6dd.png" alt="image-20250720103424790"></p>
<p>不过，这里存在几个问题：</p>
<ul>
<li>网关路由是配置的，请求转发是Gateway内部代码，我们如何在转发之前做登录校验？</li>
<li>网关校验JWT之后，如何将用户信息传递给微服务？</li>
<li>微服务之间也会相互调用，这种调用不经过网关，又该如何传递用户信息？</li>
</ul>
<h3 id="21-网关过滤器">2.1 网关过滤器</h3>
<p>登录校验必须在请求转发到微服务之前做，否则就失去了意义。而网关的请求转发是<code>Gateway</code>内部代码实现的，要想在请求转发之前做登录校验，就必须了解<code>Gateway</code>内部工作的基本原理。</p>
<p><img src="https://bu.dusays.com/2025/07/20/687c576d672c9.png" alt="image-20250720104147586"></p>
<ol type="1">
<li>网关内部是没有业务逻辑的，他的任务是基于我们配的路由规则然后判断一下前端请求，到底该由哪个微服务处理，然后将请求转发到对应的微服务</li>
<li>而进行路由判断的功能就是由一个叫<code>handlerMapping</code>的接口来处理的<code>HandlerMapping</code>的默认实现是
<code>RoutePredicateHandlerMapping</code>(路由断言).<code>HandlerMapping</code>根据请求找到匹配的路由并存入上下文，然后把请求交给webHandler处理。</li>
<li><code>WebHandler</code>默认实现是<code>FilteringwebHandler</code>
,顾名思义是一个过滤器处理器。它会加载网关中配置的多个过滤器，放入集合并排序，形成过滤器链。然后依次执行这些过滤器。</li>
<li>而整个过滤链的最后要执行<code>NettyRoutingFilter</code>，负责将请求转发到微服务，当微服务返回结果后存入上下文</li>
<li>接着依次传递给其他过滤器，最终返回给用户</li>
<li>过滤器内部可以包含两部分逻辑，分别是pre和post，分别会在请求路由到微服务之前和之后执行。</li>
<li>当所有Filter的pre逻辑都依次顺序执行通过后，请求才会被路由到微服务，否则会被拦截，后续过滤器不再执行。微服务返回结果后，再倒序执行Filter的post逻辑</li>
<li>如果我们能够定义一个过滤器，在其中实现登录校验逻辑，并且将过滤器执行顺序定义到<code>NettyRoutingFilter</code>之前，这就符合我们的需求了！</li>
<li>可以将用户信息保存在请求头中，然后传递给微服务，然后微服务在从请求头中取出用户信息</li>
</ol>
<h3 id="22-自定义过滤器">2.2 自定义过滤器</h3>
<p>网关过滤器链中的过滤器有两种：</p>
<ul>
<li><strong><code>GatewayFilter</code></strong>：路由过滤器，作用范围比较灵活，可以是任意指定的路由<code>Route</code>.
（配置的过滤器，有33种，默认不生效，配置到哪一个路由下之后就对配置的路由生效。配置到default-filter：之后就会对所有路由生效（这样就不必在所有的路由中配置类，但是所属类别依旧是GatewayFilter）。）</li>
<li><strong><code>GlobalFilter</code></strong>：全局过滤器，作用范围是所有路由，不可配置。</li>
</ul>
<h3 id="23-实现登录校验">2.3 实现登录校验</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AuthProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtTool jwtTool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthProperties authProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取Request</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">// 2.判断是否不需要拦截</span></span><br><span class="line">        <span class="keyword">if</span>(isExclude(request.getPath().toString()))&#123;</span><br><span class="line">            <span class="comment">// 无需拦截，直接放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; headers = request.getHeaders().get(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!CollUtils.isEmpty(headers)) &#123;</span><br><span class="line">            token = headers.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.校验并解析token</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = jwtTool.parseToken(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnauthorizedException e) &#123;</span><br><span class="line">            <span class="comment">// 如果无效，拦截</span></span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            response.setRawStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 5.如果有效，传递用户信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;userId = &quot;</span> + userId);</span><br><span class="line">        <span class="comment">// 6.放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExclude</span><span class="params">(String antPath)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String pathPattern : authProperties.getExcludePaths()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(antPathMatcher.match(pathPattern, antPath))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对于AntPathMatcher，虽然它是Spring框架的一部分，但它并不是由Spring管理的Bean。AntPathMatcher是一个工具类，用于匹配Ant风格的路径模式，它没有定义为Spring的Bean，因此Spring容器不知道如何自动注入它。</p>
<p>为什么需要手动创建AntPathMatcher实例？</p>
<p>工具类：AntPathMatcher是一个工具类，通常不需要Spring管理其生命周期。工具类是无状态的，可以在任何地方实例化和使用。</p>
<p>非单例：由于AntPathMatcher是无状态的，它不需要作为单例Bean管理。每次使用时创建一个新的实例是安全的，不会导致资源浪费或状态不一致的问题。</p>
<p>简单性：手动创建AntPathMatcher实例非常简单，只需要使用new关键字即可。这种方式代码清晰，易于理解</p></li>
</ul>
<h3 id="24-网关传递用户">2.4 网关传递用户</h3>
<p>现在，网关已经可以完成登录校验并获取登录用户身份信息。但是当网关将请求转发到微服务时，微服务又该如何获取用户身份呢？</p>
<p>由于网关发送请求到微服务依然采用的是<code>Http</code>请求，因此我们可以将用户信息以请求头的方式传递到下游微服务。然后微服务可以从请求头中获取登录用户信息。考虑到微服务内部可能很多地方都需要用到登录用户信息，因此我们可以利用SpringMVC的拦截器来实现登录用户信息获取，并存入ThreadLocal，方便后续使用。</p>
<p>据图流程图如下：</p>
<p><img src="https://bu.dusays.com/2025/07/21/687e269e78f41.png" alt="image-20250721193804387"></p>
<p>因此，接下来我们要做的事情有：</p>
<ul>
<li>改造网关过滤器，在获取用户信息后保存到请求头，转发到下游微服务</li>
<li>编写微服务拦截器，拦截请求获取用户信息，保存到<code>ThreadLocal</code>后放行</li>
</ul>
<h4 id="保存用户到请求头">保存用户到请求头</h4>
<p>首先，我们修改登录校验拦截器的处理逻辑，保存用户信息到请求头中：</p>
<p><img src="https://bu.dusays.com/2025/07/22/687f7b34da201.png" alt="image-20250722195113363"></p>
<p>修改<code>AuthGlobalFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.如果有效，传递用户信息</span></span><br><span class="line">        <span class="comment">// mutate()方法可以对下游请求做更改，.request表示对请求做处理，利用builder可以对请求中各种信息做修改</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> userId.toString();</span><br><span class="line">        <span class="type">ServerWebExchange</span> <span class="variable">swe</span> <span class="operator">=</span> exchange.mutate()</span><br><span class="line">                .request(builder -&gt; builder.header(<span class="string">&quot;user-Info&quot;</span>, userInfo))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 6.放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(swe);</span><br></pre></td></tr></table></figure>

<ul>
<li>拦截器先通过 Token
解析出<code>userId</code>，再将其放入请求头；</li>
<li>后续的 Controller
可以直接从请求头<code>user-Info</code>中获取<code>userId</code>，无需再次解析
Token，提高效率。</li>
</ul>
<h4 id="拦截器获取用户">拦截器获取用户</h4>
<p>需求:由于每个微服务都可能有获取登录用户的需求，因此我们直接在hm-common模块定义拦截器，这样微服务只需要引入依赖即可生效，无需重复编写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.common.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmall.common.utils.UserContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头中的用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;user-info&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(userInfo)) &#123;</span><br><span class="line">            <span class="comment">// 不为空，保存到ThreadLocal</span></span><br><span class="line">            UserContext.setUser(Long.valueOf(userInfo));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserContext.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里只是写了一个拦截器类，但是并没有注册到<code>springmvc</code>拦截器里。要想注册进去需要进行配置：编写<code>config</code>配置类<code>WebMvcConfigurer </code>，将其add进去</p>
<p>当请求从 Spring Cloud Gateway（WebFlux、Netty驱动）进入下游 Spring
MVC 微服务时，exchange 不会被直接传递，而是 自动被底层 HTTP
协议转换为标准的 HttpServletRequest 和 HttpServletResponse。</p>
<p>spring-web通过线程池复用线程，并且不是每次使用user-service都会覆盖user信息，所以有必要在一次请求完成后清理user信息</p>
<p>拦截器生命周期：</p>
<p>preHandle() → 2. Controller &amp; Service等 → 3. postHandle()（如有）
→ 4. afterCompletion()</p>
<p>特殊情况处理如果请求在 preHandle 返回 false（拦截请求）：不会执行
Controller，但 仍会触发 afterCompletion（Spring 5.3+ 行为）。</p>
<h4 id="配置拦截器">配置拦截器</h4>
<p>springMVC拦截器需要配置@configuration，进行配置才能生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">UserInfoInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>通过 registry.addInterceptor(new UserInfoInterceptor()) 将一个名为
UserInfoInterceptor
的拦截器添加到拦截器注册表中。这样自定义的拦截器才会生效</li>
<li>添加@ConditionalOnClass(DispatcherServlet.class)的原因：因为hm-gateway中也引用了common模块，而我们知道gateway使用的openfeign虽然也处理http请求，但是底层不是靠SpringMvc实现的，而现在设计了只要引用common这个包就会自动装配MvcConfig配置类，然而hm-gateway底层没有springmvc自然无法自动装配MvcConfig配置类，会报错。所以我们需要设计成只有依赖了SpringMvc的微服务模块才自动装配，而SpringMvc的核心类就是DispatcherServlet.class，所以只有有DispatcherServlet.class这个类的微服务模块才会自动装配MvcConfig配置类</li>
<li>@ConditionalOnClass 是 Spring Boot
中的一个条件注解，它用于在特定类存在于类路径上时才启用配置。因此特定的类就是DispatcherServlet.class只要再pom.xml中加入spring-boot-starter-web就会存在DispatcherServlet类</li>
<li>DispatcherServlet.class 是 Spring MVC 的核心组件之一，通常用于处理
HTTP 请求。如果存在 DispatcherServlet，说明当前项目中使用了 Spring
MVC，Spring 会加载 MvcConfig 配置类</li>
<li>除了hm-gateway外底层都是springMVC，那要想不让网关得到这个WebMvcconfigurer配置，那就要；利用SpringMVC的特点去排除它，SprngMVC都有一个DispatcherServlet的api。</li>
<li>当我们配置了扫描时，其他的微服务就会使用这个拦截器配置的内容，但是网关也使用了这个配置类，网关没有MVC的内容因此会报错。</li>
</ul>
<h4 id="添加扫描">添加扫描</h4>
<p><code>spring.factories</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.hmall.common.config.MyBatisConfig,\</span><br><span class="line">  com.hmall.common.config.MvcConfig,\</span><br><span class="line">  com.hmall.common.config.JsonConfig</span><br></pre></td></tr></table></figure>

<ul>
<li>不过，需要注意的是，这个配置类默认是不会生效的，因为它所在的包是<code>com.hmall.common.config</code>，与其它微服务的扫描包不一致，无法被扫描到，因此无法生效。基于SpringBoot的自动装配原理，我们要将其添加到<code>resources</code>目录下的<code>META-INF/spring.factories</code>文件中：</li>
<li>依赖虽然被引入，但@ComponentScan默认扫描启动类所在的包及其子包，这里没在对应的扫描范围内所有没有注册。可以@ComponentScan添加包范围；在对应模块通过spring.factories文件将对应配置类的全限定名写进去，利用Springboot自动配置原理，其他微服务引入对应模块依赖，在启动后会进行Bean注册；同样也还可以用@Import导入对应的Bean组件或配置类</li>
<li>spring.factories可以基于springboot的自动装配机制自动发现并装配配置类。简单来说，就是所有微服务都无法扫描到这个拦截器，我们可以给每一个微服务的启动类Application加上compinentscan指定扫描这个拦截器，但是，微服务数量庞大，显然不是个好办法，利用SpringBoot的自动装配原理就简单的多</li>
</ul>
<h4 id="结果">结果</h4>
<p>这样我们请求单个购物车就查询不到用户信息了</p>
<p><img src="https://bu.dusays.com/2025/07/24/6881fa6ec44c8.png" alt="image-20250724171835215"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">: ==&gt;  Preparing: SELECT id,user_id,item_id,num,name,spec,price,image,create_time,update_time FROM cart <span class="title function_">WHERE</span> <span class="params">(user_id = ?)</span></span><br><span class="line"><span class="number">17</span>:<span class="number">15</span>:<span class="number">27</span>:<span class="number">140</span> DEBUG <span class="number">1764</span> --- [nio-<span class="number">8082</span>-exec-<span class="number">6</span>] c.h.cart.mapper.CartMapper.selectList    : ==&gt; Parameters: <span class="number">2</span>(Long)</span><br><span class="line"><span class="number">17</span>:<span class="number">15</span>:<span class="number">27</span>:<span class="number">148</span> DEBUG <span class="number">1764</span> --- [nio-<span class="number">8082</span>-exec-<span class="number">6</span>] c.h.cart.mapper.CartMapper.selectList    : &lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="number">17</span>:<span class="number">16</span>:<span class="number">27</span>:<span class="number">290</span> DEBUG <span class="number">1764</span> --- [nio-<span class="number">8082</span>-exec-<span class="number">7</span>] c.h.cart.mapper.CartMapper.selectList    : ==&gt;  Preparing: SELECT id,user_id,item_id,num,name,spec,price,image,create_time,update_time FROM cart <span class="title function_">WHERE</span> <span class="params">(user_id = ?)</span></span><br><span class="line"><span class="number">17</span>:<span class="number">16</span>:<span class="number">27</span>:<span class="number">293</span> DEBUG <span class="number">1764</span> --- [nio-<span class="number">8082</span>-exec-<span class="number">7</span>] c.h.cart.mapper.CartMapper.selectList    : ==&gt; Parameters: <span class="literal">null</span></span><br><span class="line"><span class="number">17</span>:<span class="number">16</span>:<span class="number">27</span>:<span class="number">298</span> DEBUG <span class="number">1764</span> --- [nio-<span class="number">8082</span>-exec-<span class="number">7</span>] c.h.cart.mapper.CartMapper.selectList    : &lt;==      Total: <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="135-openfeign传递用户">1.3.5 OpenFeign传递用户</h3>
<blockquote>
<p>请求从网关到交易时会被mvc拦截，将userinfo存入threadlocal，当这个请求执行完之后，afterCompletion会清除threadlocal，故当交易发请求到商品时是没有ui的</p>
</blockquote>
<p>前端发起的请求都会经过网关再到微服务，由于我们之前编写的过滤器和拦截器功能，微服务可以轻松获取登录用户信息。</p>
<p>但有些业务是比较复杂的，请求到达微服务后还需要调用其它多个微服务。比如下单业务，流程如下：</p>
<p><img src="https://bu.dusays.com/2025/07/24/68820370c5d70.png" alt="image-20250724175700620"></p>
<p>下单的过程中，需要调用商品服务扣减库存，调用购物车服务清理用户购物车。而清理购物车时必须知道当前登录的用户身份。但是，<strong>订单服务调用购物车时并没有传递用户信息</strong>，购物车服务无法知道当前用户是谁！</p>
<p>由于微服务获取用户信息是通过拦截器在请求头中读取，因此要想实现微服务之间的用户信息传递，就<strong>必须在微服务发起调用时把用户信息存入请求头</strong>。</p>
<ul>
<li><p>ThreadLocal：仅限单JVM线程内，用于存储线程级别的上下文（如用户身份、事务ID）。其生命周期与线程绑定，无法跨进程或跨服务传递。</p>
<p>微服务间通信：本质是跨进程的分布式调用，服务可能部署在不同物理节点。ThreadLocal无法穿透网络边界，无法在服务A的线程中直接访问服务B的线程数据。</p></li>
<li><p>服务调用，即跨进程的服务调用，而ThreadLocal只仅限于当前服务内部的范围，所以无法使用，但网关那里刚开始不是已经通过过滤器进行了userInfo存入请求头中吗？为什么后续微服务a调用服务b时，需要再次将userInfo存入请求头才能传递用户信息呢？那是因为——&gt;HTTP协议无状态：每个请求默认不携带上一个请求的上下文（直接理解成，每次发送的都是一个新的http请求，所以需要我们自己给该请求做标识）。
最后记住：拦截器+Feign组合：是实现微服务间身份透传的标准模式。</p></li>
<li><p>拦截器是属于微服务的，过滤器是属于网关的；拦截器从请求头获取userId，并保存在context中，过滤器解析jwt并保存在请求头中；</p></li>
</ul>
<p>微服务之间调用是基于OpenFeign来实现的，并不是我们自己发送的请求。我们如何才能让每一个由OpenFeign发起的请求自动携带登录用户信息呢？</p>
<p>这里要借助Feign中提供的一个拦截器接口：<code>feign.RequestInterceptor</code></p>
<p><img src="https://bu.dusays.com/2025/07/25/6882cd197e1e5.png" alt="image-20250725081720605"></p>
<p>不放在common中，因为不是所有模块都需要，例如网关微服务就不需要FeignClient
其实就是拦截下来OpenFeign的转发请求，然后再请求头中添加上user-info字段后放行。</p>
<p><code>DefaultFeignConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户信息添加请求头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">userInfoRequestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestInterceptor</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 微服务调用微服务的请求是从网关传过来的，</span></span><br><span class="line"><span class="comment">                 * 所以这时请求头中是有用户信息的，</span></span><br><span class="line"><span class="comment">                 * 只需要从请求头中获取到用户信息，添加到请求头中即可</span></span><br><span class="line"><span class="comment">                 * 如何请求再次传递给下一个微服务，这样就将用户信息传递给了其他微服务了</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserContext.getUser();</span><br><span class="line">                <span class="keyword">if</span> (userId != <span class="literal">null</span>)&#123;</span><br><span class="line">                    requestTemplate.header(<span class="string">&quot;user-info&quot;</span>, userId.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-配置管理">3. 配置管理</h2>
<p>到目前为止我们已经解决了微服务相关的几个问题：</p>
<ul>
<li>微服务远程调用</li>
<li>微服务注册、发现</li>
<li>微服务请求路由、负载均衡</li>
<li>微服务登录用户信息传递</li>
</ul>
<p>不过，现在依然还有几个问题需要解决：</p>
<ul>
<li>网关路由在配置文件中写死了，如果变更必须重启微服务</li>
<li>某些业务配置在配置文件中写死了，每次修改都要重启服务</li>
<li>每个微服务都有很多重复的配置，维护成本高</li>
</ul>
<p>这些问题都可以通过统一的<strong>配置管理器服务</strong>解决。而Nacos不仅仅具备注册中心功能，也具备配置管理的功能：</p>
<p><img src="https://bu.dusays.com/2025/07/25/6882ef6723d77.png" alt="image-20250725104348028"></p>
<p>微服务共享的配置可以统一交给Nacos保存和管理，在Nacos控制台修改配置后，Nacos会将配置变更推送给相关的微服务，并且无需重启即可生效，实现配置热更新。</p>
<p>网关的路由同样是配置，因此同样可以基于这个功能实现动态路由功能，无需重启网关即可修改路由配置。</p>
<h3 id="31-配置共享">3.1 配置共享</h3>
<p>我们可以把微服务共享的配置抽取到Nacos中统一管理，这样就不需要每个微服务都重复配置了。分为两步：</p>
<ul>
<li>在Nacos中添加共享配置</li>
<li>微服务拉取配置</li>
</ul>
<h4 id="311-添加共享配置">3.1.1 添加共享配置</h4>
<p>以cart-service为例，我们看看有哪些配置是重复的，可以抽取的：</p>
<p>首先是jdbc相关配置：</p>
<p>然后是日志配置：</p>
<p>然后是swagger以及OpenFeign的配置：</p>
<p>我们在nacos控制台分别添加这些配置。</p>
<p>首先是jdbc相关配置，在<code>配置管理</code>-&gt;<code>配置列表</code>中点击<code>+</code>新建一个配置：</p>
<p>在弹出的表单中填写信息：</p>
<p>其中详细的配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;hm.db.host:192.168.150.101&#125;:$&#123;hm.db.port:3306&#125;/$&#123;hm.db.database&#125;?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;hm.db.un:root&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.db.pw:123&#125;</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>

<p>注意这里的jdbc的相关参数并没有写死，例如：</p>
<ul>
<li><code>数据库ip</code>：通过<code>$&#123;hm.db.host:192.168.150.101&#125;</code>配置了默认值为<code>192.168.150.101</code>，同时允许通过<code>$&#123;hm.db.host&#125;</code>来覆盖默认值</li>
<li><code>数据库端口</code>：通过<code>$&#123;hm.db.port:3306&#125;</code>配置了默认值为<code>3306</code>，同时允许通过<code>$&#123;hm.db.port&#125;</code>来覆盖默认值</li>
<li><code>数据库database</code>：可以通过<code>$&#123;hm.db.database&#125;</code>来设定，无默认值</li>
</ul>
<p>然后是统一的日志配置，命名为<code>shared-log.``yaml</code>，配置内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hmall:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;logs/$&#123;spring.application.name&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后是统一的swagger配置，命名为<code>shared-swagger.yaml</code>，配置内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">$&#123;hm.swagger.title:黑马商城接口文档&#125;</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">$&#123;hm.swagger.description:黑马商城接口文档&#125;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">$&#123;hm.swagger.email:zhanghuyi@itcast.cn&#125;</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">$&#123;hm.swagger.concat:虎哥&#125;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">$&#123;hm.swagger.package&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意，这里的swagger相关配置我们没有写死，例如：</p>
<ul>
<li><code>title</code>：接口文档标题，我们用了<code>$&#123;hm.swagger.title&#125;</code>来代替，将来可以有用户手动指定</li>
<li><code>email</code>：联系人邮箱，我们用了<code>$&#123;hm.swagger.email:``zhanghuyi@itcast.cn``&#125;</code>，默认值是<code>zhanghuyi@itcast.cn</code>，同时允许用户利用<code>$&#123;hm.swagger.email&#125;</code>来覆盖。</li>
</ul>
<h3 id="32-拉取nacos">3.2 拉取nacos</h3>
<p>接下来，我们要在微服务拉取共享配置。将拉取到的共享配置与本地的<code>application.yaml</code>配置合并，完成项目上下文的初始化。</p>
<p>不过，需要注意的是，读取Nacos配置是SpringCloud上下文（<code>ApplicationContext</code>）初始化时处理的，发生在项目的引导阶段。然后才会初始化SpringBoot上下文，去读取<code>application.yaml</code>。</p>
<p>也就是说引导阶段，<code>application.yaml</code>文件尚未读取，根本不知道nacos
地址，该如何去加载nacos中的配置文件呢？</p>
<p>SpringCloud在初始化上下文的时候会先读取一个名为<code>bootstrap.yaml</code>(或者<code>bootstrap.properties</code>)的文件，如果我们将nacos地址配置到<code>bootstrap.yaml</code>中，那么在项目引导阶段就可以读取nacos中的配置了。</p>
<p><img src="https://bu.dusays.com/2025/07/25/688336256383b.png" alt="image-20250725154538843"></p>
<p>因此，微服务整合Nacos配置管理的步骤如下：</p>
<p>1）引入依赖：</p>
<p>在cart-service模块引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取bootstrap文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）新建bootstrap.yaml</p>
<p>在cart-service中的resources目录新建一个bootstrap.yaml文件：</p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cart-service</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 共享配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-jdbc.yaml</span> <span class="comment"># 共享mybatis配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-log.yaml</span> <span class="comment"># 共享日志配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-swagger.yaml</span> <span class="comment"># 共享日志配置</span></span><br></pre></td></tr></table></figure>

<p>3）修改application.yaml</p>
<p>由于一些配置挪到了bootstrap.yaml，因此application.yaml需要修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启OKHttp连接池支持</span></span><br><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">swagger:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">购物车服务接口文档</span></span><br><span class="line">    <span class="attr">package:</span> <span class="string">com.hmall.cart.controller</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">hm-cart</span></span><br></pre></td></tr></table></figure>

<p>重启服务，发现所有配置都生效了。</p>
<h3 id="33-配置热更新">3.3 配置热更新</h3>
<p>有很多的业务相关参数，将来可能会根据实际情况临时调整。例如购物车业务，购物车数量有一个上限，默认是10，对应代码如下：</p>
<p>现在这里购物车是写死的固定值，我们应该将其配置在配置文件中，方便后期修改。</p>
<p>但现在的问题是，即便写在配置文件中，修改了配置还是需要重新打包、重启服务才能生效。能不能不用重启，直接生效呢？</p>
<p>这就要用到Nacos的配置热更新能力了，分为两步：</p>
<ul>
<li>在Nacos中添加配置</li>
<li>在微服务读取配置</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/25/68837b6508f41.png" alt="image-20250725204101759"></p>
<p>文件名称由三部分组成：</p>
<ul>
<li><strong><code>服务名</code></strong>：我们是购物车服务，所以是<code>cart-service</code></li>
<li><strong><code>spring.active.profile</code></strong>：就是spring
boot中的<code>spring.active.profile</code>，可以省略，则所有profile共享该配置</li>
<li><strong><code>后缀名</code></strong>：例如yaml</li>
</ul>
<p>这里我们直接使用<code>cart-service.yaml</code>这个名称，则不管是dev还是local环境都可以共享该配置。</p>
<p>配置内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">cart:</span></span><br><span class="line">    <span class="attr">maxAmount:</span> <span class="number">1</span> <span class="comment"># 购物车商品数量上限</span></span><br></pre></td></tr></table></figure>

<p>接着，我们在微服务中读取配置，实现配置热更新。</p>
<p>在<code>cart-service</code>中新建一个属性读取类：</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.cart.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hm.cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer maxAmount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，在业务中使用该属性加载类：</p>
<p>测试，向购物车中添加多个商品：</p>
<p>我们在nacos控制台，将购物车上限配置为5：</p>
<p>无需重启，再次测试购物车功能：</p>
<p>加入成功！</p>
<p>无需重启服务，配置热更新就生效了！</p>
<h3 id="34-动态路由">3.4 动态路由</h3>
<p>网关的路由配置全部是在项目启动时由<code>org.springframework.cloud.gateway.route.CompositeRouteDefinitionLocator</code>在项目启动的时候加载，并且一经加载就会缓存到内存中的路由表内（一个Map），不会改变。也不会监听路由变更，所以，我们无法利用上节课学习的配置热更新来实现路由更新。</p>
<p>因此，我们必须监听Nacos的配置变更，然后手动把最新的路由更新到路由表中。这里有两个难点：</p>
<ul>
<li>如何监听Nacos配置变更？</li>
<li>如何把路由信息更新到路由表？</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/26/6884b4335720b.png" alt="image-20250726185538185"></p>
<h1 id="四-微服务03">四、 微服务03</h1>
<p>在微服务远程调用的过程中，还存在几个问题需要解决。</p>
<p>首先是<strong>业务健壮性</strong>问题：</p>
<p>例如在之前的查询购物车列表业务中，购物车服务需要查询最新的商品信息，与购物车数据做对比，提醒用户。大家设想一下，如果商品服务查询时发生故障，查询购物车列表在调用商品服
务时，是不是也会异常？从而导致购物车查询失败。但从业务角度来说，为了提升用户体验，即便是商品查询失败，购物车列表也应该正确展示出来，哪怕是不包含最新的商品信息。</p>
<p>还有<strong>级联</strong>失败问题：</p>
<p>还是查询购物车的业务，假如商品服务业务并发较高，占用过多Tomcat连接。可能会导致商品服务的所有接口响应时间增加，延迟变高，甚至是长时间阻塞直至查询失败。</p>
<p>此时查询购物车业务需要查询并等待商品查询结果，从而导致查询购物车列表业务的响应时间也变长，甚至也阻塞直至无法访问。而此时如果查询购物车的请求较多，可能导致购物车服务的Tomcat连接占用较多，所有接口的响应时间都会增加，整个服务性能很差，
甚至不可用。</p>
<p><img src="https://bu.dusays.com/2025/07/27/68859664902a1.png" alt="image-20250727110050083"></p>
<p>依次类推，整个微服务群中与购物车服务、商品服务等有调用关系的服务可能都会出现问题，最终导致整个集群不可用。</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885968bb4fe9.png" alt="image-20250727110130582"></p>
<p>这就是<strong>级联</strong>失败问题，或者叫<strong>雪崩</strong>问题。</p>
<p>级联失败（Cascading
Failure）是指一个系统中的局部故障引发连锁反应，导致其他部分相继失效，最终造成更大范围甚至整个系统崩溃的现象。</p>
<p>还有跨服务的事务问题：</p>
<p>比如昨天讲到过的下单业务，下单的过程中需要调用多个微服务：</p>
<ul>
<li>商品服务：扣减库存</li>
<li>订单服务：保存订单</li>
<li>购物车服务：清理购物车</li>
</ul>
<p>这些业务全部都是数据库的写操作，我们必须确保所有操作的同时成功或失败。但是这些操作在不同微服务，也就是不同的Tomcat，这样的情况如何确保事务特性呢？</p>
<h2 id="41-雪崩问题">4.1 雪崩问题</h2>
<blockquote>
<p>雪崩问题产生的原因？</p>
</blockquote>
<ul>
<li>微服务相互调用，服务提供者出现故障或阻塞。</li>
<li>服务调用者没有做好异常处理，导致自身故障。</li>
<li>调用链中的所有服务级联失败，导致整个集群故障</li>
</ul>
<blockquote>
<p>如何避免雪崩</p>
</blockquote>
<ul>
<li><p>尽量避免服务出现故障或阻塞。</p>
<ul>
<li>保证代码的健壮性;</li>
<li>保证网络畅通;</li>
<li>能应对较高的并发请求;</li>
</ul></li>
<li><p>服务调用者做好远程调用异常的后备方案，避免故障扩散</p></li>
</ul>
<h2 id="42-微服务保护">4.2 微服务保护</h2>
<h3 id="421-服务保护方案">4.2.1 服务保护方案</h3>
<p>微服务保护的方案有很多，比如：</p>
<ul>
<li>请求限流</li>
<li>线程隔离</li>
<li>服务熔断</li>
</ul>
<p>这些方案或多或少都会导致服务的体验上略有下降，比如请求限流，降低了并发上限；线程隔离，降低了可用资源数量；服务熔断，降低了服务的完整度，部分服务变的不可用或弱可用。因此这些方案都属于服务<strong>降级</strong>的方案。但通过这些方案，服务的健壮性得到了提升，</p>
<h3 id="422-请求限流">4.2.2 请求限流</h3>
<p>服务故障最重要原因，就是并发太高！解决了这个问题，就能避免大部分故障。当然，接口的并发不是一直很高，而是突发的。因此请求限流，就是<strong>限制或控制</strong>接口访问的并发流量，避免服务因流量激增而出现故障。</p>
<p>请求限流往往会有一个限流器，数量高低起伏的并发请求曲线，经过限流器就变的非常平稳。这就像是水电站的大坝，起到蓄水的作用，可以通过开关控制水流出的大小，让下游水流始终维持在一个平稳的量。</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885aa8b68650.png" alt="image-20250727122650049"></p>
<h3 id="423-线程隔离">4.2.3 线程隔离</h3>
<p>当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。</p>
<p>线程隔离的思想来自轮船的舱壁模式：</p>
<p>轮船的船舱会被隔板分割为N个相互隔离的密闭舱，假如轮船触礁进水，只有损坏的部分密闭舱会进水，而其他舱由于相互隔离，并不会进水。这样就把进水控制在部分船体，避免了整个船舱进水而沉没。</p>
<p>为了避免某个接口故障或压力过大导致整个服务不可用，我们可以限定每个接口可以使用的资源范围，也就是将其“隔离”起来。</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885aac45ccdb.png" alt="image-20250727122747279"></p>
<p>如图所示，我们给查询购物车业务限定可用线程数量上限为20，这样即便查询购物车的请求因为查询商品服务而出现故障，也不会导致服务器的线程资源被耗尽，不会影响到其它接口。</p>
<h3 id="424-服务熔断">4.2.4 服务熔断</h3>
<p>线程隔离虽然避免了雪崩问题，但故障服务（商品服务）依然会拖慢购物车服务（服务调用方）的接口响应速度。而且商品查询的故障依然会导致查询购物车功能出现故障，购物车业务也变的不可用了。</p>
<p>所以，我们要做两件事情：</p>
<ul>
<li><strong>编写服务降级逻辑</strong>：就是服务调用失败后的处理逻辑，根据业务场景，可以抛出异常，也可以返回友好提示或默认数据。</li>
<li><strong>异常统计和熔断</strong>：统计服务提供方的异常比例，当比例过高表明该接口会影响到其它服务，应该拒绝调用该接口，而是直接走降级逻辑。</li>
</ul>
<p>这里服务提供方就是商品服务，异常比例过高意思就是说如果过往记录中发现调用10商品服务，有6次失败（60%），而熔断决策这里是当失败率超过阈值（如50%），购物车服务（调用方）的熔断器会：</p>
<ul>
<li>拒绝后续请求：不再真正调用商品服务，避免资源浪费。</li>
<li>直接走降级逻辑：返回缓存数据、默认值或友好提示。</li>
</ul>
<p>熔断恢复：</p>
<p>经过一段时间（如5秒），熔断器尝试放行一个请求探测商品服务是否恢复。若成功，则逐步关闭熔断。</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885ab3154574.png" alt="image-20250727122936308"></p>
<h2 id="43-sentinel">4.3 Sentinel</h2>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/alibaba/Sentinel/releases">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Sentinel</div>
            <div class="tag-link-sitename">jar包下载</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>微服务保护的技术有很多，但在目前国内使用较多的还是Sentinel，所以接下来我们学习Sentinel的使用。</p>
<p>Sentinel是阿里巴巴开源的一款服务保护框架，目前已经加入SpringCloudAlibaba中。</p>
<p>Sentinel 的使用可以分为两个部分:</p>
<ul>
<li><strong>核心库</strong>（Jar包）：不依赖任何框架/库，能够运行于 Java
8 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud
等框架也有较好的支持。在项目中引入依赖即可实现服务限流、隔离、熔断等功能。</li>
<li><strong>控制台</strong>（Dashboard）：Dashboard
主要负责管理推送规则、监控、管理机器信息等。</li>
</ul>
<h3 id="431-sentinel安装">4.3.1 Sentinel安装</h3>
<h4 id="window安装">Window安装</h4>
<p>下载jar包，cmd运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080">http://localhost:8090</a>页面，就可以看到sentinel的控制台了</p>
<p>需要输入账号和密码，默认都是：sentinel</p>
<p>登录后，即可看到控制台，默认会监控sentinel-dashboard服务本身</p>
<h4 id="docker运行">Docker运行</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> sentinel <span class="literal">-p</span> <span class="number">8090</span>:<span class="number">8858</span> <span class="literal">--network</span> hm<span class="literal">-net</span> bladex/sentinel<span class="literal">-dashboard</span>:<span class="number">1.8</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>然后运行http://192.168.163.129:8090</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885bdfbd1cb5.png" alt="image-20250727134943797"></p>
<h3 id="432-fallback">4.3.2 Fallback</h3>
<p>触发限流或熔断后的请求不一定要直接报错，也可以返回一些默认数据或者友好提示，用户体验会更好。</p>
<p>给FeignClient编写失败后的降级逻辑有两种方式：</p>
<ul>
<li>方式一：FallbackClass，无法对远程调用的异常做处理</li>
<li>方式二：FallbackFactory，可以对远程调用的异常做处理，我们一般选择这种方式。</li>
</ul>
<h2 id="44-分布式事务">4.4 分布式事务</h2>
<p>首先我们看看项目中的下单业务整体流程：</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885e1586ebce.png" alt="image-20250727162035686"></p>
<p>由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：</p>
<ul>
<li>交易服务：下单事务</li>
<li>购物车服务：清理购物车事务</li>
<li>库存服务：扣减库存事务</li>
</ul>
<p>整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为<strong>分支事务</strong>。多个有关联的分支事务一起就组成了<strong>全局事务</strong>。我们必须保证整个全局事务同时成功或失败。</p>
<p>我们知道每一个分支事务就是传统的<strong>单体事务</strong>，都可以满足ACID特性，但全局事务跨越多个服务、多个数据库，是否还能满足呢？</p>
<p>我们来做一个测试，先进入购物车页面：</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885e17732490.png" alt="image-20250727162106559"></p>
<p>目前有4个购物车，然结算下单，进入订单结算页面：</p>
<p>然后将购物车中某个商品的库存修改为<code>0</code>：</p>
<p>然后，提交订单，最终因库存不足导致下单失败：</p>
<p>然后我们去查看购物车列表，发现购物车数据依然被清空了，并未回滚：</p>
<p>事务并未遵循ACID的原则，归其原因就是参与事务的多个子业务在不同的微服务，跨越了不同的数据库。虽然每个单独的业务都能在本地遵循ACID，但是它们互相之间没有感知，不知道有人失败了，无法保证最终结果的统一，也就无法遵循ACID的事务特性了。</p>
<p>这就是分布式事务问题，出现以下情况之一就可能产生分布式事务问题：</p>
<ul>
<li>业务跨多个服务实现</li>
<li>业务跨多个数据源实现</li>
</ul>
<p>接下来这一章我们就一起来研究下如何解决分布式事务问题。</p>
<h3 id="441-seata">4.4.1 Seata</h3>
<p>解决分布式事务的方案有很多，但实现起来都比较复杂，因此我们一般会使用开源的框架来解决分布式事务问题。在众多的开源分布式事务框架中，功能最完善、使用最多的就是阿里巴巴在2019年开源的Seata了。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://seata.apache.org/zh-cn/docs/overview/what-is-seata">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Seata</div>
            <div class="tag-link-sitename">官方文档</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>其实分布式事务产生的一个重要原因，就是参与事务的多个分支事务互相无感知，不知道彼此的执行状态。因此解决分布式事务的思想非常简单：</p>
<p>就是找一个统一的<strong>事务协调者</strong>，与多个分支事务通信，检测每个分支事务的执行状态，保证全局事务下的每一个分支事务同时成功或失败即可。大多数的分布式事务框架都是基于这个理论来实现的。</p>
<p>Seata也不例外，在Seata的事务管理中有三个重要的角色：</p>
<ul>
<li><strong>TC</strong> <strong>(Transaction Coordinator</strong>) -
**事务协调者：**维护全局和分支事务的状态，协调全局事务提交或回滚。</li>
<li><strong>TM (Transaction Manager) -</strong>
**事务管理器：**定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li>
<li><strong>RM (Resource Manager) -</strong>
**资源管理器：**管理分支事务，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>
</ul>
<p>Seata的工作架构如图所示：</p>
<p><img src="https://bu.dusays.com/2025/07/27/6885e4942f0e7.png" alt="image-20250727163426944"></p>
<p>其中，<strong>TM</strong>和<strong>RM</strong>可以理解为Seata的客户端部分，引入到参与事务的微服务依赖中即可。将来<strong>TM</strong>和<strong>RM</strong>就会协助微服务，实现本地分支事务与<strong>TC</strong>之间交互，实现事务的提交或回滚。</p>
<p>而<strong>TC</strong>服务则是事务协调中心，是一个独立的微服务，需要单独部署。</p>
<details class="folding-tag" green><summary> 三者关系的小例子 </summary>
              <div class="content">
              <p>可以把 Seata处理分布式事务的过程，类比成组织一次多人协作的搬家任务，用生活化场景理解三个角色：</p><ol type="1"><li>TM（事务管理器）：搬家发起人</li></ol><ul><li><strong>作用</strong>：决定要不要开始“全局事务（搬家这件事）”，以及最后成功了提交结果（搬完）、失败了回滚（不搬或恢复原样）。</li><li><strong>举例</strong>：你（TM）想组织一次搬家，先拍板“周末要把家里东西搬到新房”（定义全局事务范围），然后通知大家开始干活（开启全局事务）。要是中途发现新房没收拾好，你说“不搬了，东西放回原处”（回滚全局事务）；要是一切顺利，你确认“搬完啦，任务结束”（提交全局事务）。</li></ul><ol start="2" type="1"><li>TC（事务协调者）：搬家总指挥</li></ol><ul><li><strong>作用</strong>：盯着所有“分支事务（打包、搬运、拆装家具等环节）”的状态，协调大家一起成功或一起失败。</li><li><strong>举例</strong>：你请了个指挥（TC），他负责盯着：打包队有没有把东西包好（分支事务状态）、搬运车有没有把东西运到（分支事务状态）、拆装队有没有把家具装好（分支事务状态）……要是打包队说 “包一半发现东西太多，搞不定”，指挥（TC）就通知所有人“别搬了，各自恢复原样”；要是所有人都反馈 “搞定”，指挥（TC）就告诉大家“可以收尾，任务完成”。</li></ul><ol start="3" type="1"><li>RM（资源管理器）：具体干活的小组</li></ol><ul><li><strong>作用</strong>：管理自己负责的“分支事务（比如打包组管打包、搬运组管运输）”，随时给 TC汇报进度和状态。</li><li><strong>举例</strong>：<ul><li>打包组（RM1）：负责把家里东西分类打包，打包完了跟指挥（TC）说“我们包好啦”；要是打包到一半发现东西坏了，也跟指挥（TC）说“这里搞不定，需要回退”。</li><li>搬运组（RM2）：负责把打包好的东西运到新房，路上车坏了（分支事务失败），就跟指挥（TC）汇报“运不了，得终止”；要是顺利运到，就说 “送达成功”。</li><li>拆装组（RM3）：负责在新房把家具装好，装完汇报“装好了”；装到一半发现零件少了，汇报 “装不了，得回退”。</li></ul></li></ul><p><strong>总结流程</strong>： 你（TM）发起搬家（全局事务）→指挥（TC）协调打包、搬运、拆装（分支事务）→ 每个小组（RM）干活并汇报状态→ 指挥（TC）根据所有人状态，决定让大家一起成功（搬完）或一起回滚（不搬 /恢复）→ 你（TM）最终确认结果。</p>
              </div>
            </details>

<h3 id="442-seata配置">4.4.2 Seata配置</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">--name</span> seata \</span><br><span class="line"><span class="literal">-p</span> <span class="number">8099</span>:<span class="number">8099</span> \</span><br><span class="line"><span class="literal">-p</span> <span class="number">7099</span>:<span class="number">7099</span> \</span><br><span class="line"><span class="literal">-e</span> SEATA_IP=<span class="number">192.168</span>.<span class="number">163.129</span> \</span><br><span class="line"><span class="literal">-v</span> ./seata:/seata<span class="literal">-server</span>/resources \</span><br><span class="line"><span class="literal">--privileged</span>=true \</span><br><span class="line"><span class="literal">--network</span> hm<span class="literal">-net</span> \</span><br><span class="line"><span class="literal">-d</span> \</span><br><span class="line">seataio/seata<span class="literal">-server</span>:<span class="number">1.5</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这样就使用Docker成功部署了</p>
<h3 id="443-微服务集成seata">4.4.3 微服务集成Seata</h3>
<h4 id="导入依赖">导入依赖</h4>
<p>为了方便各个微服务集成seata，我们需要把seata配置共享到nacos，因此<code>trade-service</code>模块不仅仅要引入seata依赖，还要引入nacos依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--统一配置管理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--读取bootstrap文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置nacos">配置nacos</h4>
<p>首先在nacos上添加一个共享的seata配置，命名为<code>shared-seata.yaml</code>：</p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型 nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span> <span class="comment"># seata服务名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">hmall</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与tc集群的映射关系</span></span><br><span class="line">      <span class="attr">hmall:</span> <span class="string">&quot;default&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/07/27/6885fec9f2b39.png" alt="image-20250727182613408"></p>
<h4 id="改造配置">改造配置</h4>
<p><code>bootstrap.yaml</code>：</p>
<p>内容如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">trade-service</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 共享配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-jdbc.yaml</span> <span class="comment"># 共享mybatis配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-log.yaml</span> <span class="comment"># 共享日志配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-swagger.yaml</span> <span class="comment"># 共享日志配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-seata.yaml</span> <span class="comment"># 共享seata配置</span></span><br></pre></td></tr></table></figure>

<h3 id="444-xa模式面试题">4.4.4 XA模式（面试题）</h3>
<p>XA规范是X/Open组织定义的分布式事务处理（DTP，Distributed Transaction
Processing）标准，XA规范描述了全局的TM与局部的RM之间的接口，几乎所有主流的关系型数据库都对XA规范提供了支持。Seata的XA模式如下:</p>
<p><img src="https://bu.dusays.com/2025/07/27/68860a70183b9.png" alt="image-20250727191557888"></p>
<p>一阶段的工作</p>
<ul>
<li>RM注册分支事务到TC</li>
<li>RM执行分支业务SQL但是不提交</li>
<li>RM报告执行状态到TC</li>
</ul>
<p>二阶段的工作</p>
<ul>
<li>TC检测各分支事务执行状态（如果成功/失败，通知RM提交/回滚事务）</li>
<li>RM接收TC指令，提交/回滚事务</li>
</ul>
<blockquote>
<p>具体流程</p>
</blockquote>
<ul>
<li>当方法执行时，全局事务（TM）向TC注册一个全局事务</li>
<li>TM执行内部业务逻辑，调用每一个分支</li>
<li>RM会拦截对SQL的操作,RM会向TC注册分支事务</li>
<li>然后再放行去执行业务的SQL（SQL执行完毕后不可以<strong>提交</strong>）</li>
<li>当所有方法执行完毕TM会向TC发送全局事务结束的信息</li>
<li>TC会检查注册分支的事务状态
，如果发现都成功了就向所有分支发送提交/回滚的指令</li>
<li>这些事务才能提交事务释放锁（反之下达回滚的命令）</li>
</ul>
<blockquote>
<p>优缺点</p>
</blockquote>
<p>XA模式的优点是什么?</p>
<ul>
<li>·事务的强一致性，满足ACID原则。</li>
<li>·常用数据库都支持，实现简单，并且没有代码侵入</li>
</ul>
<p>XA模式的缺点是什么?</p>
<ul>
<li>·因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li>
<li>·依赖关系型数据库实现事务</li>
</ul>
<h4 id="回滚日志">回滚日志</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">28.936</span>  INFO <span class="literal">---</span> [<span class="type">rverHandlerThread_1_4_500</span>] i.s.s.coordinator.DefaultCoordinator     : <span class="keyword">Begin</span> new global transaction applicationId: trade<span class="literal">-serviceup</span>: hmall, transactionName: createOrder(com.hmall.trade.domain.dto.OrderFormDTO),timeout:<span class="number">60000</span>,xid:<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203713</span></span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.113</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.139</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">2</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203715</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.286</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.290</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">2</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203717</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.345</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.350</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">2</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203719</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.464</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.468</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">2</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203721</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.548</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-cart</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.554</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">2</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203723</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-cart</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.597</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203713</span>,extraData=null1,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">18</span>:<span class="number">29.734</span>  INFO <span class="literal">---</span> [<span class="type">verHandlerThread_1_10_500</span>] io.seata.server.coordinator.DefaultCore  : Committing global transaction is successfully done, xid =<span class="number">45712777161203713</span>.</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.234</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : timeout=<span class="number">60000</span>,transactionName=createOrder(com.hmall.tradeTO),clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.239</span>  INFO <span class="literal">---</span> [<span class="type">verHandlerThread_1_11_500</span>] i.s.s.coordinator.DefaultCoordinator     : <span class="keyword">Begin</span> new global transaction applicationId: trade<span class="literal">-serviceup</span>: hmall, transactionName: createOrder(com.hmall.trade.domain.dto.OrderFormDTO),timeout:<span class="number">60000</span>,xid:<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203822</span></span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.270</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.288</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">3</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203824</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.317</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.322</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">3</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203826</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.339</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.342</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">3</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203828</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-trade</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.369</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203</span>urceId=jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span>,lockKey=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.372</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">3</span>] i.seata.server.coordinator.AbstractCore  : Register branch successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:nchId = <span class="number">45712777161203830</span>, resourceId = jdbc:mysql://<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">3306</span>/hm<span class="literal">-item</span> ,lockKeys = null</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.435</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : SeataMergeMessage xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">4571277716120361203830</span>,resourceId=null,status=PhaseOne_Failed,applicationData=null</span><br><span class="line">,clientIp:<span class="number">192.168</span>.<span class="number">163.1</span>,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.485</span>  INFO <span class="literal">---</span> [<span class="type">nPool.commonPool</span>-<span class="type">worker</span>-<span class="number">3</span>] i.seata.server.coordinator.AbstractCore  : Report branch status successfully, xid = <span class="number">192.168</span>.<span class="number">163.129</span>:, branchId = <span class="number">45712777161203830</span></span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.612</span>  INFO <span class="literal">---</span> [     <span class="type">batchLoggerPrint_1_1</span>] i.s.c.r.p.server.BatchLogHandler         : xid=<span class="number">192.168</span>.<span class="number">163.129</span>:<span class="number">8099</span>:<span class="number">45712777161203822</span>,extraData=null1,vgroup:hmall</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.664</span>  INFO <span class="literal">---</span> [<span class="type">verHandlerThread_1_17_500</span>] io.seata.server.coordinator.DefaultCore  : Rollback branch transaction successfully, xid = <span class="number">192.168</span>.<span class="number">11203822</span> branchId = <span class="number">45712777161203828</span></span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.679</span>  INFO <span class="literal">---</span> [<span class="type">verHandlerThread_1_17_500</span>] io.seata.server.coordinator.DefaultCore  : Rollback branch transaction successfully, xid = <span class="number">192.168</span>.<span class="number">11203822</span> branchId = <span class="number">45712777161203826</span></span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.692</span>  INFO <span class="literal">---</span> [<span class="type">verHandlerThread_1_17_500</span>] io.seata.server.coordinator.DefaultCore  : Rollback branch transaction successfully, xid = <span class="number">192.168</span>.<span class="number">11203822</span> branchId = <span class="number">45712777161203824</span></span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">06.694</span>  INFO <span class="literal">---</span> [<span class="type">verHandlerThread_1_17_500</span>] io.seata.server.coordinator.DefaultCore  : Rollback global transaction successfully, xid = <span class="number">192.168</span>.<span class="number">11203822</span>.</span><br><span class="line"><span class="number">01</span>:<span class="number">20</span>:<span class="number">39.827</span>  INFO <span class="literal">---</span> [      <span class="type">RetryCommitting_1_1</span>] io.seata.server.coordinator.DefaultCore  : Committing global transaction is successfully done, xid =<span class="number">45712777161203713</span>.</span><br><span class="line"><span class="number">01</span>:<span class="number">22</span>:<span class="number">16.808</span>  INFO <span class="literal">---</span> [     <span class="type">RetryRollbacking_1_1</span>] io.seata.server.coordinator.DefaultCore  : Rollback global transaction successfully, xid = <span class="number">192.168</span>.<span class="number">11203822</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="445-at模式">4.4.5 AT模式</h3>
<p><code>AT</code>模式同样是分阶段提交的事务模型，不过缺弥补了<code>XA</code>模型中资源锁定周期过长的缺陷</p>
<p><img src="https://bu.dusays.com/2025/07/28/6886d4f275380.png" alt="image-20250728093957746"></p>
<p>阶段一<code>RM</code>的工作：</p>
<ul>
<li>注册分支事务</li>
<li>记录undo-log（数据快照）</li>
<li>执行业务sql并提交</li>
<li>报告事务状态</li>
</ul>
<p>阶段二提交时<code>RM</code>的工作：</p>
<ul>
<li>删除undo-log即可</li>
</ul>
<p>阶段二回滚时<code>RM</code>的工作：</p>
<ul>
<li>根据undo-log恢复数据到更新前</li>
</ul>
<blockquote>
<p>具体流程</p>
</blockquote>
<ol type="1">
<li>全局事务方法开启时TM会向TC注册一个全局事务</li>
<li>TM调用所有的分支</li>
<li>，在操作SQL之前会被RM拦截，RM会向TC注册分支事务</li>
<li>微服务的item执行具体的SQL语句并且<strong>立刻提交事务</strong></li>
<li>item在执行SQL之前先去生成一个修改数据库之前的数据保存一个快照，
保存在数据表<code>undo-log</code>中</li>
<li>当执行完毕后回向TC报告事务状态</li>
<li>TM会向TC报告事务的状态</li>
<li>TC会检测事务状态，都成功会删除log快照，失败则回滚从数据库中恢复快照</li>
</ol>
<p>那么万一有其他线程这时候修改了数据怎么办呢？？？</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/hongdada/p/16796704.html">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Seata全局锁</div>
            <div class="tag-link-sitename">防止脏读</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>简述<code>AT</code>模式与<code>XA</code>模式最大的区别是什么？</p>
<ul>
<li><code>XA</code>模式一阶段不提交事务，锁定资源；<code>AT</code>模式一阶段直接提交，不锁定资源。</li>
<li><code>XA</code>模式依赖数据库机制实现回滚；<code>AT</code>模式利用数据快照实现数据回滚。</li>
<li><code>XA</code>模式强一致；<code>AT</code>模式最终一致</li>
</ul>
<p>快照数据的版本检查</p>
<p>Seata在回滚时会检查快照数据的版本是否与当前数据一致。如果发现数据已经被其他事务修改，Seata会抛出异常，阻止回滚操作。这种机制可以避免数据被错误覆盖，但会导致事务回滚失败，需要额外的处理逻辑。补偿机制：如果回滚失败，Seata会尝试通过补偿机制（如补偿SQL）来恢复数据。补偿SQL是根据业务逻辑预先定义的，用于在回滚失败时尽可能恢复数据的一致性。</p>
<h1 id="五mq基础">五、MQ基础</h1>
<blockquote>
<p>面试考点来了嘿嘿</p>
</blockquote>
<h2 id="51-异步调用">5.1 异步调用</h2>
<p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p>
<ul>
<li>消息发送者：投递消息的人，就是原来的调用方</li>
<li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li>
<li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/28/68870ee59ec7e.png" alt="image-20250728134714684"></p>
<p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。</p>
<p>这样，发送消息的人和接收消息的人就完全解耦了。</p>
<p>还是以余额支付业务为例：</p>
<p><img src="https://bu.dusays.com/2025/07/28/68870f2ea38f5.png" alt="image-20250728134824173"></p>
<p>除了扣减余额、更新支付流水单状态以外，其它调用逻辑全部取消。而是改为发送一条消息到Broker。而相关的微服务都可以订阅消息通知，一旦消息到达Broker，则会分发给每一个订阅了的微服务，处理各自的业务。</p>
<p>假如产品经理提出了新的需求，比如要在支付成功后更新用户积分。支付代码完全不用变更，而仅仅是让积分服务也订阅消息即可：</p>
<p><img src="https://bu.dusays.com/2025/07/28/68870f493649c.png" alt="image-20250728134850118"></p>
<p>不管后期增加了多少消息订阅者，作为支付服务来讲，执行问扣减余额、更新支付流水状态后，发送消息即可。业务耗时仅仅是这三部分业务耗时，仅仅100ms，大大提高了业务性能。</p>
<p>另外，不管是交易服务、通知服务，还是积分服务，他们的业务与支付关联度低。现在采用了异步调用，解除了耦合，他们即便执行过程中出现了故障，也不会影响到支付服务。</p>
<ul>
<li>交易服务、通知服务、积分服务收到Broker的消息后，如果业务代码没有执行成功broker还会再给服务发消息直到成功执行为止。</li>
<li>为了使用mq实现分布式事务，不能将mq发送消息的代码加入到事务中，比如像rabbitmq不支持rollback回滚操作的。此时可以配合分布式事务seata中的事务钩子，定义一个发送消息的方法，每当事务成功的时候，就可以发送消息。</li>
</ul>
<p>综上，异步调用的优势包括：</p>
<ul>
<li>耦合度更低</li>
<li>性能更好</li>
<li>业务拓展性强</li>
<li>故障隔离，避免级联失败</li>
<li>缓存消息，流量削峰填谷</li>
</ul>
<p>当然，异步通信也并非完美无缺，它存在下列缺点：</p>
<ul>
<li>完全依赖于Broker的可靠性、安全性和性能</li>
<li>架构复杂，后期维护和调试麻烦</li>
</ul>
<h2 id="52-技术选型">5.2 技术选型</h2>
<p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.</p>
<p>目比较常见的MQ实现：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<p>几种常见MQ的对比</p>
<table>
<thead>
<tr>
<th style="text-align: center;"></th>
<th style="text-align: center;">RabbitMQ</th>
<th style="text-align: center;">ActiveMQ</th>
<th style="text-align: center;">RocketMQ</th>
<th style="text-align: center;">Kafka</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">公司/社区</td>
<td style="text-align: center;">Rabbit</td>
<td style="text-align: center;">Apache</td>
<td style="text-align: center;">阿里</td>
<td style="text-align: center;">Apache</td>
</tr>
<tr>
<td style="text-align: center;">开发语言</td>
<td style="text-align: center;">Erlang</td>
<td style="text-align: center;">Java</td>
<td style="text-align: center;">Java</td>
<td style="text-align: center;">Scala&amp;Java</td>
</tr>
<tr>
<td style="text-align: center;">协议支持</td>
<td style="text-align: center;">AMQP，XMPP，SMTP，STOMP</td>
<td style="text-align: center;">OpenWire,STOMP，REST,XMPP,AMQP</td>
<td style="text-align: center;">自定义协议</td>
<td style="text-align: center;">自定义协议</td>
</tr>
<tr>
<td style="text-align: center;">可用性</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">一般</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">高</td>
</tr>
<tr>
<td style="text-align: center;">单机吞吐量</td>
<td style="text-align: center;">一般</td>
<td style="text-align: center;">差</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">非常高</td>
</tr>
<tr>
<td style="text-align: center;">消息延迟</td>
<td style="text-align: center;">微秒级</td>
<td style="text-align: center;">毫秒级</td>
<td style="text-align: center;">毫秒级</td>
<td style="text-align: center;">毫秒以内</td>
</tr>
<tr>
<td style="text-align: center;">消息可靠性</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">一般</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">一般</td>
</tr>
</tbody>
</table>
<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p>
<p>追求可靠性：RabbitMQ、RocketMQ</p>
<p>追求吞吐能力：RocketMQ、Kafka</p>
<p>追求消息低延迟：RabbitMQ、Kafka</p>
<p>据统计，目前国内消息队列使用最多的还是RabbitMQ，再加上其各方面都比较均衡，稳定性也好，因此我们选择RabbitMQ来学习。</p>
<h2 id="53-rabbitmq">5.3 RabbitMQ</h2>
<h3 id="531-安装">5.3.1 安装</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> <span class="literal">-e</span> RABBITMQ_DEFAULT_USER=itheima \</span><br><span class="line"> <span class="literal">-e</span> RABBITMQ_DEFAULT_PASS=<span class="number">123321</span> \</span><br><span class="line"> <span class="literal">-v</span> mq<span class="literal">-plugins</span>:/plugins \</span><br><span class="line"> <span class="literal">--name</span> mq \</span><br><span class="line"> <span class="literal">--hostname</span> mq \</span><br><span class="line"> <span class="literal">-p</span> <span class="number">15672</span>:<span class="number">15672</span> \</span><br><span class="line"> <span class="literal">-p</span> <span class="number">5672</span>:<span class="number">5672</span> \</span><br><span class="line"> <span class="literal">--network</span> hm<span class="literal">-net</span>\</span><br><span class="line"> <span class="literal">-d</span> \</span><br><span class="line"> rabbitmq:<span class="number">3.8</span><span class="literal">-management</span></span><br></pre></td></tr></table></figure>

<p>然后访问http://192.168.150.101:15672即可看到管理控制台。首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。</p>
<p>RabbitMQ对应的架构：</p>
<p><img src="https://bu.dusays.com/2025/07/28/688725203b22d.png" alt="image-20250728152206702"></p>
<p>其中包含几个概念：</p>
<ul>
<li><strong><code>publisher</code></strong>：生产者，也就是发送消息的一方</li>
<li><strong><code>consumer</code></strong>：消费者，也就是消费消息的一方</li>
<li><strong><code>queue</code></strong>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li>
<li><strong><code>exchange</code></strong>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。（区分计网中的交换机：RabbitMQ的交换机是用于消息传递的，而计网的交换机是用于数据包传输的。）</li>
<li><strong><code>virtual host</code></strong>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue（每个虚拟主机相当于一个数据库，彼此之间互不影响）</li>
</ul>
<h3 id="532-spring-amqp">5.3.2 Spring AMQP</h3>
<p>将来我们开发业务功能的时候，肯定不会在控制台收发消息，而是应该基于编程的方式。由于<code>RabbitMQ</code>采用了AMQP协议，因此它具备跨语言的特性。任何语言只要遵循AMQP协议收发消息，都可以与<code>RabbitMQ</code>交互。并且<code>RabbitMQ</code>官方也提供了各种不同语言的客户端。</p>
<p>但是，RabbitMQ官方提供的Java客户端编码相对复杂，一般生产环境下我们更多会结合Spring来使用。而Spring的官方刚好基于RabbitMQ提供了这样一套消息收发的模板工具：SpringAMQP。并且还基于SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAMQP提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系(设置队列)</li>
<li>基于注解的监听器模式，异步接收消息(设置消费端)</li>
<li>封装了RabbitTemplate工具，用于发送消息(设置生产端)</li>
</ul>
<h4 id="5321-workqueues模型">5.3.2.1 WorkQueues模型</h4>
<p>Work
queues，任务模型。简单来说就是<strong>让多个消费者</strong>绑定到一个队列，共同消费队列中的消息。</p>
<p><img src="https://bu.dusays.com/2025/07/28/6887393660eac.png" alt="image-20250728164739680"></p>
<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p>
<p>此时就可以使用work
模型，<strong>多个消费者共同处理消息处理，消息处理的速度就能大大提高</strong>了。</p>
<h4 id="5322-交换机">5.3.2.2 交换机</h4>
<p><img src="https://bu.dusays.com/2025/07/28/68873f1c747c5.png" alt="image-20250728171249867"></p>
<p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p>
<ul>
<li><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</li>
<li><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</li>
<li><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</li>
<li><strong>Consumer</strong>：消费者，与以前一样，订阅队列，没有变化</li>
</ul>
<p><strong>Exchange</strong>（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！（引入Exchange的目的是为了在Rabbitmq中一个消息能够分发给多个queue中被不同的消费者服务多次消费，比如你一个订单信息需要加积分，加经验，这下可以分为两个queue来执行）</p>
<p>交换机的类型有四种：</p>
<ul>
<li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</li>
<li><strong>Direct</strong>：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</li>
<li><strong>Topic</strong>：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</li>
<li><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，用的较少。</li>
</ul>
<h4 id="5323-fanout-交换机">5.3.2.3 Fanout 交换机</h4>
<p>Fanout Exchange
会将接收到的消息路由到每一个跟其绑定的queue，所以也叫广播模式</p>
<h4 id="5324-direct-交换机">5.3.2.4 Direct 交换机</h4>
<p>Direct Exchange
会将接收到的消息根据规则路由到指定的Queue，因此称为<strong>定向</strong>路由。</p>
<ul>
<li>每一个Queue都与Exchange设置一个BindingKey</li>
<li>发布者发送消息时，指定消息的RoutingKey</li>
<li>Exchange将消息路由到BindingKey与消息RoutingKey一致的队列</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/28/68874f0032449.png" alt="image-20250728182043602"></p>
<p>描述下Direct交换机与Fanout交换机的差异？</p>
<ul>
<li>Fanout交换机将消息路由给每一个与之绑定的队列</li>
<li>Direct交换机根据RoutingKey判断路由给哪个队列</li>
<li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li>
</ul>
<h4 id="5325-topic交换机">5.3.2.5 Topic交换机</h4>
<p>TopicExchange也是基于RoutingKey做消息路由，但是routingKey通常是多个单词的组合，并且以.分割。</p>
<p>Queue与Exchange指定BindingKey时可以使用通配符</p>
<ul>
<li>#：代指0个或多个单词</li>
<li>*： 代指一个单词</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/28/688751e789935.png" alt="image-20250728183310831"></p>
<h4 id="5326-声明队列和交换机">5.3.2.6 声明队列和交换机</h4>
<p>在之前我们都是基于RabbitMQ控制台来创建队列、交换机。但是在实际开发时，队列和交换机是程序员定义的，将来项目上线，又要交给运维去创建。那么程序员就需要把程序中运行的所有队列和交换机都写下来，交给运维。在这个过程中是很容易出现错误的。</p>
<p>因此推荐的做法是由程序启动时检查队列和交换机是否存在，如果不存在自动创建。</p>
<blockquote>
<p>如果交换机或队列不存在</p>
<p>Spring AMQP会自动创建它们：</p>
<p>如果交换机（Exchange）不存在，Spring
AMQP会根据注解中的配置（如名称和类型）自动创建交换机。</p>
<p>如果队列（Queue）不存在，Spring
AMQP会根据注解中的配置（如名称）自动创建队列。</p>
<p>如果绑定关系（Binding）不存在，Spring
AMQP会根据注解中的配置（如路由键）自动建立绑定关系。</p>
<p>如果交换机或队列已经存在</p>
<p>不会更改已存在的交换机或队列：</p>
<p>如果交换机或队列已经存在，并且它们的配置（如名称、类型等）与注解中的配置一致，Spring
AMQP不会对它们进行任何更改。</p>
<p>如果交换机或队列的配置与注解中的配置不一致（例如，交换机类型不同或队列的持久性设置不同），RabbitMQ会抛出错误，导致声明失败。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再试试Topic模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5327-消息转换器">5.3.2.7 消息转换器</h4>
<p>当使用 Spring 发送消息时，传输内容通常是 Java
对象，但消息队列只能处理字节数据。因此，需要先将对象序列化为字节发送，接收时再反序列化为对象。Spring
默认使用的是 JDK
的序列化机制，但这种方式格式不友好、体积大、不安全。实际开发中，通常会配置
JSON 转换器，使消息更轻量、可读且更安全。</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后添加一个Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5328-订单业务">5.3.2.8 订单业务</h4>
<p>案例需求：改造余额支付功能，将支付成功后基于OpenFeign的交易服务的更新订单状态接口的同步调用，改为基于RabbitMQ的异步通知。</p>
<p><img src="https://bu.dusays.com/2025/07/29/68885ef954ca9.png" alt="image-20250729134112561"></p>
<p>说明：目前没有通知服务和积分服务，因此我们只关注交易服务，步骤如下：</p>
<ul>
<li>定义<code>direct</code>类型交换机，命名为<code>pay.direct</code></li>
<li>定义消息队列，命名为<code>trade.pay.success.queue</code></li>
<li>将<code>trade.pay.success.queue</code>与<code>pay.direct</code>绑定，<code>BindingKey</code>为<code>pay.success</code></li>
<li>支付成功时不再调用交易服务更新订单状态的接口，而是发送一条消息到<code>pay.direct</code>，发送消息的<code>RoutingKey</code>
为<code>pay.success</code>，消息内容是订单id</li>
<li>交易服务监听<code>trade.pay.success.queue</code>队列，接收到消息后更新订单状态为已支付</li>
</ul>
<p>不管是生产者还是消费者，都需要配置MQ的基本信息。分为两步：</p>
<p>1）添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--消息发送--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）配置MQ地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>4.1.接收消息</p>
<p>在trade-service服务中定义一个消息监听类：</p>
<p><img src="https://bu.dusays.com/2025/07/29/68885f2ceb484.png" alt="image-20250729134204022"></p>
<p>其代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStatusListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;trade.pay.success.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;pay.topic&quot;),</span></span><br><span class="line"><span class="meta">            key = &quot;pay.success&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenPaySuccess</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        orderService.markOrderPaySuccess(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.2.发送消息</p>
<p>修改<code>pay-service</code>服务下的<code>com.hmall.pay.``service``.impl.``PayOrderServiceImpl</code>类中的<code>tryPayOrderByBalance</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPayOrderByBalance</span><span class="params">(PayOrderDTO payOrderDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询支付单</span></span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">po</span> <span class="operator">=</span> getById(payOrderDTO.getId());</span><br><span class="line">    <span class="comment">// 2.判断状态</span></span><br><span class="line">    <span class="keyword">if</span>(!PayStatus.WAIT_BUYER_PAY.equalsValue(po.getStatus()))&#123;</span><br><span class="line">        <span class="comment">// 订单不是未支付，状态异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试扣减余额</span></span><br><span class="line">    userClient.deductMoney(payOrderDTO.getPw(), po.getAmount());</span><br><span class="line">    <span class="comment">// 4.修改支付单状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> markPayOrderSuccess(payOrderDTO.getId(), LocalDateTime.now());</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.修改订单状态</span></span><br><span class="line">    <span class="comment">// tradeClient.markOrderPaySuccess(po.getBizOrderNo());</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;pay.direct&quot;</span>, <span class="string">&quot;pay.success&quot;</span>, po.getBizOrderNo());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;支付成功的消息发送失败，支付单id：&#123;&#125;， 交易单id：&#123;&#125;&quot;</span>, po.getId(), po.getBizOrderNo(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六-mq高级">六、 MQ高级</h1>
<h2 id="1发送者的可靠性">1.发送者的可靠性</h2>
<p><img src="https://bu.dusays.com/2025/07/29/688865206c1ba.png" alt="image"></p>
<h3 id="11-发送者重连">1.1 发送者重连</h3>
<p>首先第一种情况，就是生产者发送消息时，出现了网络故障，导致与MQ的连接中断。</p>
<p>为了解决这个问题，SpringAMQP提供的消息发送时的重试机制。即：当<code>RabbitTemplate</code>与MQ连接超时后，多次重试。</p>
<p>修改<code>publisher</code>模块的<code>application.yaml</code>文件，添加下面的内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="string">1s</span> <span class="comment"># 设置MQ的连接超时时间</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启超时重试机制</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 失败后的初始等待时间</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br></pre></td></tr></table></figure>

<p>当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是阻塞式的重试，也就是说多次重试等待的过程中，当前线程是被阻塞的，会影响业务性能。</p>
<p>如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p>
<h3 id="12-发送者确认">1.2 发送者确认</h3>
<p>SpringAMQP提供了Publisher Confirm和Publisher
Return两种确认机制。开启确机制认后，当发送者发送消息给MQ后，MQ会返回确认结果给发送者。返同的结里有以下几种情况</p>
<p>一般情况下，只要生产者与MQ之间的网路连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。</p>
<p>不过，在少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：</p>
<ul>
<li>MQ内部处理消息的进程发生了异常</li>
<li>生产者发送消息到达MQ后未找到<code>Exchange</code></li>
<li>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code>，因此无法路由</li>
</ul>
<p>针对上述情况，RabbitMQ提供了生产者消息确认机制，包括<code>Publisher Confirm</code>和<code>Publisher Return</code>两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的<strong>回执</strong>。</p>
<p>具体如图所示：</p>
<p><img src="https://bu.dusays.com/2025/07/29/68886be28537d.png" alt="image-20250729143619347"></p>
<p>总结如下：</p>
<ul>
<li><p>当消息投递到MQ，但是路由失败时，通过<strong>Publisher
Return</strong>返回异常信息，同时返回ack的确认信息，代表投递成功</p></li>
<li><p>临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</p></li>
<li><p>持久消息投递到了MQ，并且入队完成持久化，返回ACK
，告知投递成功</p></li>
<li><p>其它情况都会返回NACK，告知投递失败</p></li>
<li><p>其中<code>ack</code>和<code>nack</code>属于<strong>Publisher
Confirm</strong>机制，<code>ack</code>是投递成功；<code>nack</code>是投递失败。而<code>return</code>则属于<strong>Publisher
Return</strong>机制。</p>
<p>默认两种机制都是关闭状态，需要通过配置文件来开启。</p></li>
<li><p>return和confirm机制是可以同时开启的。return机制：确认消息是否从
Exchange 路由到 Queue。confirm机制：确认消息是否到达
Exchange。若同时开启，路由失败(队列不存在或者交换机配置错误)时return机制返回异常信息以及消息，confirm机制则返回ack（不是nack）。两个机制不会互相影响。ack和nack都是由confirm机制返回的。</p></li>
<li><p>路由失败（交换机到队列），才触发ReturnCallback机制,返回异常信息；消息投递（发送者到交换机）成功，ConfirmCallback机制返回ack，投递失败返回nck</p></li>
<li><p>Publisher Confirm
机制用于向生产者确认消息是否成功送达队列。当生产者向 RabbitMQ
发送消息时，RabbitMQ 会返回一个唯一的交付标签（Delivery
Tag），生产者可以通过这个标签来查询消息的投递状态。Publisher Return
机制用于处理无法路由的消息。当生产者向 RabbitMQ
发送一条消息时，如果消息无法被正确路由（例如由于队列不存在或交换机配置错误），RabbitMQ
会将该消息返回给生产者，并附带一个错误信息。</p></li>
</ul>
<h4 id="开启生产者确认">开启生产者确认</h4>
<p>在publisher模块的<code>application.yaml</code>中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment"># 开启publisher confirm机制，并设置confirm类型</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 开启publisher return机制</span></span><br></pre></td></tr></table></figure>

<p>这里<code>publisher-confirm-type</code>有三种模式可选：</p>
<ul>
<li><code>none</code>：关闭confirm机制</li>
<li><code>simple</code>：同步阻塞等待MQ的回执</li>
<li><code>correlated</code>：MQ异步回调返回回执</li>
</ul>
<p>一般我们推荐使用<code>correlated</code>，回调机制。</p>
<h4 id="returncallback">ReturnCallback</h4>
<p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此我们可以在配置类中统一设置。我们在publisher模块定义一个配置类：</p>
<p><code>ReturnCallback</code>
的作用：当消息发送到交换机时，如果交换机无法将消息路由到任何队列（例如，路由键不匹配或队列不存在），<code>RabbitMQ</code>
会返回一个 <code>Return</code> 消息。ReturnCallback
就是用来处理这种场景的。</p>
<p>配置类 <code>MqConfig</code>
中设置了一个消息返回的回调处理机制。当发送的消息因为某些原因未能成功投递到目标队列时（如交换机、路由键不匹配等），<code>rabbitTemplate</code>
会触发 <code>ReturnedMessage</code>
回调，并通过日志记录详细的错误信息。这样你可以通过日志详细了解失败的原因，便于排查问题。</p>
<p>内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">// 它主要用于类, 在bean被创建并完成属性注入后，执行一些初始化操作(带有@PostConstruct注解的方法会被自动调用。)</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;触发return callback,&quot;</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;exchange: &#123;&#125;&quot;</span>, returned.getExchange());</span><br><span class="line">                log.debug(<span class="string">&quot;routingKey: &#123;&#125;&quot;</span>, returned.getRoutingKey());</span><br><span class="line">                log.debug(<span class="string">&quot;message: &#123;&#125;&quot;</span>, returned.getMessage());</span><br><span class="line">                log.debug(<span class="string">&quot;replyCode: &#123;&#125;&quot;</span>, returned.getReplyCode());</span><br><span class="line">                log.debug(<span class="string">&quot;replyText: &#123;&#125;&quot;</span>, returned.getReplyText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="confirmcallback">ConfirmCallback</h4>
<p>由于每个消息发送时的处理逻辑不一定相同，因此ConfirmCallback需要在每次发消息时定义。具体来说，是在调用RabbitTemplate中的convertAndSend方法时，多传递一个参数：</p>
<p>这里的CorrelationData中包含两个核心的东西：</p>
<ul>
<li><code>id</code>：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</li>
<li><code>SettableListenableFuture</code>：回执结果的Future对象</li>
</ul>
<p>为什么returnCallback只用写一次配置，而ConfirmCallback需要每次都写，因为消息需要被确认，并且是每条消息都需要被确认</p>
<p>我们新建一个测试，向系统自带的交换机发送消息，并且添加<code>ConfirmCallback</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherConfirm</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建CorrelationData</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>();</span><br><span class="line">    <span class="comment">// 2.给Future添加ConfirmCallback</span></span><br><span class="line">    cd.getFuture().addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.1.Future发生异常时的处理逻辑，基本不会触发</span></span><br><span class="line">            log.error(<span class="string">&quot;send message fail&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(CorrelationData.Confirm result)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.2.Future接收到回执的处理逻辑，参数中的result就是回执内容</span></span><br><span class="line">            <span class="keyword">if</span>(result.isAck())&#123; <span class="comment">// result.isAck()，boolean类型，true代表ack回执，false 代表 nack回执</span></span><br><span class="line">                log.debug(<span class="string">&quot;发送消息成功，收到 ack!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// result.getReason()，String类型，返回nack时的异常描述</span></span><br><span class="line">                log.error(<span class="string">&quot;发送消息失败，收到 nack, reason : &#123;&#125;&quot;</span>, result.getReason());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 3.发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;hmall.direct&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;hello&quot;</span>, cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/07/29/68887a6965355.png" alt="image-20250729153759012"></p>
<p>可以看到，由于传递的<code>RoutingKey</code>是错误的，路由失败后，触发了<code>return callback</code>，同时也收到了ack。</p>
<p>当我们修改为正确的<code>RoutingKey</code>以后，就不会触发<code>return callback</code>了，只收到ack。</p>
<p>而如果连交换机都是错误的，则只会收到nack。</p>
<div class="note warning simple"><p>开启生产者确认比较消耗MQ性能，一般不建议开启。而且大家思考一下触发确认的几种情况：</p>
<ul>
<li>路由失败：一般是因为RoutingKey错误导致，往往是编程导致</li>
<li>交换机名称错误：同样是编程错误导致</li>
<li>MQ内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback处理nack就可以了。</li>
</ul>
</div>

<h2 id="2-mq的可靠性">2. MQ的可靠性</h2>
<p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。这样会导致两个问题.</p>
<ul>
<li>一旦MQ宕机，内存中的消息会丢失</li>
<li>内存空间有限，当消费者故障或处理过慢时，会导致消息积压，引发MQ阻塞</li>
</ul>
<p>mq在内存满的情况下，会持久化一部分到磁盘，然而这个过程较为耗时，这个过程中的消息发过来则就相当于丢失了。这个过程是阻塞式的，mq就不能处理消息了。每一次把消息从内存写出到磁盘，做page
out的过程中，mq处于阻塞状态，消息处理会直接降为0。这就是基于内存带来的影响。所以需要将消息设置为持久化的。</p>
<blockquote>
<p>RabbitMQ如何保证消息的可靠性?</p>
</blockquote>
<ul>
<li><p>·首先通过配置可以让交换机、队列、以及发送的消息都持久化。这样队列中的消息会持久化到磁盘，MQ重启消息依然存在。</p></li>
<li><p>RabbitMQ在3.6版本引入了LazyQueue，并且在3.12版本后会称为队列的默认模式。LazyQueue会将所有消息都持久化。</p></li>
<li><p>·开启持久化和生产者确认时，RabbitMQ只有在消息持久化完成后才会给生产者返回ACK回执</p></li>
</ul>
<h3 id="21-数据持久化">2.1 数据持久化</h3>
<p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p>
<ul>
<li><p>交换机持久化</p>
<p>队列持久化</p></li>
<li><p>消息持久化</p></li>
</ul>
<div class="note warning simple"><p><strong>说明</strong>：在开启持久化机制以后，如果同时还开启了生产者确认，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性。</p>
<p>不过出于性能考虑，为了减少IO次数，发送到MQ的消息并不是逐条持久化到数据库的，而是每隔一段时间批量持久化。一般间隔在100毫秒左右，这就会导致<code>ACK</code>有一定的延迟，因此建议生产者确认全部采用异步方式。</p>
</div>

<h3 id="22-lazy-queue">2.2 Lazy Queue</h3>
<p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：</p>
<ul>
<li>消费者宕机或出现网络故障</li>
<li>消息发送量激增，超过了消费者处理速度</li>
<li>消费者处理业务发生阻塞</li>
</ul>
<p>一旦出现消息堆积问题，RabbitMQ的内存占用就会越来越高，直到触发内存预警上限。此时RabbitMQ会将内存消息刷到磁盘上，这个行为成为<code>PageOut</code>.
<code>PageOut</code>会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞。</p>
<p>为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy
Queues的模式，也就是惰性队列。惰性队列的特征如下：</p>
<ul>
<li>接收到消息后直接存入磁盘而非内存</li>
<li>消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）</li>
<li>支持数百万条的消息存储</li>
</ul>
<p>而在3.12版本之后，<code>LazyQueue</code>已经成为所有队列的默认格式。因此官方推荐升级MQ为3.12版本或者所有队列都设置为<code>LazyQueue</code>模式。</p>
<ul>
<li>之前的消息持久化以后，是内存里写一份的同时（内存里满了，会直接删除，不会再像之前一样阻塞了队列进行消息写入磁盘），磁盘里也写一份，这样接受处理消息的速度就下降了</li>
<li>如果消费者处理消息的速度很快时，那么就不会逐条那种去从磁盘里加载消息到内存，而是直接提前缓存一批消息到内存（最多2048条）</li>
<li>普通的持久化发一条写一条，写的日志文件，而不是消息体本身，消息体本身只有当内存中存的消满了之后，才会写入磁盘的。</li>
<li>使用惰性队列的性能更好的原因是接收到消息直接存入磁盘，避免了非持久化的情况下，内存满时需要向磁盘中Page
out，此时mq不能接收消息。同时对磁盘的io进行了优化，使其效率更高</li>
</ul>
<h4 id="控制台配置lazy模式">控制台配置Lazy模式</h4>
<p>在添加队列的时候，添加<code>x-queue-mod=lazy</code>参数即可设置队列为Lazy模式：</p>
<p><img src="https://bu.dusays.com/2025/07/29/6888aa4778a4b.png" alt="image-20250729190224944"></p>
<h4 id="代码配置lazy模式">代码配置Lazy模式</h4>
<p>在利用SpringAMQP声明队列的时候，添加<code>x-queue-mod=lazy</code>参数也可设置队列为Lazy模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">            .durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">            .lazy() <span class="comment">// 开启Lazy模式</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是通过<code>QueueBuilder</code>的<code>lazy()</code>函数配置Lazy模式，底层源码如下：</p>
<p><img src="https://bu.dusays.com/2025/07/29/6888aa6b7f4be.png" alt="image-20250729190302865"></p>
<p>当然，我们也可以基于注解来声明队列并设置为Lazy模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">        name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">        durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">        arguments = @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到 lazy.queue的消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更新已有队列为lazy模式">更新已有队列为Lazy模式</h4>
<p>对于已经存在的队列，也可以配置为lazy模式，但是要通过设置policy实现。</p>
<p>可以基于命令行设置policy：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues  </span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li>
<li><code>set_policy</code> ：添加一个策略</li>
<li><code>Lazy</code> ：策略名称，可以自定义</li>
<li><code>"^lazy-queue$"</code> ：用正则表达式匹配队列的名字</li>
<li><code>'&#123;"queue-mode":"lazy"&#125;'</code> ：设置队列模式为lazy模式</li>
<li><code>--apply-to queues</code>：策略的作用对象，是所有的队列</li>
</ul>
<p>当然，也可以在控制台配置policy，进入在控制台的<code>Admin</code>页面，点击<code>Policies</code>，即可添加配置：</p>
<p><img src="https://bu.dusays.com/2025/07/29/6888aaa8ab015.png" alt="image-20250729190403770"></p>
<p>在RabbitMQ中，消息的持久性是由消息本身和队列的持久性决定的。如果消息没有被标记为持久化，那么即使队列本身是持久化的，在RabbitMQ服务器重启后，这些消息也会丢失。这里的关键点在于:</p>
<ol type="1">
<li><strong>队列的持久性</strong>:持久化队列意味着队列的元数据(例如队列的名称、绑定关系等)会被存储到磁盘中，在RabbitMQ服务器重启时可以恢复队列的结构。但是，队列本身的持久性并不自动意味着队列中的消息会被持久化。</li>
<li><strong>消息的持久性</strong>:如果消息在发送时没有设置为持久化，即没有将delivery
node
设置为②(即持久化)，则这些消息只会保存在内存中。当RabbitMQ服务器重启时，这些未持久化的消息会丢失，尽管队列本身可能被恢复。</li>
<li><strong>Lazy Queue</strong>: Lazy
Queue是一种优化机制，它使得消息以最少的内存使用保存在磁盘上，即使是普通（非持久化)消息，也可以保存在磁盘上避免过多占用内存。它并不改变消息持久性的属性。也就是说，即使队列是Lazy类型的，如果消息没有被标记为持久化，消息仍然会在服务器重启时丢失。</li>
</ol>
<p><strong>总结</strong></p>
<ul>
<li><strong>队列持久化</strong>:保存队列结构。</li>
<li><strong>消息持久化</strong>:确保消息在RabbitMQ重启后不丢失。</li>
<li><strong>Lazy
Queue</strong>:优化内存使用，减少对RAM的依赖，但消息如果未持久化，仍会丢失。</li>
</ul>
<p>所以，即使是 Lazy
Queue，如果消息没有被标记为持久化，那么这些消息在RabbitMQ服务器重启后仍然会丢失。</p>
<blockquote>
<p>RabbitMQ 如何保证消息可靠性</p>
</blockquote>
<ul>
<li>首先通过配置可以让交换机、队列、以及发送的消息都持久化。这样队列中的消息会持久化到磁盘，MQ重启消息依然存在。</li>
<li>RabbitMQ在3.6版本引入了LazyQueue，并且在3.12版本后会称为队列的默认模式。LazyQueue会将所有消息都持久化。</li>
<li>开启持久化和生产者确认时，RabbitMQ只有在消息持久化完成后才会给生产者返回ACK回执</li>
</ul>
<h2 id="3-消费者可靠性">3. 消费者可靠性</h2>
<p>当RabbitMQ向消费者投递消息以后，需要知道消费者的处理状态如何。因为消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：</p>
<ul>
<li>消息投递的过程中出现了网络故障</li>
<li>消费者接收到消息后突然宕机</li>
<li>消费者接收到消息后，因处理不当导致异常</li>
<li>…</li>
</ul>
<p>一旦发生上述情况，消息也会丢失。因此，RabbitMQ必须知道消费者的处理状态，一旦消息处理失败才能重新投递消息。</p>
<p>但问题来了：RabbitMQ如何得知消费者的处理状态呢？</p>
<h3 id="31-消费者确认机制">3.1 消费者确认机制</h3>
<p>消费者确认机制(Consumer
Acknowledgement)是为了确认消费者是否成功处理消息。当消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态:</p>
<ul>
<li>ack：成功处理消息，RabbitMQ从队列中删除该消息</li>
<li>nack：消息处理失败，RabbitMQ需要再次投递消息</li>
<li>reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息</li>
</ul>
<p>一般reject方式用的较少，除非是消息格式有问题，那就是开发问题了。因此大多数情况下我们需要将消息处理的代码通过<code>try catch</code>机制捕获，消息处理成功时返回ack，处理失败时返回nack.</p>
<p>由于消息回执的处理代码比较统一，因此SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：</p>
<ul>
<li><strong><code>none</code></strong>：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</li>
<li><strong><code>manual</code></strong>：手动模式。需要自己在业务代码中调用api，发送<code>ack</code>或<code>reject</code>，存在业务入侵，但更灵活</li>
<li><strong><code>auto</code></strong>：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回<code>ack</code>.
当业务出现异常时，根据异常判断返回不同结果：
<ul>
<li>如果是<strong>业务异常</strong>，会自动返回<code>nack</code>；</li>
<li>如果是<strong>消息处理或校验异常</strong>，自动返回<code>reject</code>;</li>
</ul></li>
</ul>
<p>由于消息回执的处理代码比较统一，因此SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：</p>
<ul>
<li><strong><code>none</code></strong>：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</li>
<li><strong><code>manual</code></strong>：手动模式。需要自己在业务代码中调用api，发送<code>ack</code>或<code>reject</code>，存在业务入侵，但更灵活</li>
<li><strong><code>auto</code></strong>：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回<code>ack</code>.
当业务出现异常时，根据异常判断返回不同结果：
<ul>
<li>如果是<strong>业务异常</strong>，会自动返回<code>nack</code>；</li>
<li>如果是<strong>消息处理或校验异常</strong>，自动返回<code>reject</code>;</li>
</ul></li>
</ul>
<p>返回Reject的常见异常有：</p>
<blockquote>
<p>Starting with version 1.3.2, the default ErrorHandler is now a
ConditionalRejectingErrorHandler that rejects (and does not requeue)
messages that fail with an irrecoverable error. Specifically, it rejects
messages that fail with the following errors:</p>
<ul>
<li>o.s.amqp…MessageConversionException: Can be thrown when converting
the incoming message payload using a MessageConverter.</li>
<li>o.s.messaging…MessageConversionException: Can be thrown by the
conversion service if additional conversion is required when mapping to
a @RabbitListener method.</li>
<li>o.s.messaging…MethodArgumentNotValidException: Can be thrown if
validation (for example, @Valid) is used in the listener and the
validation fails.</li>
<li>o.s.messaging…MethodArgumentTypeMismatchException: Can be thrown if
the inbound message was converted to a type that is not correct for the
target method. For example, the parameter is declared as Message<Foo>
but Message<Bar> is received.</Bar></Foo></li>
<li>java.lang.NoSuchMethodException: Added in version 1.6.3.</li>
<li>java.lang.ClassCastException: Added in version 1.6.3.</li>
</ul>
</blockquote>
<p>通过下面的配置可以修改SpringAMQP的ACK处理方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment"># 不做处理</span></span><br></pre></td></tr></table></figure>

<p>修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理的异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MessageConversionException</span>(<span class="string">&quot;故意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;消息处理完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试可以发现：当消息处理发生异常时，消息依然被RabbitMQ删除了。</p>
<p>我们再次把确认机制修改为auto：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># 自动ack</span></span><br></pre></td></tr></table></figure>

<h3 id="32-失败重试机制">3.2 失败重试机制</h3>
<p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。</p>
<p>极端情况就是消费者一直无法执行成功，那么消息requeue就会无限循环，导致mq的消息处理飙升，带来不必要的压力：</p>
<p>Spring又提供了消费者失败重试机制：在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p>
<p>修改consumer服务的application.yml文件，添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 初识的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure>

<p>重启consumer服务，重复之前的测试。可以发现：</p>
<ul>
<li>消费者在失败后消息没有重新回到MQ无限重新投递，而是在本地重试了3次</li>
<li>本地重试3次以后，抛出了<code>AmqpRejectAndDontRequeueException</code>异常。查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是<code>reject</code></li>
</ul>
<p>结论：</p>
<ul>
<li>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</li>
<li>重试达到最大次数后，Spring会返回reject，消息会被丢弃</li>
</ul>
<h3 id="33-失败处理机制">3.3 失败处理机制</h3>
<p><img src="https://bu.dusays.com/2025/07/30/6889839bd568a.png" alt="image-20250730102943744"></p>
<p>在之前的测试中，本地测试达到最大重试次数后，消息会被丢弃。这在某些对于消息可靠性要求较高的业务场景下，显然不太合适了。（开启retry之后，都失败reject后，MessageRecover的默认实现使得消息不requeue，从而被丢弃）</p>
<p>因此Spring允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由<code>MessageRecovery</code>接口来定义的，它有3个不同实现：</p>
<ul>
<li><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式</li>
<li><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，返回<code>nack</code>，消息重新入队</li>
<li><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</li>
<li><img src="https://bu.dusays.com/2025/07/30/688984d6e222f.png" alt="aaa "></li>
</ul>
<p>比较优雅的一种处理方案是<code>RepublishMessageRecoverer</code>，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p>
<p>1）在consumer服务中定义处理失败消息的交换机和队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）定义一个RepublishMessageRecoverer，关联队列和交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.retry.MessageRecoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="34-业务幂等性">3.4 业务幂等性</h3>
<p>何为幂等性？</p>
<ul>
<li>消息被重复消费，如果消费者和mq之间的网络连接断开，消费者的ack未能成功发送到mq,那么等到连接好了之后，mq又会重新发送消息，此时消息重复被消费。如果这个消息是用于扣减库存的，那么就会出现问题</li>
</ul>
<p><strong>幂等</strong>是一个数学概念，用函数表达式来描述是这样的：<code>f(x) = f(f(x))</code>，例如求绝对值函数。</p>
<p>在程序开发中，则是指同一个业务，执行一次或多次对业务状态的影响是一致的。例如：</p>
<ul>
<li>根据id删除数据</li>
<li>查询数据</li>
<li>新增数据</li>
</ul>
<p>但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：</p>
<ul>
<li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li>
<li>退款业务。重复退款对商家而言会有经济损失。</li>
</ul>
<p>所以，我们要尽可能避免业务被重复执行。</p>
<p>然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：</p>
<ul>
<li>页面卡顿时频繁刷新导致表单重复提交</li>
<li>服务间调用的重试</li>
<li>MQ消息的重复投递</li>
</ul>
<p>我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息重复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。</p>
<p>举例：</p>
<ol type="1">
<li>假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为<strong>已支付</strong>状态。</li>
<li>由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后<strong>重新投递</strong>给交易服务。</li>
<li>但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了<strong>已退款</strong>状态。</li>
<li>退款完成后，新投递的消息才被消费，那么订单状态会被再次改为<strong>已支付</strong>。业务异常。</li>
</ol>
<p>因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：</p>
<ul>
<li>唯一消息ID</li>
<li>业务状态判断</li>
</ul>
<h4 id="341-唯一消息id白雪">3.4.1 唯一消息id（白雪）</h4>
<p>这个思路非常简单：</p>
<ol type="1">
<li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li>
<li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li>
<li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</li>
</ol>
<p>我们该如何给消息添加唯一ID呢？</p>
<p>其实很简单，SpringAMQP的MessageConverter自带了MessageID的功能，我们只要开启这个功能即可。</p>
<p>以Jackson的消息转换器为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jjmc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jjmc.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jjmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="342-业务判断">3.4.2 业务判断</h4>
<p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。</p>
<p>例如我们当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理。</p>
<p>相比较而言，消息ID的方案需要改造原有的数据库，所以我更推荐使用业务判断的方案。</p>
<p>以支付修改订单的业务为例，我们需要修改<code>OrderServiceImpl</code>中的<code>markOrderPaySuccess</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">old</span> <span class="operator">=</span> getById(orderId);</span><br><span class="line">    <span class="comment">// 2.判断订单状态</span></span><br><span class="line">    <span class="keyword">if</span> (old == <span class="literal">null</span> || old.getStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 订单不存在或者订单状态不是1，放弃处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试更新订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setId(orderId);</span><br><span class="line">    order.setStatus(<span class="number">2</span>);</span><br><span class="line">    order.setPayTime(LocalDateTime.now());</span><br><span class="line">    updateById(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码逻辑上符合了幂等判断的需求，但是由于判断和更新是两步动作，因此在极小概率下可能存在线程安全问题。</p>
<p>我们可以合并上述操作为这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// UPDATE `order` SET status = ? , pay_time = ? WHERE id = ? AND status = 1</span></span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(Order::getStatus, <span class="number">2</span>)</span><br><span class="line">            .set(Order::getPayTime, LocalDateTime.now())</span><br><span class="line">            .eq(Order::getId, orderId)</span><br><span class="line">            .eq(Order::getStatus, <span class="number">1</span>)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意看，上述代码等同于这样的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">order</span>` <span class="keyword">SET</span> status <span class="operator">=</span> ? , pay_time <span class="operator">=</span> ? <span class="keyword">WHERE</span> id <span class="operator">=</span> ? <span class="keyword">AND</span> status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>我们在where条件中除了判断id以外，还加上了status必须为1的条件。如果条件不符（说明订单已支付），则SQL匹配不到数据，根本不会执行。</p>
<blockquote>
<p>如何保证支付服务与交易服务订单状态的一致性</p>
</blockquote>
<ul>
<li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li>
<li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递和处理的可靠性。同时也开启了MQ的持久化，避免因服务宕机导致消息丢失。</li>
<li>最后，我们还在交易服务更新订单状态时做了业务幂等判断，避免因消息重复消费导致订单状态异常。</li>
</ul>
<h3 id="35-兜底方案">3.5 兜底方案</h3>
<p>虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息100%的可靠。万一真的MQ通知失败该怎么办呢？</p>
<p>有没有其它兜底方案，能够确保订单的支付状态一致呢？</p>
<p>其实思想很简单：既然MQ通知不一定发送到交易服务，那么交易服务就必须自己<strong>主动去查询</strong>支付状态。这样即便支付服务的MQ通知失败，我们依然能通过主动查询来保证订单状态的一致。</p>
<p>流程如下：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889ba0f634c0.png" alt="image-20250730142153934"></p>
<p>图中黄色线圈起来的部分就是MQ通知失败后的兜底处理方案，由交易服务自己主动去查询支付状态。</p>
<p>不过需要注意的是，交易服务并不知道用户会在什么时候支付，如果查询的时机不正确（比如查询的时候用户正在支付中），可能查询到的支付状态也不正确。</p>
<p>那么问题来了，我们到底该在什么时间主动查询支付状态呢？</p>
<p>这个时间是无法确定的，因此，通常我们采取的措施就是利用<strong>定时任务</strong>定期查询，例如每隔20秒就查询一次，并判断支付状态。如果发现订单已经支付，则立刻更新订单状态为已支付即可。</p>
<p>定时任务大家之前学习过，具体的实现这里就不再赘述了。</p>
<p>至此，消息可靠性的问题已经解决了。</p>
<p>综上，支付服务与交易服务之间的订单状态一致性是如何保证的？</p>
<ul>
<li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li>
<li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li>
<li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li>
</ul>
<h2 id="4-延迟消息">4. 延迟消息</h2>
<blockquote>
<p>延迟消息∶发送者发送消息时指定一个时间，消费者不会立刻收到消息，而是在指定时间之后才收到消息。</p>
</blockquote>
<p><img src="https://bu.dusays.com/2025/07/30/6889bc7b848c6.png" alt="image-20250730143212336"></p>
<p>在电商的支付业务中，对于一些库存有限的商品，为了更好的用户体验，通常都会在用户下单时立刻扣减商品库存。例如电影院购票、高铁购票，下单后就会锁定座位资源，其他人无法重复购买。</p>
<p>但是这样就存在一个问题，假如用户下单后一直不付款，就会一直占有库存资源，导致其他客户无法正常交易，最终导致商户利益受损！</p>
<p>因此，电商中通常的做法就是：<strong>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存</strong>。</p>
<p>例如，订单支付超时时间为30分钟，则我们应该在用户下单后的第30分钟检查订单支付状态，如果发现未支付，应该立刻取消订单，释放库存。</p>
<p>但问题来了：如何才能准确的实现在下单后第30分钟去检查支付状态呢？</p>
<p>像这种在一段时间以后才执行的任务，我们称之为<strong>延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了。</p>
<p>在RabbitMQ中实现延迟消息也有两种方案：</p>
<ul>
<li>死信交换机+TTL（存活时间）</li>
<li>延迟消息插件</li>
</ul>
<p>这一章我们就一起研究下这两种方案的实现方式，以及优缺点。</p>
<h3 id="41-死信交换机白雪">4.1 死信交换机（白雪）</h3>
<p>当一个队列中的消息满足下列情况之一时，就会成为死信(dead letter) :</p>
<ul>
<li>·消费者使用basic.reject或
basic.nack声明消费失败，并且消息的requeue参数设置为false</li>
<li>·消息是一个过期消息（达到了队列或消息本身设置的过期时间），超时无人消费</li>
<li>·要投递的队列消息堆积满了，最早的消息可能成为死信</li>
</ul>
<p>如果一个队列中的消息已经成为死信，并且这个队列通过**<code>dead-letter-exchange</code><strong>属性指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机就称为</strong>死信交换机**（Dead
Letter
Exchange）。而此时加入有队列与死信交换机绑定，则最终死信就会被投递到这个队列中。</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889bd1a00717.png" alt="image-20250730143503000"></p>
<p>死信交换机有什么作用呢？</p>
<ol type="1">
<li>收集那些因处理失败而被拒绝的消息</li>
<li>收集那些因队列满了而被拒绝的消息</li>
<li>收集因TTL（有效期）到期的消息</li>
</ol>
<p>前面两种作用场景可以看做是把死信交换机当做一种消息处理的最终兜底方案，与消费者重试时讲的<code>RepublishMessageRecoverer</code>作用类似。</p>
<p>而最后一种场景，大家设想一下这样的场景：</p>
<p>如图，有一组绑定的交换机（<code>ttl.fanout</code>）和队列（<code>ttl.queue</code>）。但是<code>ttl.queue</code>没有消费者监听，而是设定了死信交换机<code>hmall.direct</code>，而队列<code>direct.queue1</code>则与死信交换机绑定，RoutingKey是blue：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c212b3aff.png" alt="image-20250730145606249"></p>
<p>假如我们现在发送一条消息到<code>ttl.fanout</code>，RoutingKey为blue，并设置消息的<strong>有效期</strong>为5000毫秒：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c23065a8f.png" alt="image-20250730145646355"></p>
<div class="note danger simple"><p><strong>注意</strong>：尽管这里的<code>ttl.fanout</code>不需要RoutingKey，但是当消息变为死信并投递到死信交换机时，会沿用之前的RoutingKey，这样<code>hmall.direct</code>才能正确路由消息。</p>
</div>

<p>消息肯定会被投递到<code>ttl.queue</code>之后，由于没有消费者，因此消息无人消费。5秒之后，消息的有效期到期，成为死信：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c29873dd6.png" alt="image-20250730145830374"></p>
<p>死信被再次投递到死信交换机<code>hmall.direct</code>，并沿用之前的RoutingKey，也就是<code>blue</code>：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c2aead488.png" alt="image-20250730145851549"></p>
<p>由于<code>direct.queue1</code>与<code>hmall.direct</code>绑定的key是blue，因此最终消息被成功路由到<code>direct.queue1</code>，如果此时有消费者与<code>direct.queue1</code>绑定，
也就能成功消费消息了。但此时已经是5秒钟以后了：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c2c7bd956.png" alt="image-20250730145917700"></p>
<p>也就是说，publisher发送了一条消息，但最终consumer在5秒后才收到消息。我们成功实现了<strong>延迟消息</strong>。</p>
<p>这里的RoutingKey必须一致。死信在转移到死信队列时，他的Routing key
也会保存下来。但是如果配置了x-dead-letter-routing-key这
个参数的话，routingkey就会被替换为配置的这个值。
另外，死信在转移到死信队列的过程中，是没有经过消息发送者确认的，所以并不能保证消息的安全性。</p>
<div class="note danger simple"><p>RabbitMQ的消息过期是基于追溯方式来实现的，也就是说当一个消息的TTL到期以后不一定会被移除或投递到死信交换机，而是在消息恰好处于队首时才会被处理。</p>
<p>当队列中消息堆积很多的时候，过期消息可能不会被按时处理，因此你设置的TTL时间不一定准确。</p>
</div>

<h3 id="42-delayexchage插件">4.2 DelayExchage插件</h3>
<p>基于死信队列虽然可以实现延迟消息，但是太麻烦了。因此RabbitMQ社区提供了一个延迟消息插件来实现相同的效果。</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c39a79a58.png" alt="image-20250730150237949"></p>
<p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-06-19T09:22:59+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/mq-plugins/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mq-plugins&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>插件目录被挂载到了<code>/var/lib/docker/volumes/mq-plugins/_data</code>这个目录，我们上传插件到该目录下。</p>
<p>接下来执行命令，安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889c5e1c9f53.png" alt="image-20250730151231005"></p>
<h4 id="声明延迟交换机">声明延迟交换机</h4>
<p>基于注解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayMessage</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到delay.queue的延迟消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于<code>@Bean</code>的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayExchangeConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .directExchange(<span class="string">&quot;delay.direct&quot;</span>) <span class="comment">// 指定交换机类型和名称</span></span><br><span class="line">                .delayed() <span class="comment">// 设置delay的属性为true</span></span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">// 持久化</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="发送延迟消息">发送延迟消息</h4>
<p>发送消息时，必须通过x-delay属性设定延迟时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, delayed message&quot;</span>;</span><br><span class="line">    <span class="comment">// 2.发送消息，利用消息后置处理器添加消息头</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>, <span class="string">&quot;delay&quot;</span>, message, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            <span class="comment">// 添加延迟消息属性</span></span><br><span class="line">            message.getMessageProperties().setDelay(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>延迟消息插件内部会维护一个本地数据库表，同时使用Elang
Timers功能实现计时。如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，同时延迟消息的时间会存在误差。</p>
<p>因此，<strong>不建议设置延迟时间过长的延迟消息</strong>。</p>
</div>

<h2 id="5超时取消订单">5.超时取消订单</h2>
<p><img src="https://bu.dusays.com/2025/07/30/6889cff5a08f2.png" alt="image-20250730155528733"></p>
<p>接下来，我们就在交易服务中利用延迟消息实现订单超时取消功能。其大概思路如下：</p>
<p><img src="https://bu.dusays.com/2025/07/30/6889d0205efd9.png" alt="image-20250730155602496"></p>
<p>假如订单超时支付时间为30分钟，理论上说我们应该在下单时发送一条延迟消息，延迟时间为30分钟。这样就可以在接收到消息时检验订单支付状态，关闭未支付订单。</p>
<h1 id="七elasticsearch-01">七、Elasticsearch 01</h1>
<p>Elasticsearch是由elastic公司开发的一套搜索引擎技术，它是elastic技术栈中的一部分。完整的技术栈包括：</p>
<ul>
<li>Elasticsearch：用于数据存储、计算和搜索</li>
<li>Logstash/Beats：用于数据收集</li>
<li>Kibana：用于数据可视化</li>
</ul>
<p>整套技术栈被称为ELK，经常用来做日志收集、系统监控和状态分析等等：</p>
<p>整套技术栈的核心就是用来<strong>存储</strong>、<strong>搜索</strong>、<strong>计算</strong>的Elasticsearch，因此我们接下来学习的核心也是Elasticsearch。</p>
<p>我们要安装的内容包含2部分：</p>
<ul>
<li>elasticsearch：存储、搜索和运算</li>
<li>kibana：图形化展示</li>
</ul>
<p>首先Elasticsearch不用多说，是提供核心的数据存储、搜索、分析功能的。</p>
<p>然后是Kibana，Elasticsearch对外提供的是Restful风格的API，任何操作都可以通过发送http请求来完成。不过http请求的方式、路径、还有请求参数的格式都有严格的规范。这些规范我们肯定记不住，因此我们要借助于Kibana这个服务。</p>
<p>Kibana是elastic公司提供的用于操作Elasticsearch的可视化控制台。它的功能非常强大，包括：</p>
<ul>
<li>对Elasticsearch数据的搜索、展示</li>
<li>对Elasticsearch数据的统计、聚合，并形成图形化报表、图形</li>
<li>对Elasticsearch的集群状态监控</li>
<li>它还提供了一个开发控制台（DevTools），在其中对Elasticsearch的Restful的API接口提供了<strong>语法提示</strong></li>
</ul>
<h2 id="1安装">1.安装</h2>
<h3 id="11-安装elasticsearch">1.1 安装elasticsearch</h3>
<p>通过下面的Docker命令即可安装单机版本的elasticsearch：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> es \</span><br><span class="line">  <span class="literal">-e</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">  <span class="literal">-e</span> <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">  <span class="literal">-v</span> es<span class="literal">-data</span>:/usr/share/elasticsearch/<span class="keyword">data</span> \</span><br><span class="line">  <span class="literal">-v</span> es<span class="literal">-plugins</span>:/usr/share/elasticsearch/plugins \</span><br><span class="line">  <span class="literal">--privileged</span> \</span><br><span class="line">  <span class="literal">--network</span> hm<span class="literal">-net</span> \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">9200</span>:<span class="number">9200</span> \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">9300</span>:<span class="number">9300</span> \</span><br><span class="line">  elasticsearch:<span class="number">7.12</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>注意，这里我们采用的是elasticsearch的7.12.1版本，由于8以上版本的JavaAPI变化很大，在企业中应用并不广泛，企业中应用较多的还是8以下的版本。</p>
<p>安装完成后，访问9200端口，即可看到响应的Elasticsearch服务的基本信息：</p>
<p><a href="http://192.168.163.129:9200/">elasticsearch</a></p>
<p><img src="https://bu.dusays.com/2025/07/31/688b23740ffce.png" alt="image-20250731160354878"></p>
<p>通过下面的Docker命令，即可部署Kibana：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line"><span class="literal">--name</span> kibana \</span><br><span class="line"><span class="literal">-e</span> ELASTICSEARCH_HOSTS=http://es:<span class="number">9200</span> \</span><br><span class="line"><span class="literal">--network</span>=hm<span class="literal">-net</span> \</span><br><span class="line"><span class="literal">-p</span> <span class="number">5601</span>:<span class="number">5601</span>  \</span><br><span class="line">kibana:<span class="number">7.12</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.163.129:5601/app/home#/">Home -
Elastic</a></p>
<h2 id="2-倒排索引">2. 倒排索引</h2>
<p>倒排索引中有两个非常重要的概念：</p>
<ul>
<li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li>
<li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li>
</ul>
<p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理和应用，流程如下：</p>
<ul>
<li>将每一个文档的数据利用<strong>分词算法</strong>根据语义拆分，得到一个个词条</li>
<li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li>
<li>因为词条唯一性，可以给词条创建<strong>正向</strong>索引</li>
</ul>
<p><img src="https://bu.dusays.com/2025/07/31/688b2c871ec35.png" alt="image-20250731164230323"></p>
<p>流程描述：</p>
<p>1）用户输入条件<code>"华为手机"</code>进行搜索。</p>
<p>2）对用户输入条件<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p>
<p>3）拿着词条在倒排索引中查找（<strong>由于词条有索引，查询效率很高</strong>），即可得到包含词条的文档id：<code>1、2、3</code>。</p>
<p>4）拿着文档<code>id</code>到正向索引中查找具体文档即可（由于<code>id</code>也有索引，查询效率也很高）。</p>
<p>虽然要先查询倒排索引，再查询正向索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。</p>
<h3 id="正向和倒排">正向和倒排</h3>
<p>以索引的使用来理解：</p>
<p>正向索引，走的是全表扫描，速度很慢，而倒排，根据词条找文档id，可以走索引，再根据文档id找文档，也是索引，因此效率很高</p>
<p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p>
<ul>
<li><strong>正向索引</strong>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</li>
<li>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档的过程</strong>。</li>
</ul>
<p>是不是恰好反过来了？</p>
<p>那么两者方式的优缺点是什么呢？</p>
<p><strong>正向索引</strong>：</p>
<ul>
<li>优点：
<ul>
<li>可以给多个字段创建索引</li>
<li>根据索引字段搜索、排序速度非常快</li>
</ul></li>
<li>缺点：
<ul>
<li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li>
</ul></li>
</ul>
<p><strong>倒排索引</strong>：</p>
<ul>
<li>优点：
<ul>
<li>根据词条搜索、模糊搜索时，速度非常快</li>
</ul></li>
<li>缺点：
<ul>
<li>只能给词条创建索引，而不是字段</li>
<li>无法根据字段做排序</li>
</ul></li>
</ul>
<blockquote>
<p>什么是正向索引?</p>
</blockquote>
<ul>
<li>基于文档id创建索引。根据id查询快，但是查询词条时必须先找到文档，而后判断是否包含词条</li>
</ul>
<blockquote>
<p>什么是倒排索引?</p>
</blockquote>
<ul>
<li><p>对文档内容分词，对词条创建索引，并记录词条所在文档的id。</p></li>
<li><p>查询时先根据词条查询到文档id，而后根据文档id查询文档</p></li>
</ul>
<h2 id="3-ik-分词器">3. IK 分词器</h2>
<h3 id="31-安装">3.1 安装</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> es ./bin/elastic<span class="built_in">search-plugin</span>  install https://release.infinilabs.com/analysis<span class="literal">-ik</span>/stable/elastic<span class="built_in">search-analysis</span><span class="literal">-ik-7</span>.<span class="number">12.1</span>.zip</span><br></pre></td></tr></table></figure>

<p>最后，重启es容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart es</span><br></pre></td></tr></table></figure>

<h3 id="32-使用">3.2 使用</h3>
<p>IK分词器包含两种模式：</p>
<ul>
<li><code>ik_smart</code>：智能语义切分</li>
<li><code>ik_max_word</code>：最细粒度切分</li>
</ul>
<p>我们在Kibana的DevTools上来测试分词器，首先测试Elasticsearch官方提供的标准分词器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;马&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;序&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;学&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;习&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;棒&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，标准分词器智能1字1词条，无法正确对中文做分词。</p>
<p>我们再测试IK分词器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑马&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="33-拓展词典">3.3 拓展词典</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">volumes</span>]<span class="comment"># find / -name &quot;IKAnalyzer.cfg.xml&quot;</span></span><br><span class="line">/var/lib/docker/volumes/es<span class="literal">-plugins</span>/_data/analysis<span class="literal">-ik</span>/config/IKAnalyzer.cfg.xml</span><br><span class="line">/var/lib/docker/overlay2/cff1207b40d8029573e223fd4319142257f24e214dc00e58df51b4786018513f/<span class="built_in">diff</span>/usr/share/elasticsearch/config/analysis<span class="literal">-ik</span>/IKAnalyzer.cfg.xml</span><br><span class="line">/var/lib/docker/overlay2/cff1207b40d8029573e223fd4319142257f24e214dc00e58df51b4786018513f/merged/usr/share/elasticsearch/config/analysis<span class="literal">-ik</span>/IKAnalyzer.cfg.xml</span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">volumes</span>]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在config目录下的<code>ext.dic</code>文件下即可添加新词</p>
<h2 id="4-基本概览">4. 基本概览</h2>
<p>elasticsearch是面向**文档（Document）**存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为<code>json</code>格式后存储在<code>elasticsearch</code>中：</p>
<p><img src="https://bu.dusays.com/2025/08/01/688bf844de836.png" alt="image-20250801071204395"></p>
<p>因此，原本数据库中的一行数据就是ES中的一个JSON文档；而数据库中每行数据都包含很多列，这些列就转换为JSON文档中的<strong>字段（Field）</strong>。</p>
<h3 id="索引和映射">索引和映射</h3>
<p>随着业务发展，需要在es中存储的文档也会越来越多，比如有商品的文档、用户的文档、订单文档等等</p>
<p>所有文档都散乱存放显然非常混乱，也不方便管理。</p>
<p>因此，我们要将类型相同的文档集中在一起管理，称为<strong>索引（Index）</strong>。例如：</p>
<p><strong>商品索引</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3499</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">4999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;三星手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>用户索引</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;麻子&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>订单索引</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;goodsId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalFee&quot;</span><span class="punctuation">:</span> <span class="number">294</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;goodsId&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalFee&quot;</span><span class="punctuation">:</span> <span class="number">328</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>所有用户文档，就可以组织在一起，称为用户的索引；</li>
<li>所有商品的文档，可以组织在一起，称为商品的索引；</li>
<li>所有订单的文档，可以组织在一起，称为订单的索引；</li>
</ul>
<p>因此，我们可以把索引当做是数据库中的表。</p>
<p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p>
<p><code>索引</code>：和mysql的表的概念类似</p>
<p><code>映射</code>：索引中文档的字段约束信息，类似表的结构约束</p>
<h3 id="mysql与elasticsearch">MySQL与elasticsearch</h3>
<p>我们统一的把mysql与elasticsearch的概念做一下对比：</p>
<table>
<thead>
<tr>
<th style="text-align: left;"><strong>MySQL</strong></th>
<th style="text-align: left;"><strong>Elasticsearch</strong></th>
<th style="text-align: left;"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Table</td>
<td style="text-align: left;">Index</td>
<td style="text-align: left;">索引(index)，就是文档的集合，类似数据库的表(table)</td>
</tr>
<tr>
<td style="text-align: left;">Row</td>
<td style="text-align: left;">Document</td>
<td style="text-align: left;">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>
</tr>
<tr>
<td style="text-align: left;">Column</td>
<td style="text-align: left;">Field</td>
<td style="text-align: left;">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>
</tr>
<tr>
<td style="text-align: left;">Schema</td>
<td style="text-align: left;">Mapping</td>
<td style="text-align: left;">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>
</tr>
<tr>
<td style="text-align: left;">SQL</td>
<td style="text-align: left;">DSL</td>
<td style="text-align: left;">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>
</tr>
</tbody>
</table>
<p><img src="https://bu.dusays.com/2025/08/01/688c20a054a15.png" alt="image-20250801100406049"></p>
<p>那是不是说，我们学习了elasticsearch就不再需要mysql了呢？</p>
<p>并不是如此，两者各自有自己的擅长之处：</p>
<ul>
<li>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</li>
<li>Elasticsearch：擅长海量数据的搜索、分析、计算</li>
</ul>
<p>因此在企业中，往往是两者结合使用：</p>
<ul>
<li>对安全性要求较高的写操作，使用mysql实现</li>
<li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li>
<li>两者再基于某种方式，实现数据的同步，保证一致性</li>
</ul>
<h2 id="5-索引库的操作">5. 索引库的操作</h2>
<p>Index就类似数据库表，Mapping映射就类似表的结构。我们要向es中存储数据，必须先创建Index和Mapping</p>
<p>Mapping 是 Elasticsearch 的“字段结构 + 建索引规则 + 分词逻辑 +
存储行为”的声明。就类似于你在mysql中写Create table这种语句</p>
<h3 id="51-mapping映射属性">5.1 Mapping映射属性</h3>
<p>Mapping是对索引库中文档的约束，常见的Mapping属性包括：</p>
<ul>
<li><code>type</code>：字段数据类型，常见的简单类型有：
<ul>
<li>字符串：<code>text</code>（可分词的文本）、<code>keyword</code>（精确值，例如：品牌、国家、ip地址）</li>
<li>数值：<code>long</code>、<code>integer</code>、<code>short</code>、<code>byte</code>、<code>double</code>、<code>float</code>、</li>
<li>布尔：<code>boolean</code></li>
<li>日期：<code>date</code></li>
<li>对象：<code>object</code></li>
</ul></li>
<li><code>index</code>：是否创建索引，默认为<code>true</code></li>
<li><code>analyzer</code>：使用哪种分词器</li>
<li><code>properties</code>：该字段的子字段</li>
</ul>
<p>例如下面的json文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">52.1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">99.1</span><span class="punctuation">,</span> <span class="number">99.5</span><span class="punctuation">,</span> <span class="number">98.9</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>对应的每个字段映射（Mapping）：</p>
<p><img src="https://bu.dusays.com/2025/08/01/688c26ea5f1f0.png" alt="image-20250801103059719"></p>
<h3 id="52-索引的crud">5.2 索引的CRUD</h3>
<p>由于Elasticsearch采用的是Restful风格的API，因此其请求方式和路径相对都比较规范，而且请求参数也都采用JSON风格。</p>
<p>我们直接基于Kibana的DevTools来编写请求做测试，由于有语法提示，会非常方便。</p>
<p><img src="https://bu.dusays.com/2025/08/01/688c290b67d3a.png" alt="image-20250801103957167"></p>
<h4 id="创建索引库和映射">创建索引库和映射</h4>
<p><strong>基本语法</strong>：</p>
<ul>
<li>请求方式：<code>PUT</code></li>
<li>请求路径：<code>/索引库名</code>，可以自定义</li>
<li>请求参数：<code>mapping</code>映射</li>
</ul>
<p><strong>格式</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;子字段&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...略</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="查询">查询</h4>
<p><strong>基本语法</strong>：</p>
<ul>
<li>请求方式：GET</li>
<li>请求路径：/索引库名</li>
<li>请求参数：无</li>
</ul>
<p><strong>格式</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /heima</span><br></pre></td></tr></table></figure>

<h4 id="修改索引库">修改索引库</h4>
<p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p>
<p>虽然无法修改mapping中已有的字段，但是却允许添加新的字段到mapping中，因为不会对倒排索引产生影响。因此修改索引库能做的就是向索引库中添加新字段，或者更新索引库的基础属性。</p>
<p>新字段会创建自己的倒排索引，与现有索引并行存在，不会干扰已索引的数据。</p>
<p><strong>语法说明</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /索引库名/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;新字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="删除">删除</h4>
<p><strong>语法：</strong></p>
<ul>
<li>请求方式：DELETE</li>
<li>请求路径：/索引库名</li>
<li>请求参数：无</li>
</ul>
<p><strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /heima</span><br></pre></td></tr></table></figure>

<h4 id="总结">总结</h4>
<p>索引库操作有哪些？</p>
<ul>
<li>创建索引库：PUT /索引库名</li>
<li>查询索引库：GET /索引库名</li>
<li>删除索引库：DELETE /索引库名</li>
<li>修改索引库，添加字段：PUT /索引库名/_mapping</li>
</ul>
<p>可以看到，对索引库的操作基本遵循的Restful的风格，因此API接口非常统一，方便记忆。</p>
<h2 id="6-文档操作">6. 文档操作</h2>
<p>有了索引库，接下来就可以向索引库中添加数据了。</p>
<p>Elasticsearch中的数据其实就是JSON风格的文档。操作文档自然包括<code>增</code>、<code>删</code>、<code>改</code>、<code>查</code>等几种常见操作，我们分别来学习。</p>
<h3 id="新增">新增</h3>
<p>新增文档，就会按照索引库中的映射来创建倒排索引，但是创建倒排索引的过程对我们是不可见的</p>
<p><strong>语法：</strong></p>
<p>id理解为数据库的主键</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="查询-1">查询</h3>
<p>根据rest风格，新增是post，查询应该是get，不过查询一般都需要条件，这里我们把文档id带上。</p>
<p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名称<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/01/688c440913458.png" alt="image-20250801123520521"></p>
<h3 id="删除-1">删除</h3>
<p>删除使用DELETE请求，同样，需要根据id进行删除：</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DELETE</span> /&#123;索引库名&#125;/_doc/id值</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="修改">修改</h3>
<p>全量修改是覆盖原来的文档，其本质是两步操作：</p>
<ul>
<li>根据指定的id删除文档</li>
<li>新增一个相同id的文档</li>
</ul>
<p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p>
<p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员高级Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>由于<code>id</code>为<code>1</code>的文档已经被删除，所以第一次执行时，得到的反馈是<code>created</code>：</p>
<p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=NWEzOTYzOGViN2E2NzlkODU1MzU2OTM4Mjc3YWMzYWFfSjlDSWxzNktUMXMyckg1U2JJS21TTElBVGZJY2lrVWZfVG9rZW46Vzl1dmJuNEt5b0t1TDh4bklXb2N4TVVxbm5kXzE3NTQwMzA3MTg6MTc1NDAzNDMxOF9WNA" alt="img"></p>
<p>所以如果执行第2次时，得到的反馈则是<code>updated</code>：</p>
<h4 id="局部修改">局部修改</h4>
<p>局部修改是只修改指定id匹配的文档中的部分字段。</p>
<p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_update/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新的值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhaoYun@itcast.cn&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-批处理">7. 批处理</h2>
<p>批处理采用POST请求，基本语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; <span class="string">&quot;index&quot;</span> : &#123; <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span> &#125; &#125;</span><br><span class="line">&#123; <span class="string">&quot;field1&quot;</span> : <span class="string">&quot;value1&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;delete&quot;</span> : &#123; <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span> &#125; &#125;</span><br><span class="line">&#123; <span class="string">&quot;create&quot;</span> : &#123; <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span> &#125; &#125;</span><br><span class="line">&#123; <span class="string">&quot;field1&quot;</span> : <span class="string">&quot;value3&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;update&quot;</span> : &#123;<span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>, <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test&quot;</span>&#125; &#125;</span><br><span class="line">&#123; <span class="string">&quot;doc&quot;</span> : &#123;<span class="string">&quot;field2&quot;</span> : <span class="string">&quot;value2&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>index</code>代表新增操作
<ul>
<li><code>_index</code>：指定索引库名</li>
<li><code>_id</code>指定要操作的文档id</li>
<li><code>&#123; "field1" : "value1" &#125;</code>：则是要新增的文档内容</li>
</ul></li>
<li><code>delete</code>代表删除操作
<ul>
<li><code>_index</code>：指定索引库名</li>
<li><code>_id</code>指定要操作的文档id</li>
</ul></li>
<li><code>update</code>代表更新操作
<ul>
<li><code>_index</code>：指定索引库名</li>
<li><code>_id</code>指定要操作的文档id</li>
<li><code>&#123; "doc" : &#123;"field2" : "value2"&#125; &#125;</code>：要更新的文档字段</li>
</ul></li>
</ul>
<p>示例，批量新增：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;heima&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;info&quot;</span>: <span class="string">&quot;黑马程序员C++讲师&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;ww@itcast.cn&quot;</span>, <span class="string">&quot;name&quot;</span>:&#123;<span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;五&quot;</span>, <span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;王&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;heima&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;4&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;info&quot;</span>: <span class="string">&quot;黑马程序员前端讲师&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;zhangsan@itcast.cn&quot;</span>, <span class="string">&quot;name&quot;</span>:&#123;<span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;三&quot;</span>, <span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;张&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>批量删除：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;heima&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;heima&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;4&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-javarestclient">8. JavaRestClient</h2>
<h3 id="81-导入客户端">8.1 导入客户端</h3>
<p>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为<code>RestHighLevelClient</code>的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p>
<p>分为三步：</p>
<p>1）在<code>item-service</code>模块中引入<code>es</code>的<code>RestHighLevelClient</code>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）因为SpringBoot默认的ES版本是<code>7.17.10</code>，所以我们需要覆盖默认的ES版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）初始化RestHighLevelClient：</p>
<p>初始化的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<h4 id="811-编写简单测试类">8.1.1 编写简单测试类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.item.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/08/01/16:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ElesticSearch测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client=&quot;</span>+client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">       client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">               HttpHost.create(<span class="string">&quot;192.168.163.129:9200&quot;</span>)</span><br><span class="line">       ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁客户端</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">client=org.elasticsearch.client.RestHighLevelClient@12c7a01b</span><br><span class="line"><span class="number">17</span>:<span class="number">04</span>:<span class="number">46.887</span> [main] DEBUG org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager - Connection manager is shutting down</span><br><span class="line"><span class="number">17</span>:<span class="number">04</span>:<span class="number">46.891</span> [main] DEBUG org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager - Connection manager shut down</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/01/688c83881e251.png" alt="image-20250801170603450"></p>
<h3 id="82-索引库操作">8.2 索引库操作</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.item.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/08/01/16:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ElesticSearch测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client=&quot;</span>+client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Request对象</span></span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备请求参数</span></span><br><span class="line">        request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPING_TEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;image\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;category\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;sold\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;commentCount\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;isAD\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;boolean\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;updateTime\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;date\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Request对象</span></span><br><span class="line">        <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.indices().get(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Request对象</span></span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">       client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">               HttpHost.create(<span class="string">&quot;192.168.163.129:9200&quot;</span>)</span><br><span class="line">       ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁客户端</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/01/688c9c0471ae2.png" alt="image-20250801185039277"></p>
<h3 id="83-文档操作">8.3 文档操作</h3>
<h4 id="新增-1">新增</h4>
<p>从MySQL中新增数据到elastic</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/08/01/16:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Doc文档测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest(properties = &quot;spring.profiles.active=local&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticDocTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client=&quot;</span>+client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testIndexDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 0. 准备文档数据</span></span><br><span class="line">        <span class="comment">// 0.1 根据id查询商品信息</span></span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> itemService.getById(<span class="number">100000011127L</span>);</span><br><span class="line">        <span class="comment">// 0.2 将商品信息转换为文档数据</span></span><br><span class="line">        <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;items&quot;</span>).id(itemDoc.getId());</span><br><span class="line">        <span class="comment">// 2.准备请求参数</span></span><br><span class="line">        request.source(JSONUtil.toJsonStr(itemDoc), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client. index(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">       client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">               HttpHost.create(<span class="string">&quot;192.168.163.129:9200&quot;</span>)</span><br><span class="line">       ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁客户端</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>有@Autowired private MyService myService;</p>
<p>是想要SpringBean 对象@SpringBootTest
注解通常用于集成测试中，它会启动整个 Spring 容器，以便可以注入 Spring
管理的 Bean。如果不是测试类，使用 SpringApplication.run() 启动 Spring
Boot 应用</p></li>
<li><p>在<code>hm-service</code>模块的<code>com.hmall.item.domain.dto</code>包中定义一个新的DTO</p></li>
</ul>
<p>新增结果</p>
<p><img src="https://bu.dusays.com/2025/08/02/688d6f30220d2.png" alt="image-20250802095136444"></p>
<h4 id="查询-2">查询</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testGetDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 1.准备Request</span></span><br><span class="line">       <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;items&quot;</span>, <span class="string">&quot;100000011127&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.发送请求</span></span><br><span class="line">       <span class="type">GetResponse</span> <span class="variable">documentFields</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">// 3.处理响应结果</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> documentFields.getSourceAsString();</span><br><span class="line"></span><br><span class="line">       <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, ItemDoc.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;items&quot;</span>+itemDoc);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://bu.dusays.com/2025/08/02/688d738e33c37.png" alt="image-20250802101009877"></p>
<h4 id="删除-2">删除</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;items&quot;</span>, <span class="string">&quot;100000011127&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更新">更新</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;items&quot;</span>,<span class="string">&quot;100000011127&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备请求参数</span></span><br><span class="line">    request.doc(</span><br><span class="line">            <span class="string">&quot;price&quot;</span>,<span class="number">25600</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client. update(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="批处理">批处理</h4>
<p>批处理与前面讲的文档的CRUD步骤基本一致：</p>
<ul>
<li>创建Request，但这次用的是<code>BulkRequest</code></li>
<li>准备请求参数</li>
<li>发送请求，这次要用到<code>client.bulk()</code>方法</li>
</ul>
<p><code>BulkRequest</code>本身其实并没有请求参数，其本质就是将多个普通的CRUD请求组合在一起发送。例如：</p>
<ul>
<li>批量新增文档，就是给每个文档创建一个<code>IndexRequest</code>请求，然后封装到<code>BulkRequest</code>中，一起发出。</li>
<li>批量删除，就是创建N个<code>DeleteRequest</code>请求，然后封装到<code>BulkRequest</code>，一起发出</li>
</ul>
<p>因此<code>BulkRequest</code>中提供了<code>add</code>方法，用以添加其它CRUD的请求：</p>
<p><img src="https://bu.dusays.com/2025/08/02/688d7f36b41b8.png" alt="image-20250802110005414"></p>
<p>可以看到，能添加的请求有：</p>
<ul>
<li><code>IndexRequest</code>，也就是新增</li>
<li><code>UpdateRequest</code>，也就是修改</li>
<li><code>DeleteRequest</code>，也就是删除</li>
</ul>
<p>因此Bulk中添加了多个<code>IndexRequest</code>，就是批量新增功能了。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulk</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    <span class="comment">// 2.准备请求参数</span></span><br><span class="line">    request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;items&quot;</span>).id(<span class="string">&quot;1&quot;</span>).source(<span class="string">&quot;json doc1&quot;</span>, XContentType.JSON));</span><br><span class="line">    request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;items&quot;</span>).id(<span class="string">&quot;2&quot;</span>).source(<span class="string">&quot;json doc2&quot;</span>, XContentType.JSON));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="完整代码">完整代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批处理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBulk</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">PageNo</span> <span class="operator">=</span> <span class="number">1</span>, PageSize = <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 0. 准备文档数据-查询到一页数据</span></span><br><span class="line">            Page&lt;Item&gt; page = itemService.lambdaQuery()</span><br><span class="line">                    .eq(Item::getStatus, <span class="number">1</span>)</span><br><span class="line">                    .page(Page.of(PageNo, PageSize));</span><br><span class="line">            List&lt;Item&gt; records = page.getRecords();</span><br><span class="line">            <span class="keyword">if</span>(records.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 1.准备Request</span></span><br><span class="line">            <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">            <span class="comment">// 2.准备请求参数</span></span><br><span class="line">            <span class="keyword">for</span> (Item record : records) &#123;</span><br><span class="line">                request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;items&quot;</span>).id(record.getId().toString())</span><br><span class="line">                        .source(JSONUtil.toJsonStr(BeanUtil.copyProperties(record,ItemDoc.class)),XContentType.JSON));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 翻页</span></span><br><span class="line">            PageNo++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="八-elasticsearch-02">八. Elasticsearch 02</h1>
<p>Elasticsearch的查询可以分为两大类：</p>
<ul>
<li><strong>叶子查询（Leaf</strong> <strong>query</strong>
<strong>clauses）</strong>：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。</li>
<li><strong>复合查询（Compound</strong> <strong>query</strong>
<strong>clauses）</strong>：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。</li>
</ul>
<p><img src="https://bu.dusays.com/2025/08/02/688db44322502.png" alt="image-20250802144614784"></p>
<h2 id="81-dsl查询">8.1 DSL查询</h2>
<h3 id="1-入门">1. 入门</h3>
<p>我们依然在Kibana的DevTools中学习查询的DSL语法。首先来看查询的语法结构：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;查询类型&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// .. 查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>GET /&#123;索引库名&#125;/_search</code>：其中的<code>_search</code>是固定路径，不能修改</li>
</ul>
<p>例如，我们以最简单的无条件查询为例，无条件查询的类型是：match_all，因此其查询语句如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>由于match_all无条件，所以条件位置不写即可。</p>
<h3 id="2-叶子查询">2. 叶子查询</h3>
<p>叶子查询可分为：</p>
<ul>
<li><strong>全文检索查询（Full Text
Queries）</strong>：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。例如：
<ul>
<li><code>match</code>：</li>
<li><code>multi_match</code></li>
</ul></li>
<li><strong>精确查询（Term-level
queries）</strong>：不对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。例如：
<ul>
<li><code>ids</code></li>
<li><code>term</code></li>
<li><code>range</code></li>
</ul></li>
<li><strong>地理坐标查询</strong>：用于搜索地理位置，搜索方式很多，例如：
<ul>
<li><code>geo_bounding_box</code>：按矩形搜索</li>
<li><code>geo_distance</code>：按点和半径搜索</li>
</ul></li>
<li>…略</li>
</ul>
<h4 id="21-全文检索查询">2.1 全文检索查询</h4>
<p><img src="https://bu.dusays.com/2025/08/02/688dbda71276a.png" alt="aaaaa"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索条件&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/02/688ddec79706d.png" alt="image-20250802174737736"></p>
<p>与<code>match</code>类似的还有<code>multi_match</code>，区别在于可以同时对多个字段搜索，而且多个字段都要满足，语法示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索条件&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;字段1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;字段2&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>参与查询字段越多，查询性能就越差，可以使用copy_to将多个字段拷贝到一个字段中</p>
<p><img src="https://bu.dusays.com/2025/08/02/688de0167cac8.png" alt="image-20250802175313386"></p>
<p>相关度评分是基于BM25（Best Matching
25）算法来计算的，这是一种改进的TF-IDF（Term Frequency-Inverse Document
Frequency）算法。</p>
<h4 id="22-精确查询">2.2 精确查询</h4>
<p>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询。也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配。因此推荐查找<code>keyword</code>、数值、日期、<code>boolean</code>类型的字段。例如：</p>
<ul>
<li>id</li>
<li>price</li>
<li>城市</li>
<li>地名</li>
<li>人名</li>
</ul>
<p>等等，作为一个整体才有含义的字段。</p>
<p>以<code>term</code>查询为例，其语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名(.keyword)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索条件&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/02/688de37a8d719.png" alt="image-20250802180750164"></p>
<p>因为这里的brand是text类型的会被分词，如果直接匹配就匹配不上了，所以加了keyword</p>
<h5 id="range范围查询"><code>range</code>范围查询</h5>
<p><code>range</code>是范围查询，对于范围筛选的关键字有：</p>
<ul>
<li><code>gte</code>：大于等于</li>
<li><code>gt</code>：大于</li>
<li><code>lte</code>：小于等于</li>
<li><code>lt</code>：小于</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span><span class="number">500000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span><span class="number">1000000</span></span><br><span class="line">      <span class="punctuation">&#125;</span>      </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/02/688de4d25ec03.png" alt="image-20250802181336064"></p>
<p><code>Ids</code>根据id查询</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;具体的id&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/02/688de648d6815.png" alt="image-20250802181950347"></p>
<blockquote>
<p>match和multi_match的区别是什么?</p>
</blockquote>
<ul>
<li><p>match:根据一个字段查询</p></li>
<li><p>multi_match:根据多个字段查询，参与查询字段越多，查询性能越差</p></li>
</ul>
<blockquote>
<p>精确查询常见的有哪些?</p>
</blockquote>
<ul>
<li>term查询:根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</li>
<li>range查询:根据数值范围查询，可以是数值、日期的范围</li>
</ul>
<h3 id="3-复合查询">3. 复合查询</h3>
<p>复合查询大致可以分为两类：</p>
<ul>
<li>第一类：基于逻辑运算组合叶子查询，实现组合条件，例如
<ul>
<li>bool</li>
</ul></li>
<li>第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如：
<ul>
<li>function_score</li>
<li>dis_max</li>
</ul></li>
</ul>
<h4 id="31-bool查询">3.1 bool查询</h4>
<p>bool查询，即布尔查询。就是利用逻辑运算来组合一个或多个查询子句的组合。bool查询支持的逻辑运算有：</p>
<ul>
<li>must：必须匹配每个子查询，类似“与”</li>
<li>should：选择性匹配子查询，类似“或”</li>
<li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li>
<li>filter：必须匹配，<strong>不参与算分</strong></li>
</ul>
<p>bool查询的语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vivo&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">2500</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>出于性能考虑，与搜索关键字无关的查询尽量采用must_not或filter逻辑运算，避免参与相关性算分。</p>
<h5 id="例如">例如：</h5>
<p>查询智能手机品牌华为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;智能手机&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;brand.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">90000</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">159900</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/02/688dee0f954bb.png" alt="image-20250802185301332"></p>
<h3 id="4-排序">4. 排序</h3>
<p>elasticsearch默认是根据相关度算分（<code>_score</code>）来排序，但是也支持自定义方式对搜索结果排序。不过分词字段无法排序，能参与排序字段类型有：<code>keyword</code>类型、数值类型、地理坐标类型、日期类型等。</p>
<p>语法说明：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;排序字段&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;排序方式asc和desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688ecb3f14432.png" alt="image-20250803103645088"></p>
<h3 id="5-分页">5. 分页</h3>
<p>elasticsearch
默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。</p>
<p>elasticsearch中通过修改<code>from</code>、<code>size</code>参数来控制要返回的分页结果：</p>
<ul>
<li><code>from</code>：从第几个文档开始</li>
<li><code>size</code>：总共查询几个文档</li>
</ul>
<p>类似于mysql中的<code>limit ?, ?</code></p>
<p>语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>  <span class="comment">// 每页文档数量，默认10</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688ecee903d46.png" alt="image-20250803105219258"></p>
<h5 id="深度分页">深度分页</h5>
<p>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上。这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。</p>
<p>Elasticsearch 的索引由多个不可变的分段（Segment）
组成，每个分段独立存储数据。文档按写入顺序存储在分段内，类似数组结构。通过内部文档
ID（Lucene 的 doc_id）可直接计算偏移量，实现快速随机访问。（POST
/index/_doc）就会自动创建id，（POST
/index/_doc/{id}）就是手动创建id，前面我们通过java的es客户端是后者的方式）</p>
<p>但是简单分页查询的问题在于，排序并不一定总是按文档id顺序排序，而是常常会按某些关键字进行排序（例如下方，但下方并未说明，实际有“sort“条件但没有“query“条件时，算分均为null，此时按文档id升序排列。题外话：如果只有“from“和“size“，不显式指定“sort“排序条件时，es默认会将搜索结果按算分降序排列；但同时没有“query“条件时，那么默认“query“就是match_all，所有算分都是1.0，此时退化为按_doc升序默认排序），所以会导致排序后文档id分散，从而无法依靠id顺序如同数组一般随机访问，而是如同链表一般顺序访问。</p>
<p>而分页条件（from、size）越大，查询内容也就越多（查询内容当然存在内存中，es是一个java项目，例如找出前10000个数据放在内存里，最后遍历到第9990-10000的数据），数据过多就会导致oom。这里“深度分页”解决的就是分页数据量过于庞大的问题。</p>
<p><img src="https://bu.dusays.com/2025/08/03/688ed109e2ac5.png" alt="image-20250803110128561"></p>
<p>from+size = 页码 * size</p>
<p>针对深度分页，elasticsearch提供了两种解决方案：</p>
<ul>
<li><code>search after</code>：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li>
<li><code>scroll</code>：原理将排序后的文档id形成快照，保存下来，基于快照做分页。官方已经不推荐使用。</li>
</ul>
<p>https://blog.csdn.net/weixin_47762494/article/details/145763668?spm=1001.2014.3001.5501</p>
<p>假设你在看一本书，你已经翻到某一页（例如第10页），然后你想继续看第11页。search_after就像是“给你上一页的最后一行文字”，让你知道接下来你应该从哪里开始读，而不是从头开始翻书（就像from那样跳过很多页）</p>
<p><img src="https://bu.dusays.com/2025/08/03/688ed45c1bcc6.png" alt="image-20250803111528878"></p>
<h3 id="6-高亮显示">6. 高亮显示</h3>
<p>事实上elasticsearch已经提供了给搜索关键字加标签的语法，无需我们自己编码。</p>
<p>基本语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;搜索字段&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索关键字&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;高亮字段名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span><span class="comment">// 高亮的前置标签</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span> <span class="comment">// 高亮的后置标签</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>搜索必须有查询条件，而且是全文检索类型的查询条件，例如<code>match</code></li>
<li>参与高亮的字段必须是<code>text</code>类型的字段</li>
<li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code></li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;脱脂牛奶&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688ed8e82965f.png" alt="image-20250803113500171"></p>
<h2 id="82-restclient-查询">8.2 RestClient 查询</h2>
<p>文档的查询依然使用昨天学习的
<code>RestHighLevelClient</code>对象，查询的基本步骤如下：</p>
<ul>
<li>1）创建<code>request</code>对象，这次是搜索，所以是<code>SearchRequest</code></li>
<li>2）准备请求参数，也就是查询DSL对应的JSON参数</li>
<li>3）发起请求</li>
<li>4）解析响应，响应结果相对复杂，需要逐层解析</li>
</ul>
<h3 id="1-查询所有">1. 查询所有</h3>
<p><strong>查询所有</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client=&quot;</span>+client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建request对象</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 配置request对象</span></span><br><span class="line">        request.source()</span><br><span class="line">                .query(QueryBuilders.matchAllQuery());</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 解析响应结果</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="comment">// 4.1. 获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;总条数：&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 4.2. 获取总记录数</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> searchHit.getSourceAsString();</span><br><span class="line">            <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, ItemDoc.class);</span><br><span class="line">            System.out.println(itemDoc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">       client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">               HttpHost.create(<span class="string">&quot;192.168.163.129:9200&quot;</span>)</span><br><span class="line">       ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁客户端</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688f13bf9c89c.png" alt="image-20250803154600032"></p>
<h3 id="2-构建条件查询">2. 构建条件查询</h3>
<h4 id="全文检索查询">全文检索查询</h4>
<p><img src="https://bu.dusays.com/2025/08/03/688f1556d2743.png" alt="image-20250803155245935"></p>
<h4 id="精确查询">精确查询</h4>
<p><img src="https://bu.dusays.com/2025/08/03/688f15b4c1bda.png" alt="image-20250803155415127"></p>
<h4 id="布尔查询">布尔查询</h4>
<p><img src="https://bu.dusays.com/2025/08/03/688f1636ea691.png" alt="image-20250803155634268"></p>
<p><strong>示例</strong></p>
<p>搜索关键字脱脂牛奶，品牌德亚，价格低于300</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client=&quot;</span>+client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建request对象</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 配置request对象</span></span><br><span class="line">        request.source()</span><br><span class="line">                .query(QueryBuilders</span><br><span class="line">                        .boolQuery()</span><br><span class="line">                        .must(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;脱脂牛奶 &quot;</span>))</span><br><span class="line">                        .filter(QueryBuilders.termQuery(<span class="string">&quot;brand.keyword&quot;</span>,<span class="string">&quot;德亚&quot;</span>))</span><br><span class="line">                        .filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lt(<span class="number">30000</span>))</span><br><span class="line">                );</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        pareResponseResult(search);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pareResponseResult</span><span class="params">(SearchResponse search)</span> &#123;</span><br><span class="line">        <span class="comment">// 4. 解析响应结果</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="comment">// 4.1. 获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;总条数：&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 4.2. 获取总记录数</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> searchHit.getSourceAsString();</span><br><span class="line">            <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, ItemDoc.class);</span><br><span class="line">            System.out.println(itemDoc);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">       client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">               HttpHost.create(<span class="string">&quot;192.168.163.129:9200&quot;</span>)</span><br><span class="line">       ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁客户端</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688f1be407ab5.png" alt="image-20250803162049889"></p>
<h3 id="3-排序和分页">3. 排序和分页</h3>
<p><img src="https://bu.dusays.com/2025/08/03/688f1c98a7f53.png" alt="image-20250803162351151"></p>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 0. 模拟前端传入的参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>, pageSize = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 1. 创建request对象</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 配置request对象</span></span><br><span class="line">        request.source()</span><br><span class="line">                .query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1. 设置分页</span></span><br><span class="line">        request.source()</span><br><span class="line">                .from((pageNo-<span class="number">1</span>)*pageSize)</span><br><span class="line">                .size(pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.2. 设置排序</span></span><br><span class="line">        request.source()</span><br><span class="line">                .sort(<span class="string">&quot;sold&quot;</span>, SortOrder.DESC)</span><br><span class="line">                .sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        pareResponseResult(search);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pareResponseResult</span><span class="params">(SearchResponse search)</span> &#123;</span><br><span class="line">        <span class="comment">// 4. 解析响应结果</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="comment">// 4.1. 获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;总条数：&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 4.2. 获取总记录数</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> searchHit.getSourceAsString();</span><br><span class="line">            <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, ItemDoc.class);</span><br><span class="line">            System.out.println(itemDoc);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688f2035b4e49.png" alt="image-20250803163902995"></p>
<h3 id="4-高亮显示">4. 高亮显示</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高亮</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">       <span class="comment">// 1. 创建request对象</span></span><br><span class="line">       <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">       <span class="comment">// 2. 配置request对象</span></span><br><span class="line">       request.source()</span><br><span class="line">               .query(QueryBuilders</span><br><span class="line">                       .matchQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;脱脂牛奶&quot;</span>)</span><br><span class="line">               );</span><br><span class="line">       <span class="comment">// 2.1. 设置高亮</span></span><br><span class="line">       request.source()</span><br><span class="line">               .highlighter(SearchSourceBuilder.highlight().field(<span class="string">&quot;name&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3. 发送请求</span></span><br><span class="line">       <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       pareResponseResult(search);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pareResponseResult</span><span class="params">(SearchResponse search)</span> &#123;</span><br><span class="line">       <span class="comment">// 4. 解析响应结果</span></span><br><span class="line">       <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">       <span class="comment">// 4.1. 获取总条数</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">       System.out.println(<span class="string">&quot;总条数：&quot;</span>+value);</span><br><span class="line">       <span class="comment">// 4.2. 获取总记录数</span></span><br><span class="line">       SearchHit[] searchHits = hits.getHits();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> searchHit.getSourceAsString();</span><br><span class="line">           <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, ItemDoc.class);</span><br><span class="line">           <span class="comment">// 5.1. 获取高亮结果</span></span><br><span class="line">           Map&lt;String, HighlightField&gt; hms = searchHit.getHighlightFields();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (hms != <span class="literal">null</span> || !hms.isEmpty()) &#123;</span><br><span class="line">               <span class="comment">// 5.2. 根据高亮字段名，获取高亮结果</span></span><br><span class="line">               <span class="type">HighlightField</span> <span class="variable">hf</span> <span class="operator">=</span> hms.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">               <span class="comment">// 5.3. 获取高亮结果，覆盖非高亮</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> hf.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">               itemDoc.setName(string);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           System.out.println(itemDoc);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/03/688f2758b5691.png" alt="image-20250803170906792"></p>
<h2 id="83-数据聚合">8.3 数据聚合</h2>
<p>聚合（<code>aggregations</code>）可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p>
<ul>
<li>什么品牌的手机最受欢迎？</li>
<li>这些手机的平均价格、最高价格、最低价格？</li>
<li>这些手机每月的销售情况如何？</li>
</ul>
<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果。</p>
<p>聚合常见的有三类：</p>
<ul>
<li>**桶（<code>Bucket</code>）**聚合：用来对文档做分组</li>
<li><code>TermAggregation</code>：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li>
<li><code>Date Histogram</code>：按照日期阶梯分组，例如一周为一组，或者一月为一组</li>
<li>**度量（<code>Metric</code>）**聚合：用以计算一些值，比如：最大值、最小值、平均值等</li>
<li><code>Avg</code>：求平均值</li>
<li><code>Max</code>：求最大值</li>
<li><code>Min</code>：求最小值</li>
<li><code>Stats</code>：同时求<code>max</code>、<code>min</code>、<code>avg</code>、<code>sum</code>等</li>
<li>**管道（`pipeline）**聚合：其它聚合的结果为基础做进一步运算</li>
</ul>
<p>**注意：**参加聚合的字段必须是keyword、日期、数值、布尔类型</p>
<p><img src="https://bu.dusays.com/2025/08/04/68900b44be11c.png" alt="image-20250804092205880"></p>
<p>下面俩小人怎么盯着劳资看</p>
<h3 id="1-dsl聚合">1. DSL聚合</h3>
<p>例如我们要统计所有商品中共有哪些商品分类，其实就是以分类（category）字段对数据分组。category值一样的放在同一组，属于<code>Bucket</code>聚合中的<code>Term</code>聚合。</p>
<p>基本语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 定义聚合</span></span><br><span class="line">    <span class="attr">&quot;category_agg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 给聚合起名字</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 聚合的类型，按照品牌值聚合，所以选择term</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;category&quot;</span><span class="punctuation">,</span> <span class="comment">// 参与聚合的字段</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span> <span class="comment">// 希望获取的聚合结果数量</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="bucket聚合">Bucket聚合</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 聚合</span><br><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cate_agg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;category.keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brand_agg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand.keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/04/6890107f106e1.png" alt="image-20250804094425360"></p>
<h4 id="带条件的聚合">带条件的聚合</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 带条件的聚合</span><br><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;category.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">300000</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brand_agg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand.keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/04/689011bdc4db7.png" alt="image-20250804094941579"></p>
<h4 id="metric聚合">Metric聚合</h4>
<p>上节课，我们统计了价格高于3000的手机品牌，形成了一个个桶。现在我们需要对桶内的商品做运算，获取每个品牌价格的最小值、最大值、平均值。</p>
<p>这就要用到<code>Metric</code>聚合了，例如<code>stat</code>聚合，就可以同时获取<code>min</code>、<code>max</code>、<code>avg</code>等结果。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Metric聚合</span><br><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;category.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brand_agg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand.keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;price_stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/04/6890139eb1661.png" alt="image-20250804095745353"></p>
<h3 id="2-restclient聚合">2. RestClient聚合</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testAgg</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">       <span class="comment">// 1. 创建request对象</span></span><br><span class="line">       <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">       <span class="comment">// 2. 配置request对象-分页</span></span><br><span class="line">       request.source().size(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">// 2.1. 设置聚合函数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">brandAgg</span> <span class="operator">=</span> <span class="string">&quot;brandAgg&quot;</span>;</span><br><span class="line">       request.source().aggregation(</span><br><span class="line">               AggregationBuilders.terms(brandAgg).field(<span class="string">&quot;brand.keyword&quot;</span>)</span><br><span class="line">       );</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3. 发送请求</span></span><br><span class="line">       <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 4. 解析响应结果</span></span><br><span class="line">       <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> search.getAggregations();</span><br><span class="line">       <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(brandAgg);</span><br><span class="line"></span><br><span class="line">       List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">       <span class="comment">// 遍历获取桶</span></span><br><span class="line">       <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;品牌： &quot;</span>+bucket.getKeyAsString());</span><br><span class="line">           System.out.println(<span class="string">&quot;数量： &quot;</span>+bucket.getDocCount());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/04/68901853aad60.png" alt="image-20250804101731729"></p>
<h1 id="九面试部分">九、面试部分</h1>
<p>详情参照站内另外一篇文章面试模块</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马学成在线</title>
    <url>/posts/3860/</url>
    <content><![CDATA[<blockquote>
<p>莫道桑榆晚，为霞尚满天。</p>
<p><em>——刘禹锡 《酬乐天咏老见示》</em></p>
</blockquote>
<h1 id="一面试部分">一、面试部分</h1>
<h4 id="1-面试话术">1. 面试话术</h4>
<ol type="1">
<li>好的面试官，我介绍一个源自于我自己想法的一个项目，这个想法来源于我一对一辅导考研学生的时候，当时因为我的成绩比较高，然后一个机构找到我，联系我给考研的学生上专业课一对一辅导，后来通过了解发现，我给学生上课机构付给我的教学费用还没有学生交给机构的费用的一半，然而机构做的事情仅仅只是找到了我，他们靠这个来赚取信息差，所以当时就产生了想做一个平台，用于链接考研学生和已经考上的同学们，来消除中间商赚差价。于是就有了这个项目，这个项目目前正在开发，采用的是B2B2C业务模式，第一个B呢就是我们团队，第二个B指的就是已经上岸的同学，他们可发布课程收取费用，C就是正在准备考研的同学，项目采用的是微服务架构，目前已经完成了内容管理模块，媒资管理模块，课程发布模块。其中
内容管理模块可以实现对课程的搜索、添加课程基本信息，课程营销信息，然还可以添加课程计划等
媒资管理模块可以实现上传视频、图片等，对大文件实现了断点续传、使用分布式任务调度XXL-JOB实现了视频转码等。
课程发布模块通过分布式事务实现了上传课程静态页面到MinIO，向Redis写缓存，包括后续还考虑写ElasticSerach索引库，实现课程的快速搜索。</li>
<li>面试官问我对视频转码的内容感兴趣，我说我就是调用了FFMpeg的工具包，他说可以了解一下谷歌的转码工具，如果能了解原理并且深入的话会很加分。
三面用友的时候，面试让我共享屏幕，打开ideal给他讲解分布式事务的相关代码，就是本地消息表+任务调度机制那个，然后如何用模板设计模式封装成SDK，并且现场手写关键地方代码，完了之后考察JUC中的countdownlathch如何实现的。</li>
</ol>
<h4 id="2-简要介绍一下你的项目">2. 简要介绍一下你的项目</h4>
<ul>
<li>我最近参与的项目是我们公司自研的专门针对成人职业技能教育的网络课堂系统，网站提供了成人职业技能培训的相关课程，如:软件开发培训、职业资格证书培训、成人学历教育培训等课程。项目基于B2B2C的业务模式，培训机构可以在平台入驻、发布课程，我们公司作为运营方由专门的人员对发布的课程进行审核，审核通过后课程才可以发布成功，课程包括免费和收费两种形式，对于免费课程普通用户可以直接选课学习，对于收费课程在选课后需要支付成功才可以继续学习。</li>
<li>本项目包括三个端:用户端(学生端)、机构端、运营端。工
核心模块包括:内容管理、媒资管理、课程搜索、订单支付、选课管理、认证授权等。</li>
<li>本项目采用前后端分离架构，后端采用SpringEoot.SpringCloud技术栈开发，数据库使用了MySQL，还使用的Redis、消息队列、分布式文件系统、Elasticsearch等中间件系统。</li>
<li>划分的微服务包括:内容管理服务、媒资管理服务、搜索服务、订单支付服务、学习中心服务、系统管理服务.认证授权服务、网关服务、注册中心服务、配置中心服务等。</li>
<li>我在这个项目中负责了内容管理、媒资管理、订单支付模块的设计与开发。</li>
<li>内容管理模块，是对平台上的课程进行管理，课程的相关信息比较多这里在数据库设计了课程基本信息表、课程营销表、课程计划、课程师资表进行存储，培训机构要发布一门课程需要填写课程基本信息、课程营销信息、课程计划信息、课程师资信息，填写完毕后需要提交审核，由运营人员进行课程信息的审核，整个审核过程是程序自动审核加人工确认的方式，通常24小时审核完成。课程审核通过即可发布课程，课程的相关信息会聚合到课程发布表中，这里不仅要将课程信息写到课程发布表还要将课程信息写到索引库、分布式文件系统中，所以这里存在分布式事务的问题，项目使用本地消息表加任务调度的方式去解决这里的分布式事务，保存数据的最终一致性。</li>
</ul>
<h4 id="3-b2b2c-是什么">3. B2B2C 是什么</h4>
<ul>
<li>1B是服务的供应商,2B就是培训机构,C是消费者.B2B是指服务的供应商和培训机构的运作方式,B2C是指培训机构和消费者之间的运作方式</li>
</ul>
<h4 id="4-maven依赖版本冲突了怎么解决">4.
maven依赖版本冲突了怎么解决？</h4>
<p>1、使用exclusions排除依赖</p>
<p>比如:我们只依赖B的1.0版本，此时可以在依赖C时排除对B的依赖。</p>
<p>2、使用dependencyManagement锁定版本号。
通常在父工程对依赖的版本统一管理。
比如:我们只依赖B的1.0版本，此时可以在父工程中限定B的版本为1.0。</p>
<h4 id="5-mysql-的常见引擎以及区别">5. MySQL 的常见引擎以及区别</h4>
<p><strong>InnoDB</strong></p>
<p>1、支持事务。</p>
<p>2、使用的锁粒度默认为行级锁，可以支持更高的并发;也支持表锁。</p>
<p>3、支持外键约束;外键约束其实降低了表的查询速度，增加了表之间的耦合度。</p>
<p><strong>MyISAM</strong></p>
<p>1、不提供事务支持</p>
<p>2、只支持表级锁</p>
<p>3、不支持外键</p>
<p><strong>memory</strong></p>
<p>数据存储在内存中</p>
<p><strong>总结</strong>:</p>
<ul>
<li>·MyIlSAM管理非事务表，提供高速存储和检索以及全文搜索能力，如果在应用中执行大量select操作，应该选择MylSAM</li>
<li>lnnoDB用于事务处理，具有ACID事务支持等特性，如果在应用中执行大量insert和update操作，应该选择lnnoDB</li>
</ul>
<p><strong>拓展:</strong></p>
<p>什么是表锁什么是行为锁</p>
<ol type="1">
<li><p>行级别锁</p>
<ul>
<li>是针对数据表中<strong>单行记录</strong>的锁。当事务对某一行数据进行操作（如增删改查）时，仅锁定该特定行，其他事务可以同时操作表中其他未被锁定的行，不相互阻塞。</li>
</ul>
<ul>
<li>适用于并发量高、写操作频繁的场景，能最大限度减少锁冲突，提高并发性能。</li>
</ul></li>
<li><p>表级别锁</p>
<ul>
<li>是针对<strong>整个数据表</strong>的锁。当事务持有表级锁时，会锁定整张表，此时其他事务对该表的所有操作（包括读写任何行）都会被阻塞，直到锁释放。</li>
<li>适用于需要对整张表进行批量操作（如全表更新、结构修改）的场景，锁机制简单，开销小，但并发性能较低。</li>
</ul></li>
</ol>
<h4 id="6-建表应该注意什么">6. 建表应该注意什么</h4>
<p>1、注意选择存储引擎，如果要支持事务需要选择InnoDB。</p>
<p>2、注意字段类型的选择，对于日期类型如果要记录时分秒建议使用datetime，只记录年月日使用date类型，对于字符类型的选择，固定长度字段选择char，不固定长度的字段选择varchar，varchar比char节省空间但速度没有char快;对于内容介绍类的长广文本字段使用text或longtext类型;如果存储图片等二进制数据使用blob或
longblob类型;对金额字段建议使用DECIMAL;对于数值类型的字段在确保取值范围足够的前提下尽量使用占用空间较小的类型，</p>
<p>3、主键字段建议使用自然主键，不要有业务意义，建议使用int
unsigned类型，特殊场景使用bigint类型。4、如果要存储text、blob字段建议单独建—张表，使用外键关联。</p>
<p>5、尽量不要定义外键，保证表的独立性，可以存在外键意义的字段。</p>
<p>6、设置字段默认值，比如:状态、创建时间等。</p>
<p>7、每个字段写清楚注释。</p>
<p>8、注意字段的约束，比如:非空、唯一、主键等。</p>
<h4 id="7-数据库的三大范式">7. 数据库的三大范式</h4>
<ul>
<li>第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</li>
<li>第二范式（2NF）：满足 1NF
后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</li>
<li>第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</li>
</ul>
<h4 id="8-springboot接口开发的常用注解有哪些">8.
SpringBoot接口开发的常用注解有哪些</h4>
<ul>
<li>@Controller标记此类是一个控制器，可以返回视图解析器指定的html页面，通过@ResponseBody可以将结果返回Json.
xml数据。</li>
<li>@RestController相当于@ResponseBody加@Controller，实现rest接口开发，返回ison数据，不能返回html页面。</li>
<li>@RequestMapping定义接口地址，可以标记在类上也可以标记在方法上，支持http的post、put、get等方法。</li>
<li>@PostMapping定义post接口，只能标记在方法上，用于添加记录，复杂条件的查询接口。</li>
<li>@GetMapping定义get接口，只能标记在方法上，用于查询接口的定义。</li>
<li>@PutMapping定义put接口，只能标记在方法上，用于修改接口的定义。</li>
<li>@DeleteMapping定义delete接口，只能标记在方法上，用于删除接口的定义。</li>
<li>@RequestBody定义在方法上，用于将json串转成java对象。</li>
<li>@Pathvarible接收请求路径中占位符的值.</li>
<li>@ApiOperation swagger注解，对接口方法进行说明。</li>
<li>@Api wagger注解，对接口类进行说明。</li>
<li>@Autowired基于类型注入。</li>
<li>@Resourc基于名称注入，如果基于名称注入失败转为基于类型注入。</li>
</ul>
<h4 id="9-项目开发流程是什么">9. 项目开发流程是什么</h4>
<p>1、产品人员设计产品原型。</p>
<p>2、讨论需求。</p>
<p>3、分模块设计接口。</p>
<p>4、出接口文档。</p>
<p>5、将接口文档给到前端人员，前后端分离开发。</p>
<p>6、开发完毕进行测试。</p>
<p>7、测试完毕发布项目，由运维人员进行部署安装。</p>
<h4 id="10-mybatis分页插件的原理">10. MyBatis分页插件的原理</h4>
<ul>
<li>首先分页参数放到ThreadLocal中，拦截执行的sql，根据数据库类型添加对应的分页语句重写sql，例如:
(select* from table where a)转换为(select count(*) from table where
a)和(select * from table where a limit,)</li>
<li>计算出了total总条数、pageNum当前第几页、pageSize每页大小和当前页的数据，是否为首页，是否为尾页，总页数等。</li>
</ul>
<h4 id="11-树型表的标记字段是什么如何查询mysql的树型表">11.
树型表的标记字段是什么？如何查询MySQl的树型表</h4>
<p>标记字段就是<code>parentid</code>，即父节点</p>
<ul>
<li>当层级固定可以用数据库的自连接的方式</li>
<li>如果想要灵活查询可以使用MySQL的递归的方式（使用with表达式，里面的recusive关键字可以使用关键字的方式）</li>
</ul>
<h4 id="12-mybatis的resulttype和resultmap的区别">12.
MyBatis的ResultType和ResultMap的区别</h4>
<p>ResultType:指定映射类型，只要查询的字段名和类型的属性名匹配可以自动映射。</p>
<p>ResultMap:自定义映射规则，当查询的字段名和映射类型的属性不匹配时可以通过ResultMap自定义映射规则,也可以实现一对多、一对一映射。</p>
<h4 id="13-mybatis中的和有什么区别">13.
MyBatis中的#{}和${}有什么区别</h4>
<p>#{}是标记一个占位符，可以防止sql注入。
${}用于在动态sql中拼接字符串，可能导致s.ql注入。</p>
<h4 id="14-系统如何处理自定义异常">14. 系统如何处理自定义异常</h4>
<p>我们自定义一个统一的异常处理器去捕获并处理异常。</p>
<p>使用控制器增加注解@ControllerAdvice和异常处理注解@ExceptionHandler来实现。</p>
<p>1)处理自定义异常</p>
<ul>
<li>程序在编写代码时根据校验结果主动抛出自定义异常类对象，抛出异常时指定详细的异常信息，异常处理器捕获异常信息记录异常日志并响应给用户。</li>
</ul>
<p>2)处理未知异常</p>
<ul>
<li>接口执行过程中的一些运行时异常也会由异常处理器统一捕获，记录异常日志，统一响应给用户500错误。在异常处理器中还可以针对某个异常类型进行单独处理。</li>
</ul>
<h4 id="15-请求参数合法性该如何校验">15. 请求参数合法性该如何校验</h4>
<p>使用基于ISR303的校验框架实现，SpringBoot提供了ISR-303的支持，它就是spring-boot-starter-validation，它包括了很多校验规则，只需要在模型类中通过注解指定校验规则，在controller方法上开启校验</p>
<h4 id="16-spring事务什么时候会失效">16. Spring事务什么时候会失效</h4>
<p>1）在方法中捕获异常没有抛出去</p>
<p>2）非事务方法调用事务方法</p>
<p>3）事务方法内部调用事务方法</p>
<p>4）@Transactional标记的方法不是public</p>
<p>5）抛出的异常与rollbackFor指定的异常不匹配，默认rollbackFor指定的异常为RuntimeException</p>
<p>6）数据库表不支持事务，比如MySQL的MyISAM</p>
<p>7)Spring的传播行为导致事务失效，比如:PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED</p>
<h4 id="17-断点续传是怎么做的">17. 断点续传是怎么做的</h4>
<p>我们是基于分块上传的模式实现断点续传的需求，当文件上传一部分断网后前边已经上传过的不再上传。</p>
<p>1）前端对文件分块。</p>
<p>2）前端使用多线程一块一块上传，上传前给服务端发一个消息校验该分块是否上传，如果已上传则不再上传。</p>
<p>3）等所有分块上传完毕，服务端合并所有分块，校验文件的完整性。</p>
<p>因为分块全部上传到了服务器，服务器将所有分块按顺序进行合并，就是写每个分块文件内容按顺序依次写入一个文件中。使用字节流去读写文件。</p>
<p>4）前端给服务传了一个md5值，服务端合并文件后计算合并后文件的md5是否和前端传的一样，如果一样则说文件完整，如果不一样说明可能由于网络丢包导致文件不完整，这时上传失败需要重新上传。</p>
<h4 id="18-分块文件清理问题">18. 分块文件清理问题</h4>
<p>上传一个文件进行分块上传，上传一半不传了，之前上传到minio的分块文件要清理吗?怎么做的?</p>
<p>1、在数据库中有一张文件表记录minio中存储的文件信息。</p>
<p>2、文件开始上传时会写入文件表，状态为上传中，上传完成会更新状态为上传完成。</p>
<p>3、当一个文件传了一半不再上传了说明该文件没有上传完成，会有定时任务去查询文件表中的记录，如果文件未上传完成则删除minio中没有上传成功的文件目录。</p>
<h5 id="19-xxl-job的工作原理是什么">19 XXL-job的工作原理是什么？</h5>
<p>XXL-JOB分布式任务调度服务由调用中心和执行器组成，调用中心负责按任务调度策略向执行器下发任务，执行器负责接收任务执行任务。</p>
<p>1）首先部署并启动xxl-job调度中心。(一个java工程)</p>
<p>2）首先在微服务添加xxl-job依赖，在微服务中配置执行器</p>
<p>3）启动微服务，执行器向调度中心上报自己。</p>
<p>4）在微服务中写一个任务方法并用xxl-job的注解去标记执行任务的方法名称。</p>
<p>5)在调度中心配置任务调度策略，调度策略就是每隔多长时间执行还是在每天或每月的固定时间去执行，比如每天0点执行，或每隔1小时执行一次等。</p>
<p>6)在调度中心启动任务。</p>
<p>7）调度中心根据任务调度策略，到达时间就开始下发任务给执行器。</p>
<p>8)执行器收到任务就开始执行任务。</p>
<h5 id="如何保证任务不重复执行">如何保证任务不重复执行</h5>
<p>1)调度中心按分片广播的方式去下发任务</p>
<p>2)执行器收到作业分片广播的参数:分片总数和分片序号，计算任务id
除以分片总数得到一个余数，如果余数等于分片序号这时就去执行这全任务，这里保证了不同的执行器执行不同的任务。</p>
<p>3）配置调度过期策略为“忽略”，避免同一个执行器多次重复执行同一个任务</p>
<p>4）配置任务阻塞处理策略为“丢弃后续调度”，注意:丢弃也没事下一次调度就又可以执行了</p>
<p>5）另外还要保证任务处理的幂等性，执行过的任务可以打一个状态标记已完成，下次再调度执行该任务判断该任务已完成就不再执行</p>
<h5 id="如何保证任务的幂等性">如何保证任务的幂等性</h5>
<p>1）数据库约束，比如:唯一索引，主键。同一个主键不可能两次都插入成功。</p>
<p>2）乐观锁，常用于数据库，更新数据时根据乐观锁状态去更新。</p>
<p>3）唯一序列号，请求前生成唯一的序列号，携带序列号去请求，执行时在redis记录该序列号表示以该序列号的请求执行过了，如果相同的序列号再次来执行说明是重复执行。</p>
<p>这里我们在数据库视频处理表中添加处理状态字段，视频处理完成更新状态为完成，执行视频处理前判断状态是否完成，如果完成则不再处理。</p>
<h1 id="二-内容管理模块">二 .内容管理模块</h1>
<h2 id="1-课程查询">1. 课程查询</h2>
<p>接口请求示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST /content/course/list?pageNo=<span class="number">2</span>&amp;pageSize=<span class="number">1</span></span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;auditStatus&quot;</span>: <span class="string">&quot;202002&quot;</span>,</span><br><span class="line">  <span class="string">&quot;courseName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;publishStatus&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">###成功响应结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">26</span>,</span><br><span class="line">      <span class="string">&quot;companyId&quot;</span>: <span class="number">1232141425</span>,</span><br><span class="line">      <span class="string">&quot;companyName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spring cloud实战&quot;</span>,</span><br><span class="line">      <span class="string">&quot;users&quot;</span>: <span class="string">&quot;所有人&quot;</span>,</span><br><span class="line">      <span class="string">&quot;tags&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;mt&quot;</span>: <span class="string">&quot;1-3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mtName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;st&quot;</span>: <span class="string">&quot;1-3-2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;stName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;200003&quot;</span>,</span><br><span class="line">      <span class="string">&quot;teachmode&quot;</span>: <span class="string">&quot;201001&quot;</span>,</span><br><span class="line">      <span class="string">&quot;description&quot;</span>: <span class="string">&quot;本课程主要从四个章节进行讲解： 1.微服务架构入门 2.spring cloud 基础入门 3.实战Spring Boot 4.注册中心eureka。&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pic&quot;</span>: <span class="string">&quot;https://cdn.educba.com/academy/wp-content/uploads/2018/08/Spring-BOOT-Interview-questions.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;createDate&quot;</span>: <span class="string">&quot;2019-09-04 09:56:19&quot;</span>,</span><br><span class="line">      <span class="string">&quot;changeDate&quot;</span>: <span class="string">&quot;2021-12-26 22:10:38&quot;</span>,</span><br><span class="line">      <span class="string">&quot;createPeople&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;changePeople&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;auditStatus&quot;</span>: <span class="string">&quot;202002&quot;</span>,</span><br><span class="line">      <span class="string">&quot;auditMind&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;auditNums&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;auditDate&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;auditPeople&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;coursePubId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;coursePubDate&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;counts&quot;</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="string">&quot;page&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;pageSize&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol type="1">
<li><p>由请求路径可知:前端在路径传递分页<code>VO</code>,以及条件查询的<code>VO</code>,因为分页的功能很多业务都要用,那么我们可不可以抽取到更高的模块里面去呢?答案当然可用,这里就抽取到了base里面了</p></li>
<li><p>第二步就要定义DTO(注意:
前端传参DTO,返回前端VO);因为这里的DTO是特有的,所以不用定义在base中在model中定义即可</p></li>
<li><p>然后就可以在api中定义查询的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(value = &quot;课程信息编辑接口&quot;,tags = &quot;课程信息编辑接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseBaseInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询课程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询课程&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/course/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;CourseBase&gt; <span class="title function_">queryCourseBaseInfo</span><span class="params">(PageParams pageParams, <span class="meta">@RequestBody</span> (required=<span class="literal">false</span>)</span> QueryCourseParamsDto queryCourseParamsDto) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>mapping是自动生成的</p></li>
</ol>
<h3 id="解决跨域问题">解决跨域问题</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 解决跨域1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/8/12 11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//允许白名单域名进行跨域调用</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//允许跨越发送cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//放行全部原始头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//允许所有请求方法跨域调用</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="递归查询数据库">递归查询数据库</h3>
<p><img src="https://bu.dusays.com/2025/08/06/6892f3318e4f4.png" alt="image-20250806141600174"></p>
<p>树形结构的MySQL改怎么查询结果呢？</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1-2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isLeaf&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isShow&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;移动开发&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;移动开发&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orderby&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;childrenTreeNodes&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;childrenTreeNodes&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1-2-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;isLeaf&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;isShow&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;label&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;微信开发&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;微信开发&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;orderby&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;parentid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1-2&quot;</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果树的层级不确定，此时可以使用MySQL递归实现，使用with语法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WITH [RECURSIVE]</span><br><span class="line">    cte_name [(col_name [, col_name] ...)] AS (subquery)</span><br><span class="line">    [, cte_name [(col_name [, col_name] ...)] AS (subquery)] ...</span><br></pre></td></tr></table></figure>

<p>cte_name
:公共表达式的名称,可以理解为表名,用来表示as后面跟着的子查询</p>
<p>col_name :公共表达式包含的列名,可以写也可以不写</p>
<p>下边是一个递归的简单例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">with RECURSIVE t1  <span class="title function_">AS</span></span><br><span class="line"><span class="params">(</span></span><br><span class="line"><span class="params">  SELECT <span class="number">1</span> as n</span></span><br><span class="line"><span class="params">  UNION ALL</span></span><br><span class="line"><span class="params">  SELECT n + <span class="number">1</span> FROM t1 WHERE n &lt; <span class="number">5</span></span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">SELECT * FROM t1;</span><br></pre></td></tr></table></figure>

<p>在 SQL 中，UNION ALL 操作用于结合两个或更多 SELECT
语句的结果集，包括所有匹配的行，甚至包括重复的行。这与 UNION 不同，因为
UNION 会自动删除重复的行。</p>
<p>满足条件：</p>
<p>1、两个select查询的列的数量必须相同。</p>
<p>2、每个列的数据类型需要相似。</p>
<p>下边我们使用递归实现课程分类的查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">with recursive t1 <span class="title function_">as</span> <span class="params">(</span></span><br><span class="line"><span class="params">select * from  course_category p where  id= <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line"><span class="params">union all</span></span><br><span class="line"><span class="params"> select t.* from course_category t inner join t1 on t1.id = t.parentid</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">select *  from t1 order by t1.id</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/08/06/6892faa45a0f6.png" alt="image-20250806144803080"></p>
<p>那么我们在Java的SQL中改怎么写呢</p>
<h2 id="课程添加">课程添加</h2>
<h3 id="全局异常处理器">全局异常处理器</h3>
<p>全局异常处理器</p>
<p>​ 从 Spring 3.0 - Spring 3.2 版本之间，对 Spring 架构和 SpringMVC
的Controller 的异常捕获提供了相应的异常处理。</p>
<ul>
<li>@ExceptionHandler</li>
<li>Spring3.0提供的标识在方法上或类上的注解，用来表明方法的处理异常类型。</li>
<li>@ControllerAdvice</li>
<li>Spring3.2提供的新注解，从名字上可以看出大体意思是控制器增强，
在项目中来增强SpringMVC中的Controller。通常和**<code>@ExceptionHandler</code>**
结合使用，来处理SpringMVC的异常信息。</li>
<li>@ResponseStatus</li>
<li>Spring3.0提供的标识在方法上或类上的注解，用状态代码和应返回的原因标记方法或异常类。
调用处理程序方法时，状态代码将应用于HTTP响应。</li>
</ul>
<h3 id="jsr303">JSR303</h3>
<p><img src="https://bu.dusays.com/2025/08/07/68943dd4b42a9.png" alt="image-20250807134656451"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -e MINIO_ROOT_USER=minioadmin \</span><br><span class="line">  -e MINIO_ROOT_PASSWORD=minioadmin \</span><br><span class="line">  -v minio-data:/data \</span><br><span class="line">  --name minio \</span><br><span class="line">  --hostname minio \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --network hm-net \</span><br><span class="line">  -d \</span><br><span class="line">  minio/minio:RELEASE.2023-05-04T21-44-30Z server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis黑马版</title>
    <url>/posts/11096/</url>
    <content><![CDATA[<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/lyay23/hmdp">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://bu.dusays.com/2025/03/20/67dc235380f8f.gif)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Redis实战</div>
            <div class="tag-link-sitename">GitHub</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<h1 id="一redis安装">一、Redis安装</h1>
<h2 id="1-指定配置启动">1. 指定配置启动</h2>
<p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p>
<p><img src="https://bu.dusays.com/2025/09/08/68be43004b3bf.png" alt="image-20211211082225509"></p>
<p>我们先将这个配置文件备份一份：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure>

<p>然后修改redis.conf文件中的一些配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure>

<p>Redis的其它常见配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure>

<p>启动Redis：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p>停止服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123321 shutdown</span><br></pre></td></tr></table></figure>

<h3 id="133开机自启">1.3.3.开机自启</h3>
<p>我们也可以通过配置来实现开机自启。</p>
<p>首先，新建一个系统服务文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>然后重载系统服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>现在，我们可以用下面这组命令来操作redis了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure>

<p>执行下面的命令，可以让redis开机自启：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure>

<h2 id="2redis客户端">2.Redis客户端</h2>
<p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p>
<ul>
<li>命令行客户端</li>
<li>图形化桌面客户端</li>
<li>编程客户端</li>
</ul>
<h3 id="21-redis命令行客户端">2.1 Redis命令行客户端</h3>
<p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure>

<p>其中常见的options有：</p>
<ul>
<li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li>
<li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li>
<li><code>-a 123321</code>：指定redis的访问密码</li>
</ul>
<p>其中的commonds就是Redis的操作命令，例如：</p>
<ul>
<li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li>
</ul>
<p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p>
<p><img src="https://bu.dusays.com/2025/09/08/68be433e7c3d2.png" alt="image-20211211110439353"></p>
<h3 id="22-通用命令">2.2 通用命令</h3>
<p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p>
<ul>
<li>KEYS：查看符合模板的所有key</li>
<li>DEL：删除一个指定的key</li>
<li>EXISTS：判断key是否存在</li>
<li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li>
<li>TTL：查看一个KEY的剩余有效期</li>
</ul>
<p>通过help [command] 可以查看一个命令的具体用法，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看keys命令的帮助信息：</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> keys</span><br><span class="line"></span><br><span class="line">KEYS pattern</span><br><span class="line">summary: Find all keys matching the given pattern</span><br><span class="line">since: 1.0.0</span><br><span class="line">group: generic</span><br></pre></td></tr></table></figure>

<h3 id="23-string类型">2.3 String类型</h3>
<p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p>
<p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p>
<ul>
<li>string：普通字符串</li>
<li>int：整数类型，可以做自增、自减操作</li>
<li>float：浮点类型，可以做自增、自减操作</li>
</ul>
<p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p>
<h4 id="221string的常见命令">2.2.1.String的常见命令</h4>
<p>String的常见命令有：</p>
<ul>
<li>SET：添加或者修改已经存在的一个String类型的键值对</li>
<li>GET：根据key获取String类型的value</li>
<li>MSET：批量添加多个String类型的键值对</li>
<li>MGET：根据多个key获取多个String类型的value</li>
<li>INCR：让一个整型的key自增1</li>
<li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2
让num值自增2</li>
<li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li>
<li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li>
<li>SETEX：添加一个String类型的键值对，并且指定有效期</li>
</ul>
<h4 id="222-key类型">2.2.2 Key类型</h4>
<p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p>
<p>例如，需要存储用户、商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p>
<p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p>
<p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目名:业务名:类型:id</span><br></pre></td></tr></table></figure>

<p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。这样以来，我们就可以把不同类型的数据区分开了。从而避免了key的冲突问题。</p>
<p>例如我们的项目名称叫
heima，有user和product两种不同类型的数据，我们可以这样定义key：</p>
<ul>
<li>user相关的key：<strong>heima:user:1</strong></li>
<li>product相关的key：<strong>heima:product:1</strong></li>
</ul>
<p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p>
<table>
<thead>
<tr>
<th><strong>KEY</strong></th>
<th><strong>VALUE</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>heima:user:1</td>
<td>{“id”:1, “name”: “Jack”, “age”: 21}</td>
</tr>
<tr>
<td>heima:product:1</td>
<td>{“id”:1, “name”: “小米11”, “price”: 4999}</td>
</tr>
</tbody>
</table>
<p>并且，在Redis的桌面客户端中，还会以相同前缀作为层级结构，让数据看起来层次分明，关系清晰：</p>
<h3 id="24-hash类型">2.4 Hash类型</h3>
<p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p>
<p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便（要删除更新插入）：</p>
<p><img src="https://bu.dusays.com/2025/09/08/68be76700423d.png" alt="image-20250908142343793"></p>
<p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p>
<p><img src="https://bu.dusays.com/2025/09/08/68be76834bf5a.png" alt="image-20250908142403217"></p>
<p>Hash的常见命令有：</p>
<ul>
<li>HSET key field value：添加或者修改hash类型key的field的值</li>
<li>HGET key field：获取一个hash类型key的field的值</li>
<li>HMSET：批量添加多个hash类型key的field的值</li>
<li>HMGET：批量获取多个hash类型key的field的值</li>
<li>HGETALL：获取一个hash类型的key中的所有的field和value</li>
<li>HKEYS：获取一个hash类型的key中的所有的field</li>
<li>HINCRBY:让一个hash类型key的字段值自增并指定步长</li>
<li>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</li>
</ul>
<p>eg：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; Hset heima:user:<span class="number">2</span> name Rose</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; Hset heima:user:<span class="number">2</span> age <span class="number">18</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/09/08/68be77b487aee.png" alt="image-20250908142908672"></p>
<p>eg2:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">3</span> name LiLei age <span class="number">20</span> sex <span class="built_in">man</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; HMGET heima:user:<span class="number">3</span> name age sex</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="25list类型">2.5.List类型</h3>
<p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。(评论，点赞)</p>
<p>特征也与LinkedList类似：</p>
<ul>
<li>有序</li>
<li>元素可以重复</li>
<li>插入和删除快</li>
<li>查询速度一般</li>
</ul>
<p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p>
<p>List的常见命令有：</p>
<ul>
<li>LPUSH key element … ：向列表左侧插入一个或多个元素</li>
<li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li>
<li>RPUSH key element … ：向列表右侧插入一个或多个元素</li>
<li>RPOP key：移除并返回列表右侧的第一个元素</li>
<li>LRANGE key star end：返回一段角标范围内的所有元素</li>
<li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li>
</ul>
<h3 id="26set类型">2.6.Set类型</h3>
<p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p>
<ul>
<li>无序</li>
<li>元素不可重复</li>
<li>查找快</li>
<li>支持交集、并集、差集等功能</li>
</ul>
<p>Set的常见命令有：</p>
<ul>
<li>SADD key member … ：向set中添加一个或多个元素</li>
<li>SREM key member … : 移除set中的指定元素</li>
<li>SCARD key： 返回set中元素的个数</li>
<li>SISMEMBER key member：判断一个元素是否存在于set中</li>
<li>SMEMBERS：获取set中的所有元素</li>
<li>SINTER key1 key2 … ：求key1与key2的交集</li>
</ul>
<p>例如两个集合：s1和s2:</p>
<p>求交集：SINTER s1 s2</p>
<p>求s1与s2的不同：SDIFF s1 s2</p>
<p>练习：</p>
<ol type="1">
<li>将下列数据用Redis的Set集合来存储：</li>
</ol>
<ul>
<li>张三的好友有：李四、王五、赵六</li>
<li>李四的好友有：王五、麻子、二狗</li>
</ul>
<ol type="1">
<li>利用Set的命令实现下列功能：</li>
</ol>
<ul>
<li>计算张三的好友有几人</li>
<li>计算张三和李四有哪些共同好友</li>
<li>查询哪些人是张三的好友却不是李四的好友</li>
<li>查询张三和李四的好友总共有哪些人</li>
<li>判断李四是否是张三的好友</li>
<li>判断张三是否是李四的好友</li>
<li>将李四从张三的好友列表中移除</li>
</ul>
<h3 id="27sortedset类型">2.7.SortedSet类型</h3>
<p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加
hash表。</p>
<p>SortedSet具备下列特性：</p>
<ul>
<li>可排序</li>
<li>元素不重复</li>
<li>查询速度快</li>
</ul>
<p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p>
<p>SortedSet的常见命令有：</p>
<ul>
<li>ZADD key score member：添加一个或多个元素到sorted set
，如果已经存在则更新其score值</li>
<li>ZREM key member：删除sorted set中的一个指定元素</li>
<li>ZSCORE key member : 获取sorted set中的指定元素的score值</li>
<li>ZRANK key member：获取sorted set 中的指定元素的排名</li>
<li>ZCARD key：获取sorted set中的元素个数</li>
<li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li>
<li>ZINCRBY key increment member：让sorted
set中的指定元素自增，步长为指定的increment值</li>
<li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li>
<li>ZRANGEBYSCORE key min
max：按照score排序后，获取指定score范围内的元素</li>
<li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li>
</ul>
<p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p>
<ul>
<li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key
member</li>
<li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key
memeber</li>
</ul>
<p>练习题：</p>
<p>将班级的下列学生得分存入Redis的SortedSet中：</p>
<p>Jack 85, Lucy 89, Rose 82, Tom 95, Jerry 78, Amy 92, Miles 76</p>
<p>并实现下列功能：</p>
<ul>
<li>删除Tom同学</li>
<li>获取Amy同学的分数</li>
<li>获取Rose同学的排名</li>
<li>查询80分以下有几个学生</li>
<li>给Amy同学加2分</li>
<li>查出成绩前3名的同学</li>
<li>查出成绩80分以下的所有同学</li>
</ul>
<h1 id="二-实战篇">二、 实战篇</h1>
<h2 id="1-短信登录">1. 短信登录</h2>
<p><img src="https://bu.dusays.com/2025/09/08/68be8c45365e1.png" alt="image-20250908155653058"></p>
<h3 id="11-缓存">1.1 缓存</h3>
<h4 id="111-缓存更新策略">1.1.1 缓存更新策略</h4>
<p><img src="https://bu.dusays.com/2025/09/09/68bfcb1fccc33.png" alt="image-20250909143718999"></p>
<p><img src="https://bu.dusays.com/2025/09/09/68bfd0f7e02e2.png" alt="image-20250909150215174"></p>
<h4 id="112-缓存穿透">1.1.2 缓存穿透</h4>
<p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p>
<p>常见解决方式：</p>
<ul>
<li>缓存空对象（将空数据缓存起来）
<ul>
<li>优点： 实现简单，维护方便</li>
<li>缺点：
<ol type="1">
<li>造成额外消耗（可以设置很短的有效期，这样不会带来特别大的内存消耗，短期的垃圾数据能识别）</li>
<li>可能造成短期的不一致</li>
</ol></li>
</ul></li>
<li>布隆过滤（在客户端与Redis中间插入布隆过滤器，当请求传入时，先去请求布隆过滤器，当不存在时直接拒绝，存在时才会去Redis中查询）
<ul>
<li>优点：内存占用少，没有多余Key</li>
<li>缺点：实现复杂，存在误判</li>
</ul></li>
</ul>
<h4 id="113-缓存雪崩">1.1.3 缓存雪崩</h4>
<p><strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p>
<p>解决方法：</p>
<ul>
<li>给不同的Key的TTL添加随机值</li>
<li>利用Redis集群提高服务的可用性</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存</li>
</ul>
<h4 id="114-缓存击穿">1.1.4 缓存击穿</h4>
<p><strong>缓存击穿问题</strong>也叫热点Key问题，就是一个被<strong>高并发访问</strong>并且<strong>缓存重建业务较复杂</strong>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<p><img src="https://bu.dusays.com/2025/09/10/68c0c5f22aaef.png" alt="image-20250910082729613"></p>
<p>常见解决方案：</p>
<ul>
<li>互斥锁</li>
<li>逻辑过期</li>
</ul>
<p><img src="https://bu.dusays.com/2025/09/10/68c0c786accb9.png" alt="image-20250910083413912"></p>
<h2 id="2-超卖问题">2. 超卖问题</h2>
<h3 id="21-悲观锁与乐观锁">2.1 悲观锁与乐观锁</h3>
<p><strong>悲观锁</strong>：认为线程安全问题一定会发生，因此在<strong>操作数据之前</strong>先获取锁，确保线程串行执行。</p>
<p><strong>乐观锁</strong>：认为线程安全问题不一定会发生，因此不加锁，只是在<strong>更新数据时</strong>去判断有没有其它线程对数据做了修改。</p>
<ul>
<li>如果没有修改则认为是安全的，自己才更新数据。</li>
<li>如果已经被其它线程修改说明发生了安全问题，此时可以重试或异常。</li>
</ul>
<h4 id="211-乐观锁">2.1.1 乐观锁</h4>
<p>版本号法：</p>
<p><img src="https://bu.dusays.com/2025/09/10/68c1326b9654d.png" alt="image-20250910161019483"></p>
<p>当有多线程时第一个线程先查询版本号（1），假设来了第二个线程也在这时查询了版本号（1），线程1先扣减库存，并且将版本号<code>+1</code>，只有在版本号为与查询到的版本号一致时才执行，这时线程2更新时发现版本变成了2，就无法完成更新</p>
<p>CSA方法：</p>
<p><img src="https://bu.dusays.com/2025/09/10/68c133a959143.png" alt="image-20250910161536536"></p>
<p>与版本号法思路一致</p>
<h3 id="22-分布式锁">2.2 分布式锁</h3>
<p>分布式锁:满足分布式系统或集群模式下多进程可见并且互斥的锁。</p>
<p><img src="https://bu.dusays.com/2025/09/10/68c1510fe85ae.png" alt="image-20250910182103793"></p>
<table>
<thead>
<tr>
<th></th>
<th>MySQL</th>
<th>Redis</th>
<th>Zookeeper</th>
</tr>
</thead>
<tbody>
<tr>
<td>互斥</td>
<td>利用mysql本身的互斥锁机制</td>
<td>利用setnx这样的互斥命令</td>
<td>利用节点的唯一性和有序性实现互斥</td>
</tr>
<tr>
<td>高可用</td>
<td>好</td>
<td>好</td>
<td>好</td>
</tr>
<tr>
<td>高性能</td>
<td>一般</td>
<td>好</td>
<td>一般</td>
</tr>
<tr>
<td>安全性</td>
<td>利用节点的唯一性和有序性实现互斥</td>
<td>利用节点的唯一性和有序性实现互斥</td>
<td>临时节点，断开连接自动释放</td>
</tr>
</tbody>
</table>
<h4 id="基于redis的分布锁">基于Redis的分布锁</h4>
<p><img src="https://bu.dusays.com/2025/09/10/68c15f23b9d3b.png" alt="image-20250910192107928"></p>
<p>实现分布式锁时需要实现的两个基本方法:</p>
<ul>
<li><p>获取锁︰</p>
<ul>
<li><p>·互斥:确保只能有一个线程获取锁</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加锁，利用setnx的互斥特性,NX是互斥，EX是设置超时时间</span></span><br><span class="line"></span><br><span class="line">SETNX lock thread1 NX EX <span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
</ul></li>
<li><p>释放锁:</p>
<ul>
<li><p>·手动释放</p></li>
<li><p>·超时释放:获取锁时添加一个超时时间</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#释放锁，删除即可</span></span><br><span class="line"><span class="built_in">DEL</span> key</span><br></pre></td></tr></table></figure>
</li>
</ul></li>
</ul>
<p><img src="https://bu.dusays.com/2025/09/11/68c2670fca539.png" alt="image-20250911140702838"></p>
<h3 id="redisson">Redisson</h3>
<p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data
Grid)。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p>
<p><img src="https://bu.dusays.com/2025/09/11/68c26c7948980.png" alt="image-20250911143011837"></p>
<p><img src="https://bu.dusays.com/2025/09/11/68c29b28a94d0.png" alt="image-20250911174927148"></p>
<h4 id="redisson分布式锁解决主从一致的问题">Redisson分布式锁解决主从一致的问题</h4>
<p><img src="https://bu.dusays.com/2025/09/11/68c2ae8da4daf.png" alt="image-20250911191211918"></p>
<h4 id="面试题redisson的分布式锁为什么使用lua脚本实现而不是使用事务">面试题：Redisson的分布式锁为什么使用Lua脚本实现而不是使用事务？</h4>
<ol type="1">
<li><strong>原子性更强</strong>：Lua
脚本作为整体执行，中间不会被打断，确保复杂锁逻辑（如判断 +
操作）的原子性；事务是 “最终一致性”，可能被插入其他命令。</li>
<li><strong>支持复杂逻辑</strong>：可包含条件判断、循环等，满足锁的判断归属、续约等需求；事务仅能批量执行命令，无逻辑处理能力。</li>
<li><strong>减少网络交互</strong>：使用 Lua
脚本可以将多个命令打包成一个请求发送到 Redis，大幅减少客户端与 Redis
服务器之间的网络往返次数，提升性能；事务实现相同逻辑需更多网络通信。</li>
<li><strong>安全释放锁</strong>：释放锁时需要先判断锁是否属于当前线程，再执行删除操作。这个
“判断 - 删除” 的过程必须原子化，否则可能误删其他线程的锁。用 Lua
脚本可以轻松实现这一点，而事务难以保证这种条件操作的原子性。</li>
</ol>
<h2 id="3-优惠券秒杀">3. 优惠券秒杀</h2>
<h3 id="31-redis消息队列">3.1 Redis消息队列</h3>
<p>消息队列(Message
Queue)，字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色:</p>
<ul>
<li>消息队列:存储和管理消息，也被称为消息代理(Message Broker)</li>
<li>生产者:发送消息到消息队列</li>
<li>消费者:从消息队列获取消息并处理消息</li>
</ul>
<p>Redis提供了三种不同的方式来实现消息队列:</p>
<ul>
<li>list结构:基于List结构模拟消息队列</li>
<li>PubSub:基本的点对点消息模型</li>
<li>Stream:比较完善的消息队列模型</li>
</ul>
<h4 id="list结构的消息队列">List结构的消息队列</h4>
<p>队列是入口和出口不在一边，因此我们可以利用:LPUSH结合RPOP、或者RPUSH结合LPOP来实现。
不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用<code>BRPOP</code>或者<code>BLPOP</code>来实现阻塞效果。</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3b2f7334cc.png" alt="image-20250912134319176"></p>
<h4 id="pubsub结构的消息队列">PubSub结构的消息队列</h4>
<p>PubSub(发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p>
<ul>
<li>SUBSCRIBE channel [channel]:订阅一个或多个频道</li>
<li>PUBLISH channel msg :向一个频道发送消息</li>
<li>PSUBSCRIBE pattern[pattern]:订阅与pattern格式匹配的所有频道</li>
</ul>
<p><img src="https://bu.dusays.com/2025/09/12/68c3b5d5aa825.png" alt="image-20250912135533467"></p>
<h4 id="stream的消息队列">Stream的消息队列</h4>
<p>Stream是 Redis
5.0引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3ca349da94.png" alt="image-20250912152228092"></p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3cc017f3c9.png" alt="image-20250912153009050"></p>
<h4 id="stream消息队列-消费组">Stream消息队列-消费组</h4>
<p>消费者组(Consumer
Group)∶将多个消费者划分到一个组中，监听同一个队列。具备下列特点:</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3cdb71e5b6.png" alt="image-20250912153726196"></p>
<p>创建消费者组</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3ce51d26f9.png" alt="image-20250912154001113"></p>
<p>其他命令：</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3ce9802cdf.png" alt="image-20250912154111429"></p>
<p>从消费者组读取信息：</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3d095bbb6f.png" alt="image-20250912154941290"></p>
<p>总结</p>
<p><img src="https://bu.dusays.com/2025/09/12/68c3d536e00c2.png" alt="image-20250912160926414"></p>
<h2 id="4-feed流">4. Feed流</h2>
<p>Feed流产品有两种常见模式:</p>
<ul>
<li>Timeline:不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈
<ul>
<li>优点:信息全面，不会有缺失。并且实现也相对简单</li>
<li>缺点:信息噪音较多，用户不一定感兴趣，内容获取效率低</li>
</ul></li>
<li>智能排序:利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户
<ul>
<li>优点:投喂用户感兴趣信息，用户粘度很高，容易沉迷</li>
<li>缺点:如果算法不精准，可能起到反作用</li>
</ul></li>
</ul>
<h3 id="41-timeline模式">4.1 TimeLine模式</h3>
<p><img src="https://bu.dusays.com/2025/09/14/68c629fb42de8.png" alt="image-20250914103538493"></p>
<h2 id="5-geo数据结构">5. GEO数据结构</h2>
<p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有:</p>
<p><code>GEOADD</code>:添加一个地理空间信息，包含:经度（longitude)、纬度(latitude)、值(member)</p>
<p><code>GEODIST</code>:计算指定的两个点之间的距离并返回</p>
<p><code>GEOHASH</code>:将指定member的坐标转为hash字符串形式并返回</p>
<p><code>GEOPOS</code>:返回指定member的坐标</p>
<p><code>GEORADIUS</code>:指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.2以后已废弃</p>
<p><code>GEOSEARCH</code>:在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</p>
<p><code>GEOSEARCHSTORE</code>
:与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。6.2.新功能</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">GEOADD g1 <span class="number">116.378248</span> <span class="number">39.865275</span> bjn <span class="number">116.42803</span> <span class="number">39.903738</span> bjz <span class="number">116.322287</span> <span class="number">39.893729</span> bjx</span><br></pre></td></tr></table></figure>

<p><img src="https://bu.dusays.com/2025/09/14/68c671852e719.png" alt="image-20250914154053067"></p>
<h2 id="6-bitmap">6. BitMap</h2>
<p>把每一个bit位对应当月的每一天，形成了映射关系。用O和1标示业务状态，这种思路就称为位图(BitMap)</p>
<p>Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是2^32个bit位。</p>
<h4 id="bitmap用法">BitMap用法</h4>
<p>BitMap的操作命令有:</p>
<ul>
<li>SETBIT:向指定位置（offset)存入一个0或1</li>
<li>GETBIT:获取指定位置( offset)的bit值</li>
<li>BITCOUNT:统计BitMap中值为1的bit位的数量</li>
<li>BITFIELD:操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset)的值</li>
<li>BITFIELD_RO:获取BitMap中bit数组，并以十进制形式返回</li>
<li>BITOP∶将多个BitMap的结果做位运算(与、或、异或)</li>
<li>BITPOS:查找bit数组中指定范围内第一个0或1出现的位置</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java面试黑马版</title>
    <url>/posts/45509/</url>
    <content><![CDATA[<blockquote>
<p>求其上,得其中;求其中,得其下,求其下,必败</p>
<p><em>——《孙子兵法》</em></p>
</blockquote>
<h4 id="一-redis">一 、Redis</h4>
<h5 id="1-我看你在项目中使用了redis你最近在哪些场景中使用了redis呢">1.
我看你在项目中使用了Redis，你最近在哪些场景中使用了Redis呢？</h5>
<p>我在项目中使用Redis缓存医生排班、药品库存等热点数据，通过Redisson分布式锁解决挂号并发问题，确保号源分配的原子性操作。</p>
<h6 id="redis的缓存在项目中的使用">Redis的缓存在项目中的使用？</h6>
<ol type="1">
<li><p>医生排班信息缓存</p>
<p>将医生的排班表、可预约时间段、剩余号源数量等数据缓存到Redis中，设置合理的过期时间（如1小时）。当挂号员查询医生排班时，优先从Redis获取数据，避免频繁查询数据库，提升响应速度。</p></li>
<li><p>用户登录状态管理</p>
<p>使用Redis存储用户的JWT
Token和会话信息，设置Token过期时间与JWT保持一致。当用户访问需要认证的接口时，从Redis中验证Token有效性，实现快速的身份验证。</p></li>
<li><p>药品库存信息缓存</p>
<p>将常用药品的库存数量、价格、规格等信息缓存到Redis，挂号员和医生查询药品信息时直接从缓存获取，减少数据库压力。</p></li>
<li><p>患者挂号记录缓存</p>
<p>将当天的挂号记录、已预约号源等信息缓存到Redis，方便快速查询和更新挂号状态。</p></li>
</ol>
<h6 id="为什么使用redisson分布式锁">为什么使用Redisson分布式锁？</h6>
<ol type="1">
<li><p>挂号并发问题</p>
<p>当多个挂号员同时为同一医生同一时间段挂号时，可能出现超卖问题。比如某医生上午10点只有5个号源，但6个挂号员同时操作，可能导致6个患者都成功挂号，造成号源超卖。</p></li>
<li><p>分布式锁的必要性</p>
<p>使用Redisson分布式锁，在挂号操作前先获取锁，确保同一时间只有一个挂号员能操作该医生的号源，操作完成后释放锁，保证号源分配的原子性。</p></li>
</ol>
<h5 id="2-那么你是怎么解决缓存穿透的问题呢">2.
那么你是怎么解决缓存穿透的问题呢？</h5>
<p>嗯，我想一下。缓存穿透是指查询一个一定不存在的数据，由于存储层查不到数据因此不写入缓存，这将导致这个不存在的数据每次请求都要到
数据库去查询，可能导致 数据库
挂掉。这种情况大概率是遭到了攻击。解决方案的话一般有两种方式方案一呢是采用缓存空数据的方式，方案二就是采用布隆过滤器，我们通常都会用布隆过滤器来解决它。</p>
<h5 id="3-你能介绍一下布隆过滤器吗">3. 你能介绍一下布隆过滤器吗？</h5>
<p>嗯，是这样的。布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是Redisson实现的布隆过滤器。它的底层原理是，先初始化一个比较大的数组，里面存放的是二进制0或1。一开始都是0，当一个key来了之后，经过3次hash计算，模数组长度找到数据的下标，然后把数组中原来的0改为1。这样，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。当然，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过5%。其实这个误判是必然存在的，要不就得增加数组的长度。5%以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。</p>
<h5 id="4-什么是缓存击穿怎么解决">4. 什么是缓存击穿？怎么解决</h5>
<p>嗯！缓存击穿的意思是，对于设置了过期时间的key，缓存在某个时间点过期的时候，恰好这个时间点对这个Key有大量的并发请求过来。这些请求发现缓存过期，一般都会从后端
DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。</p>
<p>解决方案有两种方式：第一，可以使用互斥锁：当缓存失效时，不立即去load
db，先使用如 Redis 的 <code>SETNX</code>
去设置一个互斥锁。当操作成功返回时，再进行 load
db的操作并回设缓存，否则重试get缓存的方法。第二种方案是设置当前key逻辑过期，大概思路如下：</p>
<ol type="1">
<li>在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间；</li>
<li>当查询的时候，从redis取出数据后判断时间是否过期；</li>
<li>如果过期，则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据可能不是最新的。</li>
</ol>
<p>两种方案各有利弊：</p>
<p>如果选择数据的强一致性，建议使用分布式锁的方案，但性能上可能没那么高，且有可能产生死锁的问题。</p>
<p>如果选择key的逻辑删除，则优先考虑高可用性，性能比较高，但数据同步这块做不到强一致。</p>
<h5 id="5-什么是缓存雪崩怎么解决">5. 什么是缓存雪崩，怎么解决？</h5>
<p>嗯！缓存雪崩意思是，设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重而雪崩。与缓存击穿的区别是：雪崩是很多key，而击穿是某一个key缓存。解决方案主要是，可以将缓存失效时间分散开。比如，可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机。这样，每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h5 id="6-redis作为缓存mysql与redis数据如何进行同步呢双写一致">6.
Redis作为缓存，Mysql与Redis数据如何进行同步呢（双写一致）</h5>
<p>我们当时是将医生排班信息，用户的一些信息缓存到数据库，这些数据实时要求性并没有这么高，所以我们当时采用的是异步的方案同步数据
我们当时采用的阿里的canal组件实现数据同步:不需要更改业务代码，部署一个canal服务。canal服务把自己伪装成mysql的一个从节点，当mysql数据更新以后，canal会读取binlog数据，然后在通过canal的客户端获取到数据，更新缓存即可。</p>
<h5 id="7-redis作为缓存数据持久化是怎么做的">7.
Redis作为缓存，数据持久化是怎么做的</h5>
<p>在Redis中提供了两种数据持久化的方式：1) RDB；2) AOF。</p>
<h5 id="8-这两种持久化方式有什么区别呢">8.
这两种持久化方式有什么区别呢？</h5>
<p>RDB是一个快照文件。它是把redis内存存储的数据写到磁盘上。当redis实例宕机恢复数据的时候，可以从RDB的快照文件中恢复数据。AOF的含义是追加文件。当redis执行写命令的时候，都会存储到这个文件中。当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据。</p>
<h5 id="9-这两种方式哪种恢复的比较快呢">9.
这两种方式，哪种恢复的比较快呢？</h5>
<p>RDB因为是二进制文件，保存时体积也比较小，所以它恢复得比较快。但它有可能会丢数据。我们通常在项目中也会使用AOF来恢复数据。虽然AOF恢复的速度慢一些，但它丢数据的风险要小很多。在AOF文件中可以设置刷盘策略。我们当时设置的就是每秒批量写入一次命令</p>
<h5 id="10-redis的过期策略有哪些">10. Redis的过期策略有哪些</h5>
<p>嗯~，在redis中提供了两种数据过期删除策略。第一种是惰性删除。在设置该key过期时间后，我们不去管它。当需要该key时，我们检查其是否过期。如果过期，我们就删掉它；反之，返回该key。第二种是定期删除。就是说，每隔一段时间，我们就对一些key进行检查，并删除里面过期的key。定期清理的两种模式是：1)
SLOW模式，是定时任务，执行频率默认为10hz，每次不超过25ms，可以通过修改配置文件redis.conf的hz选项来调整这个次数；2)
FAST模式，执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms。Redis的过期删除策略是：惰性删除
+ 定期删除两种策略配合使用。</p>
<h5 id="11-数据淘汰策略有哪些">11. 数据淘汰策略有哪些</h5>
<p>嗯，这个在redis中提供了很多种，默认是noeviction，不删除任何数据，内部不足时直接报错。这个可以在redis的配置文件中进行设置。里面有两个非常重要的概念：一个是LRU，另外一个是LFU。LRU的意思就是最少最近使用。它会用当前时间减去最后一次访问时间。这个值越大，则淘汰优先级越高。LFU的意思是最少频率使用。它会统计每个key的访问频率。值越小，淘汰优先级越高。我们在项目中设置的是allkeys-lru，它会挑选最近最少使用的数据进行淘汰，把一些经常访问的key留在redis中。</p>
<h5 id="12-数据库有1000万数据redis只能缓存20w数据如何保证redis中的数据都是热点数据">12.
数据库有1000万数据，Redis只能缓存20w数据。如何保证Redis中的数据都是热点数据？</h5>
<p>嗯，我想一下()。可以使用allkeys-lru（挑选最近最少使用的数据淘汰）淘汰策略。那留下来的都是经常访问的热点数据。</p>
<h5 id="13-redis的内存用完了会发生什么">13.
Redis的内存用完了会发生什么？</h5>
<p>嗯~，这个要看redis的数据淘汰策略是什么。如果是默认的配置，redis内存用完以后则直接报错。我们当时设置的是allkeys-lru策略，把最近最常访问的数据留在缓存中。</p>
<h5 id="14-redis的分布式锁是如何实现的呢">14.
Redis的分布式锁是如何实现的呢</h5>
<p>我们当时使用的是Redisson来实现分布式锁。在挂号业务中，当多个挂号员同时为同一医生同一时间段挂号时，可能会出现号源超卖的问题。底层使用的是setnx和lua脚本来保证原子性</p>
<h5 id="15-redis实现分布式锁如何合理控制锁的时长">15.
Redis实现分布式锁如何合理控制锁的时长</h5>
<p>嗯，的确。redis的<code>SETNX</code>指令不好控制这个问题。我们当时采用的是redis的一个框架Redisson实现的。在Redisson中需要手动加锁，并且可以控制锁的失效时间和等待时间。当锁住的一个业务还没有执行完成的时候，Redisson会引入一个看门狗机制。就是说，每隔一段时间就检查当前业务是否还持有锁。如果持有，就增加加锁的持有时间。当业务执行完成之后，需要使用释放锁就可以了。还有一个好处就是，在高并发下，一个业务有可能会执行很快。客户1持有锁的时候，客户2来了以后并不会马上被拒绝。它会自旋不断尝试获取锁。如果客户1释放之后，客户2就可以马上持有锁，性能也得到了提升。</p>
<h5 id="16-redisson实现分布式锁是可重用的吗">16.
Redisson实现分布式锁是可重用的吗</h5>
<p>嗯，是可以重入的。这样做是为了避免死锁的产生。这个重入其实在内部就是判断是否是当前线程持有的锁，如果是当前线程持有的锁就会计数，如果释放锁就会在计数上减一。在存储数据的时候采用的hash结构，大key可以按照自己的业务进行定制，其中小key是当前线程的唯一标识，value是当前线程重入的次数。</p>
<h5 id="17-redisson可以解决主从一致的问题吗">17.
Redisson可以解决主从一致的问题吗</h5>
<p>这个是不能的。比如，当线程1加锁成功后，master节点数据会异步复制到slave节点，此时如果当前持有Redis锁的master节点宕机，slave节点被提升为新的master节点，假如现在来了一个线程2，再次加锁，会在新的master节点上加锁成功，这个时候就会出现两个节点同时持有一把锁的问题。我们可以利用Redisson提供的红锁来解决这个问题，它的主要作用是，不能只在一个Redis实例上创建锁，应该是在多个Redis实例上创建锁，并且要求在大多数Redis节点上都成功创建锁，红锁中要求是Redis的节点数量要过半。这样就能避免线程1加锁成功后master节点宕机导致线程2成功加锁到新的master节点上的问题了。</p>
<p>但是，如果使用了红锁，因为需要同时在多个节点上都添加锁，性能就变得非常低，并且运维维护成本也非常高，所以，我们一般在项目中也不会直接使用红锁，并且官方也暂时废弃了这个红锁。</p>
<h5 id="18-如果业务非要保证数据的强一致性这个该怎么解决呢">18.
如果业务非要保证数据的强一致性，这个该怎么解决呢？</h5>
<p>嗯~，Redis本身就是支持高可用的，要做到强一致性，就非常影响性能，所以，如果有强一致性要求高的业务，建议使用ZooKeeper实现的分布式锁，它是可以保证强一致性的。</p>
<hr>
<h5 id="19-redis集群有哪些方案知道吗">19.
Redis集群有哪些方案，知道吗？</h5>
<p>嗯~~，在Redis中提供的集群方案总共有三种：主从复制、哨兵模式、Redis分片集群。</p>
<h5 id="20-那你来介绍一下主从同步">20. 那你来介绍一下主从同步</h5>
<p>嗯，是这样的，单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中。</p>
<h5 id="21-能说一下主从同步数据的流程吗">21.
能说一下，主从同步数据的流程吗？</h5>
<p>嗯~~，好！主从同步分为了两个阶段，一个是全量同步，一个是增量同步。</p>
<p>全量同步是指从节点第一次与主节点建立连接的时候使用全量同步，流程是这样的：</p>
<p>第一：从节点请求主节点同步数据，其中从节点会携带自己的replication
id和offset偏移量。</p>
<p>第二：主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个replication
id，如果不是，就说明是第一次同步，那主节点就会把自己的replication
id和offset发送给从节点，让从节点与主节点的信息保持一致。</p>
<p>第三：在同时主节点会执行<code>BGSAVE</code>，生成RDB文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发送过来的RDB文件，这样就保持了一致。</p>
<p>当然，如果在RDB生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步。</p>
<p>增量同步指的是，当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步。</p>
<h5 id="22-怎么保证redis的高并发高可用">22.
怎么保证Redis的高并发高可用？</h5>
<p>首先可以搭建主从集群，再加上使用Redis中的哨兵模式，哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障恢复、通知；如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主；同时Sentinel也充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端，所以一般项目都会采用哨兵的模式来保证Redis的高并发高可用。</p>
<h5 id="23-你们使用redis是单点还是集群哪种集群">23.
你们使用Redis是单点还是集群，哪种集群？</h5>
<p>嗯！我们当时使用的是主从（1主1从）加哨兵。一般单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点。尽量不做分片集群。因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量的网络带宽，也没有办法使用Lua脚本和事务。</p>
<h5 id="24-redis集群脑该怎么解决呢">24. Redis集群脑，该怎么解决呢？</h5>
<p>嗯！这个在项目中很少见，不过脑裂的问题是这样的，我们现在用的是Redis的哨兵模式集群的。</p>
<p>有的时候由于网络等原因可能会出现脑裂的情况，就是说，由于Redis
master节点和Redis
slave节点和Sentinel处于不同的网络分区，使得Sentinel没有能够心跳感知到master，所以通过选举的方式提升了一个slave为master，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在old
master那里写入数据，新节点无法同步数据，当网络恢复后，Sentinel会将old
master降为slave，这时再从新master同步数据，这会导致old
master中的大量数据丢失。</p>
<p>关于解决的话，我记得在Redis的配置中可以设置：第一可以设置最少的slave节点个数，比如设置至少要有一个从节点才能同步数据，第二个可以设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失。</p>
<h5 id="25-redis的分片集群有什么作用">25. Redis的分片集群有什么作用</h5>
<p>分片集群主要解决的是海量数据存储的问题，集群中有多个master，每个master保存不同数据，并且还可以给每个master设置多个slave节点，就可以继续增大集群的高并发能力。同时每个master之间通过ping监测彼此健康状态，就类似于哨兵模式了。当客户端请求可以访问集群任意节点，最终都会被转发到正确节点。</p>
<h5 id="26-redis分片集群中数据是怎么存储和读取的">26.
Redis分片集群中数据是怎么存储和读取的？</h5>
<p>嗯~，在Redis集群中是这样的：</p>
<p>Redis 集群引入了哈希槽的概念，有 16384
个哈希槽，集群中每个主节点绑定了一定范围的哈希槽范围，key通过CRC16校验后对16384取模来决定放置哪个槽，通过槽找到对应的节点进行存储。取值的逻辑是一样的。</p>
<h5 id="27-redis是单线程的但是为什么还那么快">27.
Redis是单线程的，但是为什么还那么快？</h5>
<p>嗯，这个有几个原因吧~~~</p>
<ol type="1">
<li>完全基于内存的，C语言编写。</li>
<li>采用单线程，避免不必要的上下文切换和竞争条件。</li>
<li>使用多路I/O复用模型，非阻塞IO。</li>
</ol>
<p>例如：<code>BGSAVE</code>和<code>BGREWRITEAOF</code>都是在后台执行操作，不影响主线程的正常使用，不会产生阻塞。</p>
<h5 id="28-能解释一下io多路复用模型简历还我">28.
能解释一下I/O多路复用模型？（简历还我）</h5>
<p>嗯~~，I/O多路复用是指利用单个线程来同时监听多个Socket，并且在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I/O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</p>
<p>其中Redis的网络模型就是使用I/O多路复用结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；</p>
<p>在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</p>
<h4 id="二mysql">二、MySQL</h4>
<h5 id="1-在mysql中如何定位慢查询呢">1.
在MySQL中，如何定位慢查询呢？</h5>
<p>嗯，我们当时在做压力测试时发现有些接口响应时间非常慢，压测的结果大概是5秒钟，我们在MySQL中开启了，慢日志查询，设置的值就是2秒，一但SQL的执行时间超过2秒就会记录到日志中</p>
<h5 id="2-那这个sql语句执行很慢如何分析呢">2.
那这个SQL语句执行很慢，如何分析呢？</h5>
<p>如果一条SQL执行很慢，我们通常会使用MySQL的<code>EXPLAIN</code>命令来分析这条SQL的执行情况。通过<code>key</code>和<code>key_len</code>可以检查是否命中了索引，如果已经添加了索引，也可以判断索引是否有效。通过<code>type</code>字段可以查看SQL是否有优化空间，比如是否存在全索引扫描或全表扫描。通过<code>extra</code>建议可以判断是否出现回表情况，如果出现，可以尝试添加索引或修改返回字段来优化。</p>
<h5 id="3-那你了解过索引吗什么是索引">3.
那你了解过索引吗？什么是索引</h5>
<p>嗯，索引在项目中非常常见，它是一种帮助MySQL高效获取数据的数据结构，主要用来提高数据检索效率，降低数据库的I/O成本。同时，索引列可以对数据进行排序，降低数据排序的成本，也能减少CPU的消耗。</p>
<h5 id="4-索引的底层数据结构了解过吗">4.
索引的底层数据结构了解过吗？</h5>
<p>MySQL的默认存储引擎InnoDB使用的是B+树作为索引的存储结构。选择B+树的原因包括：节点可以有更多子节点，路径更短；磁盘读写代价更低，非叶子节点只存储键值和指针，叶子节点存储数据；B+树适合范围查询和扫描，因为叶子节点形成了一个双向链表。</p>
<h5 id="5-b树与b树的区别是什么">5. B+树与B树的区别是什么？</h5>
<ol type="1">
<li>B树的非叶子节点和叶子节点都存放数据，而B+树的所有数据只出现在叶子节点，这使得B+树在查询时效率更稳定。</li>
<li>B+树在进行范围查询时效率更高，因为所有数据都在叶子节点，并且叶子节点之间形成了双向链表。</li>
</ol>
<h5 id="6-什么是聚簇索引什么是非聚簇索引">6.
什么是聚簇索引什么是非聚簇索引</h5>
<p>好的~聚簇索引是指数据与索引放在一起，B+树的叶子节点保存了整行数据，通常只有一个聚簇索引，一般是由主键构成。</p>
<p>非聚簇索引则是数据与索引分开存储，B+树的叶子节点保存的是主键值，可以有多个非聚簇索引，通常我们自定义的索引都是非聚簇索引。</p>
<h5 id="7-什么是回表查询呢">7. 什么是回表查询呢</h5>
<p>嗯，其实跟刚才介绍的聚簇索引和非聚簇索引是有关系的，回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表
【备注:如果面试官直接问回表，则需要先介绍聚簇索引和非聚簇索引】</p>
<h5 id="8-知道什么是覆盖索引吗">8. 知道什么是覆盖索引吗？</h5>
<p>嗯~，清楚的
覆盖索引是指select查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。
如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select*，尽量在返回的列中都包含添加索引的字段</p>
<h5 id="9-mysql超大分页怎么处理">9. MySQL超大分页怎么处理</h5>
<p>嗯，超大分页通常发生在数据量大的情况下，使用<code>LIMIT</code>分页查询且需要排序时效率较低。可以通过覆盖索引和子查询来解决。首先查询数据的ID字段进行分页，然后根据ID列表用子查询来过滤只查询这些ID的数据，因为查询ID时使用的是覆盖索引，所以效率可以提升。</p>
<h5 id="10-索引的创建原则有哪些">10. 索引的创建原则有哪些</h5>
<p>嗯，这个情况有很多，不过都有一个大前提，就是表中的数据要超过10万以上，我们才会创建索引，并且添加索引的字段是查询比较频繁的字段，一般也是像作为查询条件，排序字段或分组的字段这些。
还有就是，我们通常创建索引的时候都是使用复合索引来创建，一条SQL的返回值，尽量使用覆盖索引，如果字段的区分度不高的话，我们也会把它放在组合索引后面的字段。
如果某一个字段的内容较长，我们会考虑使用前缀索引来使用，当然并不是所有的字段都要添加索引，这个索引的数量也要控制，因为添加索引也会导致新增改的速度变慢。</p>
<h5 id="11-什么情况下索引会失效">11. 什么情况下索引会失效</h5>
<p>嗯，这个情况比较多，我说一些自己的经验，以前遇到过的
比如，索引在使用的时候没有遵循最左匹配法则，第二个是，模糊查询，如果%号在前面也会导致索引失效。如果在添加索引的字段上进行了运算操作或者类型转换也都会导致索引失效。
我们之前还遇到过一个就是，如果使用了复合索引，中间使用了范围查询，右边的条件索引也会失效所以，通常情况下，想要判断出这条sql是否有索引失效的情况，可以使用explain执行计划来分析</p>
<h5 id="12-谈一谈你对sql优化的经验面试常见">12.
谈一谈你对SQL优化的经验？（面试常见）</h5>
<p>候选人:嗯，这个在项目还是挺常见的，当然如果直说sql优化的话，我们会从这几方面考虑，比如建表的时候、使用索引、sql语句的编写、主从复制，读写分离，还有一个是如果量比较大的话，可以考虑分库分表</p>
<h5 id="13-创建表的时候你们是如何优化的呢">13.
创建表的时候，你们是如何优化的呢？</h5>
<p>创建表时，我们主要参考阿里云的开发手册，选择字段类型时结合字段内容，比如如果是数值的话，像tinyint、int、bigint这些类型，要根据实际情况选择。如果是字符串类型，也是结合存储的内容来选择char和varchar或者text类型</p>
<h5 id="14-在使用索引的时候是如何优化呢">14.
在使用索引的时候，是如何优化呢？</h5>
<p>在使用索引时，我们遵循索引创建原则，确保索引字段是查询频繁的，使用复合索引覆盖SQL返回值，避免在索引字段上进行运算或类型转换，以及控制索引数量。</p>
<h5 id="15-你平时对sql语句做了哪些优化呢">15.
你平时对SQL语句做了哪些优化呢？</h5>
<p>嗯，这个也有很多，比如SELECT语句务必指明字段名称，不要直接使用select*，还有就是要注意SQL语句避免造成索引失效的写法;如果是聚合查询，尽量使用<code>UNION ALL</code>代替<code>UNION</code>，表关联时优先使用<code>INNER JOIN</code>，以及在必须使用<code>LEFT JOIN</code>或<code>RIGHT JOIN</code>时，确保小表作为驱动表。</p>
<h5 id="16-事务的特征是什么可以详细说一下吗">16.
事务的特征是什么，可以详细说一下吗</h5>
<p>事务的特性是ACID，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。例如，A向B转账500元，这个操作要么都成功，要么都失败，体现了原子性。转账过程中数据要保持一致，A扣除了500元，B必须增加500元。隔离性体现在A向B转账时，不受其他事务干扰。持久性体现在事务提交后，数据要被持久化存储。</p>
<h5 id="17--并发事务带来哪些问题">17 . 并发事务带来哪些问题？</h5>
<p>并发事务可能导致脏读、不可重复读和幻读。脏读是指一个事务读到了另一个事务未提交的“脏数据”。不可重复读是指在一个事务内多次读取同一数据，由于其他事务的修改导致数据不一致。幻读是指一个事务读取到了其他事务插入的“幻行”。</p>
<h5 id="18-怎么解决这些问题呢-mysql的默认隔离级别是">18.
怎么解决这些问题呢？ MySQL的默认隔离级别是</h5>
<p>MySQL,支持四种隔离级别，分别有: 第一个是，未提交读(read
uncommitted）它解决不了刚才提出的所有问题，一般项目中也不用这个。第二个是读已提交(read
committed）它能解决脏读的问题的，但是解决不了不可重复读和幻读。第三个是可重复读（repeatable
read）它能解决脏读和不可重复读，但是解决不了幻读，这个也是mysql默认的隔离级别。第四个是串行化(serializable)它可以解决刚才提出来的所有问题，但是由于让是事务串行执行的，性能比较低。所以，我们一般使用的都是mysql默认的隔离级别:可重复读</p>
<h5 id="19-undo-log和redo-log-的区别">19. undo log和redo log 的区别</h5>
<p>好的，其中redo
log日志记录的是数据页的物理变化，服务宕机可用来同步数据，而undo
log不同，它主要记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在undo
log日志文件中新增一条delete语句，如果发生回滚就执行逆操作; redo
log保证了事务的持久性，undo log保证了事务的原子性和一致性</p>
<h5 id="20-事务中的隔离性是如何保障的呢请你解释一下mvcc面试常考">20.
事务中的隔离性是如何保障的呢？（请你解释一下MVCC）[面试常考]</h5>
<p>事务的隔离性是由锁和mvcc实现的。
其中mwcc的意思是多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，它的底层实现主要是分为了三个部分，第一个是隐藏字段，第二个是undo
log日志，第三个是readView读视图隐藏字段是指:在mysql中给每个表都设置了隐藏字段，有一个是trx_id(事务id)，记录每一次操作的事务id，是自增的;另一个字段是roll_pointer(回滚指针)，指向上一个版本的事务版本记录地址
undo
log主要的作用是记录回滚日志，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表
readView解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务id判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是rc隔离级别，每一次执行快照读时生成ReadView，如果是rr隔离级别仅在事务中第一次执行快照读时生成ReadView，后续复用</p>
<p>简洁版：</p>
<p>事务的隔离性通过锁和多版本并发控制（MVCC）来保证。MVCC通过维护数据的多个版本来避免读写冲突。底层实现包括隐藏字段、<code>undo log</code>和<code>read view</code>。隐藏字段包括<code>trx_id</code>和<code>roll_pointer</code>。<code>undo log</code>记录了不同版本的数据，通过<code>roll_pointer</code>形成版本链。<code>read view</code>定义了不同隔离级别下的快照读，决定了事务访问哪个版本的数据。</p>
<h5 id="21-主从复制的原理是什么">21. 主从复制的原理是什么</h5>
<p>MySQL主从复制的核心是二进制日志（Binlog）。步骤如下：</p>
<ol type="1">
<li>主库在事务提交时记录数据变更到Binlog。</li>
<li>从库读取主库的Binlog并写入中继日志（Relay Log）。</li>
<li>从库重做中继日志中的事件，反映到自己的数据中。</li>
</ol>
<h5 id="22-你们项目用过mysql的分库分表吗">22.
你们项目用过MySQL的分库分表吗？</h5>
<p>我们采用微服务架构，每个微服务对应一个数据库，是根据业务进行拆分的，这个其实就是垂直拆分。</p>
<h5 id="23-那你之前使用过水平分库吗">23. 那你之前使用过水平分库吗？</h5>
<p>使用过。当时业务发展迅速，某个表数据量超过1000万，单库优化后性能仍然很慢，因此采用了水平分库。我们首先部署了3台服务器和3个数据库，使用mycat进行数据分片。旧数据也按照ID取模规则迁移到了各个数据库中，这样各个数据库可以分摊存储和读取压力，解决了性能问题。</p>
<h4 id="三-框架篇">三、 框架篇</h4>
<h5 id="1-spring框架中的单例bean是线程安全的吗">1.
Spring框架中的单例bean是线程安全的吗？</h5>
<p>不是线程安全的。当多用户同时请求一个服务时，容器会给每个请求分配一个线程，这些线程会并发执行业务逻辑。如果处理逻辑中包含对单例状态的修改，比如修改单例的成员属性，就必须考虑线程同步问题。Spring框架本身并不对单例bean进行线程安全封装，线程安全和并发问题需要开发者自行处理。</p>
<p>通常在项目中使用的Spring
bean是不可变状态（如Service类和DAO类），因此在某种程度上可以说Spring的单例bean是线程安全的。如果bean有多种状态（如ViewModel对象），就需要自行保证线程安全。最简单的解决办法是将单例bean的作用域由“singleton”变更为“prototype”。</p>
<h5 id="2-什么是aop">2. 什么是AOP？</h5>
<p>AOP，即面向切面编程，在Spring中用于将那些与业务无关但对多个对象产生影响的公共行为和逻辑抽取出来，实现公共模块复用，降低耦合。常见的应用场景包括公共日志保存和事务处理。</p>
<h5 id="3-你们项目中有没有使用到aop">3. 你们项目中有没有使用到AOP</h5>
<p>我们之前在后台管理系统中使用AOP来记录系统操作日志。主要思路是使用AOP的环绕通知和切点表达式，找到需要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，例如类信息、方法信息、注解、请求方式等，并将这些参数保存到数据库。</p>
<h5 id="4-spring的事务是如何实现的">4. Spring的事务是如何实现的</h5>
<p>Spring实现事务的本质是利用AOP完成的。它对方法前后进行拦截，在执行方法前开启事务，在执行完目标方法后根据执行情况提交或回滚事务。</p>
<h5 id="5-spring的事务失效的场景有哪些">5.
Spring的事务失效的场景有哪些</h5>
<p>在项目中，我遇到过几种导致事务失效的场景：</p>
<ol type="1">
<li>有一次我们在方法内部捕获并处理了异常，没有将异常抛出，会导致事务失效。因此，处理异常后应该确保异常能够被抛出。</li>
<li>如果方法抛出检查型异常（checked
exception），并且没有在<code>@Transactional</code>注解上配置<code>rollbackFor</code>属性为<code>Exception</code>，那么异常发生时事务可能不会回滚。</li>
<li>如果事务注解的方法不是公开（public）修饰的，也可能导致事务失效。</li>
</ol>
<h5 id="6-spring的bean的生命周期易考">6.
Spring的bean的生命周期（易考）</h5>
<p>Spring中bean的生命周期包括以下步骤：</p>
<ol type="1">
<li>通过<code>BeanDefinition</code>获取bean的定义信息。</li>
<li>调用构造函数实例化bean。</li>
<li>进行bean的依赖注入，例如通过setter方法或<code>@Autowired</code>注解。</li>
<li>处理实现了<code>Aware</code>接口的bean。通过Aware接口可以获取到bean的一些基本信息,比如bean的名称
bean的工厂和ApplicationContext</li>
<li>执行<code>BeanPostProcessor</code>的前置处理器。</li>
<li>调用初始化方法，如实现了<code>InitializingBean</code>接口或自定义的<code>init-method</code>。</li>
<li>执行<code>BeanPostProcessor</code>的后置处理器，可能在这里产生代理对象。</li>
<li>最后是销毁bean。</li>
</ol>
<h5 id="7-spring中的循环引用问题">7. Spring中的循环引用问题</h5>
<p>循环依赖发生在两个或两个以上的bean互相持有对方，形成闭环。Spring框架允许循环依赖存在，并通过三级缓存解决大部分循环依赖问题：</p>
<ol type="1">
<li>一级缓存：单例池，缓存已完成初始化的bean对象。</li>
<li>二级缓存：缓存尚未完成生命周期的早期bean对象。</li>
<li>三级缓存：缓存<code>ObjectFactory</code>，用于创建bean对象。</li>
</ol>
<h5 id="8-你能说一说具体流程吗">8. 你能说一说具体流程吗</h5>
<p>解决循环依赖的流程如下：</p>
<ol type="1">
<li>实例化A对象，并创建<code>ObjectFactory</code>存入三级缓存。</li>
<li>A在初始化时需要B对象，开始B的创建逻辑。</li>
<li>B实例化完成，也创建<code>ObjectFactory</code>存入三级缓存。</li>
<li>B需要注入A，通过三级缓存获取<code>ObjectFactory</code>生成A对象，存入二级缓存。</li>
<li>B通过二级缓存获得A对象后，B创建成功，存入一级缓存。</li>
<li>A对象初始化时，由于B已创建完成，可以直接注入B，A创建成功存入一级缓存。</li>
<li>清除二级缓存中的临时对象A。</li>
</ol>
<h5 id="9-构造方法出现了循环依赖怎么解决">9.
构造方法出现了循环依赖怎么解决</h5>
<p>由于构造函数是bean生命周期中最先执行的，Spring框架无法解决构造方法的循环依赖问题。可以使用<code>@Lazy</code>懒加载注解，延迟bean的创建直到实际需要时。</p>
<h5 id="10-springmvc的执行流程知道吗">10. SpringMVC的执行流程知道吗</h5>
<p>SpringMVC的执行流程包括以下步骤：</p>
<ol type="1">
<li>用户发送请求到前端控制器<code>DispatcherServlet</code>。</li>
<li><code>DispatcherServlet</code>调用<code>HandlerMapping</code>找到具体处理器。</li>
<li><code>HandlerMapping</code>返回处理器对象及拦截器（如果有）给<code>DispatcherServlet</code>。</li>
<li><code>DispatcherServlet</code>调用<code>HandlerAdapter</code>(处理器适配器)。</li>
<li><code>HandlerAdapter</code>适配并调用具体处理器（Controller）。</li>
<li>在方法上添加了@ResponseBody注解</li>
<li>通过HttpMessageConverter来返回结果转换为JSON并且响应</li>
</ol>
<h5 id="11-springboot的自动装配原理易考">11.
SpringBoot的自动装配原理（易考）</h5>
<p>Spring
Boot的自动配置原理基于<code>@SpringBootApplication</code>注解，它封装了<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>。<code>@EnableAutoConfiguration</code>是核心，它通过<code>@Import</code>导入配置选择器，读取<code>META-INF/spring.factories</code>文件中的类名，根据条件注解决定是否将配置类中的Bean导入到Spring容器中。</p>
<h5 id="12-spring框架常见注解">12. spring框架常见注解</h5>
<p>Spring的常见注解包括：</p>
<ol type="1">
<li>声明Bean的注解：<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>。</li>
<li>依赖注入相关注解：<code>@Autowired</code>、<code>@``Qualifier</code>、<code>@Resource</code>。</li>
<li>设置作用域的注解：<code>@Scope</code>。</li>
<li>配置相关注解：<code>@Configuration</code>、<code>@ComponentScan</code>、<code>@Bean</code>。</li>
<li>AOP相关注解：<code>@Aspect</code>、<code>@Before</code>、<code>@After</code>、<code>@Around</code>、<code>@Pointcut</code>。</li>
</ol>
<h5 id="13-springmvc的常见注解">13. SpringMVC的常见注解</h5>
<p>SpringMVC的常见注解有：</p>
<ul>
<li><code>@RequestMapping</code>：映射请求路径。</li>
<li><code>@RequestBody</code>：接收HTTP请求的JSON数据。</li>
<li><code>@RequestParam</code>：指定请求参数名称。</li>
<li><code>@PathVariable</code>：从请求路径中获取参数。</li>
<li><code>@ResponseBody</code>：将Controller方法返回的对象转化为JSON。</li>
<li><code>@RequestHeader</code>：获取请求头数据。</li>
<li><code>@PostMapping</code>、<code>@GetMapping</code>等。</li>
</ul>
<h5 id="14-springboot的常见注解">14. Springboot的常见注解</h5>
<p>Spring Boot的常见注解包括：</p>
<ul>
<li><code>@SpringBootApplication</code>：由<code>@``SpringBootConfiguration</code>、<code>@``EnableAutoConfiguration</code>和<code>@``ComponentScan</code>组成。</li>
<li>其他注解如<code>@RestController</code>、<code>@GetMapping</code>、<code>@PostMapping</code>等，用于简化Spring
MVC的配置。</li>
</ul>
<h5 id="15spring和springboot之间有什么区别">15.Spring和SpringBoot之间有什么区别？</h5>
<p>Spring 和 Spring Boot 的区别在于它们的目标和用途不同。Spring
是一个轻量级的开源框架，它提供了一种简单的方式来构建企业级应用程序。Spring
Boot 则是 Spring
框架的延伸和扩展，它提供了一种快速构建应用程序的方式。开发人员可以通过使用
Spring Boot Starter
来快速集成常用的第三方库和框架，使得开发人员可以快速构建出一个可运行的应用程序。</p>
<h5 id="16-请你描述一下spring的di和ioc">16.
请你描述一下Spring的DI和IOC、</h5>
<p>IoC 和 DI 都是 Spring 框架中的核心概念，它们的区别在于:</p>
<ul>
<li><strong>IoC（Inverse of
Control，控制反转）</strong>：它是一种思想，主要解决程序设计中的对象依赖关系管理问题。在
IoC
思想中，对象的创建权反转给第三方容器，由容器进行对象的创建及依赖关系的管理。</li>
<li><strong>DI（Dependency Injection，依赖注入）</strong>：它是 IoC
思想的具体实现方式之一，用于实现 IoC。在 Spring
中，依赖注入是指:在对象创建时，由容器自动将依赖对象注入到需要依赖的对象中。</li>
</ul>
<p>简单来说，它们的关系是：</p>
<ul>
<li>IoC 是一种思想、理念，定义了对象创建和依赖关系处理的方式。</li>
<li>DI 是 IoC
思想的具体实现方式之一，实际提供对象依赖关系的注入功能。</li>
</ul>
<p>例如在 Spring 框架中：</p>
<ul>
<li>IoC 体现为 Spring 容器承担了对象创建及依赖关系管理的控制权。</li>
<li>DI 体现为 Spring 容器通过构造方法注入、Setter
方法注入等方式，将依赖对象注入到需要依赖的对象中。</li>
</ul>
<h5 id="17jdk动态代理和cglib动态代理有什么区别">17.JDK动态代理和CGLIB动态代理有什么区别？</h5>
<p>JDK 动态代理和 CGLIB
动态代理都是常见的动态代理实现技术，但它们有以下区别：</p>
<ul>
<li>JDK 动态代理基于接口，要求目标对象实现接口；CGLIB
动态代理基于类，可以代理没有实现接口的目标对象。</li>
<li>JDK 动态代理使用 java.lang.reflect.Proxy 和
java.lang.reflect.InvocationHandler 来生成代理对象；CGLIB 动态代理使用
CGLIB 库来生成代理对象。</li>
<li>JDK 动态代理生成的代理对象是目标对象的接口实现；CGLIB
动态代理生成的代理对象是目标对象的子类。</li>
<li>JDK 动态代理性能相对较高，生成代理对象速度较快；CGLIB
动态代理性能相对较低，生成代理对象速度较慢。</li>
<li>CGLIB 动态代理无法代理 final 类和 final 方法；JDK
动态代理可以代理任意类</li>
</ul>
<h5 id="18拦截器和过滤器有什么区别">18.拦截器和过滤器有什么区别</h5>
<p>拦截器和过滤器的区别主要体现在以下 5 点：</p>
<ol type="1">
<li><strong>出身不同</strong>：过滤器来自于 Servlet，而拦截器来自于
Spring 框架；</li>
<li><strong>触发时机不同</strong>：请求的执行顺序是：请求进入容器 &gt;
进入过滤器 &gt; 进入 Servlet &gt; 进入拦截器 &gt;
执行控制器（Controller），所以过滤器和拦截器的执行时机，是过滤器会先执行，然后才会执行拦截器，最后才会进入真正的要调用的方法；</li>
<li><strong>底层实现不同</strong>：过滤器是基于方法回调实现的，拦截器是基于动态代理（底层是反射）实现的；</li>
<li><strong>支持的项目类型不同</strong>：过滤器是 Servlet
规范中定义的，所以过滤器要依赖 Servlet 容器，它只能用在 Web
项目中；而拦截器是 Spring 中的一个组件，因此拦截器既可以用在 Web
项目中，同时还可以用在 Application 或 Swing 程序中；</li>
<li><strong>使用的场景不同</strong>：因为拦截器更接近业务系统，所以拦截器主要用来实现项目中的业务判断的，比如：登录判断、权限判断、日志记录等业务；而过滤器通常是用来实现通用功能过滤的，比如：敏感词过滤、字符集编码设置、响应数据压缩等功能。</li>
</ol>
<h5 id="19-autowired-和-resource-有什么不同">19. <strong>@Autowired 和
@Resource</strong> 有什么不同</h5>
<p>@Autowired 和 @Resource 都是用来实现依赖注入的注解（在 Spring/Spring
Boot 项目中），但二者却有着 5 点不同：</p>
<ol type="1">
<li>来源不同：@Autowired 来自 Spring 框架，而 @Resource
来自于（Java）JSR-250；</li>
<li>依赖查找的顺序不同：@Autowired 先根据类型再根据名称查询，而
@Resource 先根据名称再根据类型查询；</li>
<li>支持的参数不同：@Autowired 只支持设置 1 个参数，而 @Resource
支持设置 7 个参数；</li>
<li>依赖注入的用法支持不同：@Autowired
既支持构造方法注入，又支持属性注入和 Setter 注入，而 @Resource
只支持属性注入和 Setter 注入；</li>
<li>编译器 IDEA 的提示不同：当注入 Mapper 对象时，使用 @Autowired
注解编译器会提示错误，而使用 @Resource 注解则不会提示错误</li>
</ol>
<h5 id="20-mybatis的执行流程是什么">20. MyBatis的执行流程是什么</h5>
<p>MyBatis的执行流程如下：</p>
<ol type="1">
<li>读取MyBatis配置文件<code>mybatis-config.xml</code>。</li>
<li>构造会话工厂<code>SqlSessionFactory</code>。</li>
<li>会话工厂创建<code>SqlSession</code>对象。</li>
<li>操作数据库的接口，<code>Executor</code>执行器。</li>
<li><code>Executor</code>执行方法中的<code>MappedStatement</code>参数。</li>
<li>输入参数映射。</li>
<li>输出结果映射。</li>
</ol>
<h5 id="21-mybatis是否支持延迟加载">21. Mybatis是否支持延迟加载？</h5>
<p>MyBatis支持延迟加载，即在需要用到数据时才加载。可以通过配置文件中的<code>lazyLoadingEnabled</code>配置启用或禁用延迟加载。</p>
<h5 id="22-延迟加载的底层原理知道吗">22. 延迟加载的底层原理知道吗？</h5>
<p>延迟加载的底层原理主要使用CGLIB动态代理实现：</p>
<ol type="1">
<li>使用CGLIB创建目标对象的代理对象。</li>
<li>调用目标方法时，如果发现是null值，则执行SQL查询。</li>
<li>获取数据后，设置属性值并继续查询目标方法。</li>
</ol>
<h5 id="23-mybatis的一级二级缓存用过吗">23.
Mybatis的一级、二级缓存用过吗？</h5>
<p>MyBatis的一级缓存是基于<code>Perpetual``Cache</code>的HashMap本地缓存，作用域为Session，默认开启。二级缓存需要单独开启，作用域为Namespace或mapper，默认也是采用<code>PerpetualCache</code>，HashMap存储。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
</search>
